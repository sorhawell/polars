Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.get_idx_type", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.argsort", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/strings", "reference/expressions/struct", "reference/expressions/timeseries", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.argsort", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/strings", "reference/series/struct", "reference/series/timeseries", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_idx_type.rst", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.argsort.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/strings.rst", "reference/expressions/struct.rst", "reference/expressions/timeseries.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.argsort.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/strings.rst", "reference/series/struct.rst", "reference/series/timeseries.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.get_idx_type", "polars.internals.batched.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.internals.dataframe.groupby.GroupBy.__iter__", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.all", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "Meta", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.all", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.count", "polars.internals.lazyframe.groupby.LazyGroupBy.first", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.last", "polars.internals.lazyframe.groupby.LazyGroupBy.max", "polars.internals.lazyframe.groupby.LazyGroupBy.mean", "polars.internals.lazyframe.groupby.LazyGroupBy.median", "polars.internals.lazyframe.groupby.LazyGroupBy.min", "polars.internals.lazyframe.groupby.LazyGroupBy.n_unique", "polars.internals.lazyframe.groupby.LazyGroupBy.quantile", "polars.internals.lazyframe.groupby.LazyGroupBy.sum", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 84, 93, 111, 121, 124, 125, 222, 240, 252, 546, 622], "refer": [0, 28, 95, 96, 99, 129, 240, 390, 412, 471, 546, 815, 879, 917], "input": [0, 58, 86, 95, 96, 99, 136, 147, 175, 189, 195, 217, 220, 240, 352, 386, 397, 406, 442, 494, 496, 498, 499, 501, 512, 513, 521, 522, 525, 534, 546, 555, 567, 574, 599, 606, 616, 620, 638, 795, 797, 917], "output": [0, 26, 28, 30, 31, 68, 99, 115, 125, 148, 149, 160, 170, 177, 186, 189, 213, 217, 240, 248, 252, 388, 389, 396, 489, 494, 502, 521, 532, 546, 555, 575, 576, 585, 589, 590, 599, 616, 619, 622, 638, 647, 905, 917], "seri": [0, 1, 21, 49, 59, 60, 61, 62, 63, 66, 67, 68, 83, 85, 88, 93, 114, 115, 117, 121, 125, 132, 140, 142, 144, 145, 150, 153, 154, 156, 158, 166, 167, 171, 182, 183, 197, 201, 206, 207, 221, 240, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 264, 265, 266, 267, 272, 275, 276, 283, 284, 287, 288, 289, 292, 298, 299, 303, 304, 316, 318, 320, 323, 326, 328, 330, 333, 337, 338, 340, 343, 346, 354, 355, 361, 365, 367, 369, 370, 371, 372, 373, 375, 376, 377, 387, 388, 408, 412, 413, 414, 415, 416, 418, 430, 431, 434, 437, 438, 445, 460, 465, 471, 475, 480, 481, 482, 483, 488, 494, 495, 497, 500, 503, 505, 506, 507, 513, 514, 516, 518, 520, 521, 522, 523, 524, 525, 526, 529, 530, 531, 533, 534, 535, 536, 537, 538, 546, 555, 571, 616, 621, 638, 909, 911, 913, 916, 920, 921, 922], "datafram": [0, 1, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 47, 49, 58, 59, 60, 61, 62, 63, 65, 66, 67, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 106, 108, 109, 110, 113, 115, 116, 238, 239, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 285, 286, 289, 290, 291, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 518, 521, 522, 523, 524, 525, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 546, 555, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638, 646, 667, 685, 694, 709, 710, 860, 863, 875, 876, 886, 895, 896, 905, 917], "lazyfram": [0, 1, 46, 48, 58, 59, 60, 61, 62, 65, 66, 106, 107, 108, 109, 110, 111, 113, 117, 164, 176, 240, 289, 358, 546, 555, 637, 923], "express": [0, 63, 65, 68, 115, 117, 118, 125, 136, 138, 140, 147, 173, 177, 185, 189, 195, 217, 220, 222, 240, 248, 249, 251, 252, 262, 269, 271, 289, 300, 301, 302, 305, 311, 313, 317, 334, 352, 355, 358, 365, 367, 371, 374, 379, 382, 387, 388, 389, 390, 394, 395, 396, 397, 406, 408, 409, 410, 415, 429, 430, 431, 433, 435, 440, 442, 446, 454, 455, 471, 477, 480, 486, 488, 491, 495, 496, 498, 499, 501, 502, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 520, 521, 522, 525, 527, 529, 530, 531, 532, 534, 535, 538, 545, 555, 561, 566, 567, 568, 571, 574, 593, 599, 601, 602, 603, 604, 606, 616, 617, 620, 622, 638, 665, 667, 698, 699, 700, 708, 717, 738, 760, 772, 833, 840, 854, 862, 863, 917], "extend": [0, 86, 240, 355, 546, 555, 646, 760, 917], "function": [0, 28, 59, 60, 61, 62, 67, 84, 95, 96, 99, 106, 116, 125, 129, 135, 142, 169, 176, 177, 205, 208, 211, 212, 222, 240, 249, 252, 289, 311, 338, 349, 350, 351, 388, 389, 406, 418, 419, 420, 421, 422, 423, 425, 426, 427, 439, 484, 492, 494, 505, 506, 513, 514, 516, 521, 529, 546, 555, 585, 589, 592, 613, 622, 638, 647, 685, 708, 709, 742, 754, 755, 756, 757, 821, 835, 836, 842, 847, 899, 917], "data": [0, 1, 5, 14, 17, 27, 28, 33, 49, 58, 59, 61, 66, 73, 74, 78, 80, 83, 84, 85, 86, 87, 88, 89, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 113, 114, 116, 117, 118, 124, 126, 127, 137, 146, 147, 148, 160, 161, 162, 164, 175, 176, 180, 185, 186, 193, 200, 204, 205, 217, 219, 238, 240, 297, 316, 339, 346, 366, 373, 375, 412, 428, 429, 439, 471, 484, 486, 499, 532, 546, 555, 559, 560, 568, 574, 575, 592, 603, 604, 616, 638, 646, 692, 697, 701, 714, 716, 750, 815, 831, 832, 842, 847, 879, 897, 898, 899, 900, 902, 907, 916, 917], "type": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 65, 68, 73, 83, 85, 86, 87, 88, 89, 93, 95, 96, 98, 99, 106, 107, 112, 113, 114, 117, 120, 121, 125, 142, 146, 148, 149, 150, 161, 200, 204, 205, 207, 209, 240, 252, 276, 289, 297, 298, 300, 301, 302, 318, 320, 323, 326, 328, 330, 333, 337, 340, 352, 363, 369, 371, 372, 390, 415, 466, 467, 468, 471, 484, 494, 499, 508, 509, 510, 512, 513, 520, 546, 555, 561, 566, 568, 575, 576, 593, 602, 603, 604, 611, 638, 672, 685, 692, 694, 698, 699, 700, 718, 720, 723, 729, 731, 734, 737, 741, 744, 768, 842, 874, 875, 876, 897, 898, 900, 908, 917], "config": [0, 58, 189, 217, 240, 555, 599, 616, 638], "except": [0, 151, 163, 198, 240, 512, 555, 581, 638, 898, 907, 917], "test": [0, 99, 555, 577, 584, 638], "util": [0, 516, 555, 568, 638], "sql": [0, 27, 46, 97, 162, 240, 555], "These": [1, 28, 122, 240, 343, 545, 747], "allow": [1, 28, 49, 73, 84, 106, 108, 109, 110, 111, 117, 118, 124, 160, 163, 164, 185, 186, 187, 205, 219, 240, 334, 414, 429, 471, 546, 580, 581, 585, 589, 603, 604, 617, 638, 738, 817, 832, 834, 879, 899, 917], "you": [1, 28, 32, 58, 83, 85, 86, 87, 89, 93, 95, 96, 99, 100, 104, 106, 113, 121, 125, 133, 137, 160, 163, 173, 185, 186, 202, 204, 208, 222, 240, 252, 271, 300, 301, 302, 358, 367, 388, 390, 414, 419, 420, 421, 422, 423, 425, 426, 427, 456, 459, 471, 495, 505, 514, 546, 561, 564, 577, 581, 584, 602, 604, 622, 638, 646, 667, 698, 699, 700, 772, 817, 864, 867, 879, 898, 907, 917], "regist": [1, 59, 60, 61, 62], "custom": [1, 28, 59, 60, 61, 62, 125, 222, 240, 252, 289, 388, 418, 494, 521, 546, 585, 622, 638, 647, 685, 821, 917], "dedic": [1, 84, 160, 186, 240], "namespac": [1, 239, 545, 555, 637], "underli": [1, 69, 76, 83, 85, 86, 87, 89, 104, 117, 118, 137, 160, 161, 186, 200, 240, 293, 316, 317, 319, 322, 324, 325, 327, 329, 331, 332, 335, 336, 337, 339, 344, 345, 346, 347, 414, 428, 446, 448, 546, 638, 646, 688, 716, 717, 719, 722, 724, 728, 730, 733, 735, 736, 739, 740, 741, 743, 748, 749, 750, 751, 817, 831, 842, 854, 856, 894, 898, 917], "polar": [1, 240, 545, 546, 555, 638, 917, 923, 924], "class": [1, 2, 3, 4, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 88, 115, 116, 204, 205, 240, 546, 555, 638, 897, 898, 917, 923], "without": [1, 5, 67, 98, 101, 105, 107, 111, 211, 212, 240, 252, 311, 338, 419, 420, 421, 422, 423, 425, 426, 427, 531, 546, 613, 638, 708, 709, 714, 742, 917], "requir": [1, 28, 32, 88, 113, 114, 129, 185, 205, 240, 349, 350, 351, 434, 471, 486, 546, 604, 638, 755, 756, 757, 841, 879, 898, 899, 902, 917], "subclass": [1, 240], "mixin": 1, "expr": [1, 58, 59, 60, 61, 62, 63, 66, 68, 136, 138, 140, 162, 163, 173, 177, 185, 189, 217, 240, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 546, 547, 550, 551, 552, 567, 569, 571, 580, 581, 594, 599, 601, 616, 638, 665, 667, 708, 717, 761, 772, 840, 854, 858, 877, 889, 917], "ar": [1, 5, 10, 16, 28, 32, 49, 68, 75, 82, 83, 84, 85, 86, 87, 88, 89, 95, 96, 97, 98, 99, 100, 104, 106, 107, 108, 109, 111, 113, 114, 116, 117, 120, 122, 124, 125, 129, 133, 135, 138, 142, 147, 148, 149, 160, 163, 164, 169, 170, 175, 185, 186, 189, 195, 201, 205, 212, 213, 217, 220, 240, 249, 289, 307, 309, 310, 314, 315, 338, 343, 348, 349, 350, 351, 367, 369, 371, 372, 373, 375, 376, 377, 380, 390, 406, 412, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 439, 441, 442, 456, 459, 460, 478, 495, 496, 498, 501, 502, 532, 534, 539, 540, 542, 545, 546, 547, 550, 551, 552, 555, 564, 569, 574, 575, 576, 577, 581, 584, 585, 589, 590, 593, 596, 599, 603, 604, 606, 613, 616, 617, 620, 638, 644, 646, 685, 706, 707, 742, 747, 753, 754, 755, 756, 757, 767, 772, 776, 779, 780, 781, 782, 783, 784, 791, 815, 819, 821, 827, 844, 847, 864, 867, 868, 887, 898, 899, 907, 909, 911, 913, 917, 920, 921, 922], "all": [1, 7, 13, 16, 21, 24, 28, 33, 65, 66, 68, 83, 86, 88, 89, 90, 95, 96, 98, 99, 100, 104, 106, 108, 109, 115, 116, 118, 133, 139, 151, 156, 158, 160, 161, 164, 169, 172, 173, 180, 185, 186, 194, 198, 203, 209, 211, 213, 240, 250, 251, 271, 276, 286, 289, 291, 305, 311, 315, 352, 362, 363, 366, 369, 372, 376, 377, 379, 382, 384, 388, 389, 401, 405, 409, 412, 417, 434, 440, 447, 453, 455, 458, 461, 462, 464, 470, 477, 489, 499, 512, 514, 529, 534, 546, 555, 561, 564, 566, 568, 570, 585, 589, 593, 602, 605, 611, 617, 638, 667, 672, 682, 685, 708, 714, 774, 788, 815, 848, 855, 861, 863, 866, 869, 870, 872, 878, 917], "support": [1, 28, 32, 66, 83, 84, 85, 86, 87, 88, 89, 97, 98, 99, 107, 115, 118, 122, 124, 160, 161, 186, 194, 195, 202, 205, 240, 284, 406, 440, 442, 465, 499, 546, 605, 606, 638, 680, 848, 873, 899, 917], "target": [1, 28, 64, 240, 452, 471, 860, 879], "thi": [1, 5, 7, 24, 26, 28, 30, 32, 48, 49, 58, 65, 66, 67, 83, 85, 86, 87, 88, 89, 92, 93, 95, 96, 97, 98, 99, 100, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 120, 121, 124, 125, 129, 133, 134, 135, 137, 142, 147, 148, 149, 150, 154, 156, 158, 160, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 178, 179, 180, 185, 186, 187, 189, 192, 194, 196, 197, 200, 202, 204, 205, 208, 209, 211, 212, 213, 214, 215, 217, 218, 222, 239, 240, 249, 251, 252, 261, 264, 271, 272, 276, 285, 289, 298, 305, 311, 316, 324, 334, 337, 338, 346, 354, 365, 366, 367, 371, 382, 387, 388, 394, 395, 396, 397, 403, 404, 406, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 429, 431, 433, 434, 435, 440, 441, 442, 457, 458, 463, 464, 470, 471, 474, 485, 486, 487, 488, 489, 492, 495, 500, 503, 505, 507, 513, 514, 516, 531, 535, 546, 555, 556, 558, 561, 564, 566, 568, 574, 575, 576, 578, 581, 585, 589, 590, 593, 596, 599, 601, 602, 603, 604, 605, 611, 613, 616, 617, 618, 619, 622, 637, 638, 646, 647, 656, 659, 667, 668, 672, 681, 694, 708, 709, 714, 716, 717, 724, 738, 741, 742, 750, 754, 759, 766, 767, 773, 778, 779, 785, 787, 789, 792, 796, 798, 799, 800, 801, 803, 804, 806, 807, 809, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 825, 828, 829, 830, 832, 835, 836, 837, 840, 841, 842, 843, 848, 849, 851, 865, 866, 871, 872, 878, 879, 882, 883, 886, 887, 894, 896, 897, 898, 899, 901, 902, 904, 906, 907, 917], "featur": [1, 32, 49, 64, 240], "i": [1, 5, 13, 26, 28, 30, 31, 49, 58, 63, 64, 65, 66, 67, 68, 70, 72, 73, 75, 79, 81, 83, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 100, 104, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 124, 125, 133, 135, 143, 146, 147, 148, 149, 150, 154, 155, 157, 159, 160, 161, 163, 164, 167, 169, 170, 173, 175, 176, 177, 185, 186, 187, 194, 195, 197, 200, 205, 208, 209, 211, 212, 213, 222, 239, 240, 249, 250, 251, 252, 262, 271, 274, 284, 288, 289, 311, 317, 334, 338, 343, 349, 350, 351, 354, 363, 365, 367, 380, 388, 390, 397, 406, 412, 414, 416, 419, 420, 421, 422, 423, 425, 426, 427, 429, 430, 431, 435, 436, 439, 440, 441, 442, 446, 447, 452, 453, 455, 457, 458, 460, 463, 464, 465, 468, 470, 471, 474, 489, 493, 495, 499, 500, 503, 505, 506, 507, 514, 520, 531, 535, 546, 561, 564, 566, 568, 574, 575, 576, 579, 581, 583, 585, 589, 590, 593, 602, 603, 604, 605, 606, 611, 613, 619, 622, 638, 645, 646, 647, 667, 670, 680, 684, 708, 709, 717, 738, 742, 747, 754, 755, 756, 757, 759, 767, 768, 771, 773, 775, 785, 786, 787, 789, 790, 791, 815, 817, 819, 832, 833, 834, 835, 836, 837, 843, 844, 847, 848, 851, 854, 855, 860, 861, 863, 865, 866, 868, 871, 872, 873, 876, 878, 882, 894, 898, 899, 905, 906, 907, 917], "primarili": 1, "intend": 1, "us": [1, 9, 11, 13, 16, 21, 22, 26, 27, 28, 32, 49, 58, 67, 68, 84, 86, 87, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 104, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 121, 125, 131, 133, 138, 139, 142, 147, 148, 149, 156, 158, 160, 161, 163, 167, 169, 172, 173, 176, 177, 185, 187, 189, 195, 197, 203, 205, 208, 209, 211, 212, 213, 217, 220, 222, 240, 247, 252, 262, 271, 289, 293, 294, 298, 311, 314, 315, 346, 348, 349, 350, 351, 357, 358, 366, 367, 380, 388, 390, 393, 406, 412, 414, 416, 419, 420, 421, 422, 423, 425, 426, 427, 429, 431, 434, 435, 439, 441, 442, 448, 449, 450, 456, 457, 463, 465, 467, 469, 471, 494, 495, 499, 501, 505, 507, 514, 516, 520, 522, 525, 530, 531, 534, 535, 545, 546, 555, 561, 563, 564, 569, 570, 574, 575, 576, 577, 581, 583, 584, 589, 599, 604, 606, 611, 613, 616, 620, 622, 638, 647, 667, 685, 688, 689, 694, 708, 750, 753, 755, 756, 757, 761, 762, 767, 772, 791, 797, 815, 817, 819, 832, 835, 836, 837, 841, 843, 847, 851, 856, 857, 864, 865, 871, 873, 875, 879, 889, 895, 897, 898, 899, 906, 907, 917], "librari": [1, 69, 76, 388, 546, 924], "author": 1, "domain": 1, "specif": [1, 24, 28, 83, 85, 87, 89, 95, 97, 98, 107, 117, 160, 240, 418, 471, 546, 638, 821, 879, 917], "capabl": [1, 28, 240], "which": [1, 16, 25, 26, 28, 29, 30, 31, 32, 58, 59, 60, 61, 62, 86, 95, 96, 97, 98, 99, 106, 107, 113, 133, 137, 148, 149, 209, 240, 249, 289, 355, 367, 369, 372, 373, 375, 376, 377, 397, 419, 420, 421, 422, 423, 425, 426, 427, 460, 546, 564, 566, 575, 576, 603, 604, 611, 619, 638, 646, 760, 772, 776, 780, 781, 782, 783, 784, 835, 868, 917], "mai": [1, 32, 66, 67, 83, 85, 86, 87, 89, 95, 98, 100, 107, 108, 111, 125, 135, 137, 163, 191, 192, 205, 211, 212, 240, 252, 283, 288, 289, 311, 316, 324, 338, 419, 420, 421, 422, 423, 425, 426, 427, 432, 433, 471, 505, 506, 514, 529, 546, 581, 585, 600, 601, 604, 613, 618, 622, 638, 646, 679, 684, 708, 709, 716, 724, 742, 754, 839, 840, 879, 917], "exist": [1, 27, 28, 98, 107, 117, 217, 240, 317, 616, 638, 717], "belong": [1, 148, 240, 575, 638], "core": [1, 205, 240], "cannot": [1, 84, 95, 96, 100, 113, 125, 187, 222, 240, 293, 390, 429, 448, 467, 476, 546, 602, 622, 638, 688, 832, 856, 875, 917], "overrid": [1, 28, 83, 85, 86, 87, 88, 89, 95, 115, 116, 118, 240, 638], "str": [1, 6, 8, 10, 12, 13, 16, 17, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 46, 47, 48, 49, 58, 59, 60, 61, 62, 64, 67, 68, 83, 85, 86, 87, 89, 90, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 116, 117, 118, 128, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 144, 146, 147, 148, 149, 151, 153, 156, 158, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 175, 177, 179, 181, 182, 183, 184, 185, 186, 187, 191, 192, 194, 195, 196, 197, 198, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 247, 248, 252, 267, 268, 269, 274, 275, 276, 284, 287, 289, 313, 318, 334, 337, 338, 341, 343, 352, 354, 356, 358, 360, 365, 367, 371, 374, 389, 390, 396, 398, 406, 409, 415, 417, 419, 420, 421, 422, 423, 425, 426, 427, 433, 434, 441, 442, 475, 476, 477, 480, 491, 492, 493, 494, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 546, 550, 561, 562, 563, 564, 566, 567, 568, 571, 573, 574, 575, 576, 578, 580, 581, 589, 590, 593, 595, 596, 597, 601, 602, 603, 604, 605, 606, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638, 643, 664, 665, 672, 685, 692, 709, 710, 718, 738, 741, 742, 745, 747, 759, 762, 772, 797, 798, 801, 806, 807, 818, 835, 836, 883, 885, 895, 896, 917, 920], "dt": [1, 58, 149, 240, 552, 576, 638, 922], "attempt": [1, 204, 240], "do": [1, 28, 58, 65, 106, 137, 163, 200, 208, 211, 240, 271, 311, 458, 464, 470, 492, 546, 561, 566, 581, 585, 593, 602, 603, 604, 638, 646, 667, 708, 866, 872, 878, 898, 907, 917], "so": [1, 49, 97, 106, 107, 146, 148, 149, 177, 240, 262, 274, 367, 458, 464, 470, 546, 575, 576, 638, 670, 866, 872, 878], "rais": [1, 12, 16, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 113, 114, 185, 240, 288, 293, 396, 408, 446, 448, 460, 471, 520, 546, 684, 688, 854, 856, 868, 879, 898, 907, 917], "an": [1, 27, 28, 59, 61, 62, 63, 65, 68, 69, 73, 74, 76, 83, 95, 96, 97, 98, 99, 104, 106, 108, 116, 117, 118, 125, 126, 127, 135, 138, 140, 142, 148, 149, 160, 161, 163, 173, 177, 183, 185, 200, 204, 211, 217, 222, 240, 248, 249, 252, 269, 271, 274, 288, 289, 293, 297, 300, 301, 302, 306, 307, 308, 309, 310, 311, 317, 346, 355, 358, 367, 379, 388, 389, 397, 410, 418, 419, 420, 421, 422, 423, 425, 426, 427, 446, 448, 453, 471, 480, 495, 499, 511, 516, 520, 529, 530, 531, 534, 546, 555, 559, 560, 561, 566, 568, 571, 575, 576, 581, 585, 593, 602, 616, 617, 622, 638, 665, 667, 670, 684, 688, 692, 697, 698, 699, 700, 701, 704, 705, 706, 707, 708, 717, 750, 754, 760, 772, 821, 822, 823, 824, 825, 826, 828, 829, 830, 835, 836, 854, 856, 861, 879, 898, 907, 917], "attributeerror": 1, "howev": [1, 86, 135, 240, 754, 917], "can": [1, 28, 58, 68, 74, 86, 95, 96, 99, 100, 104, 106, 108, 110, 111, 116, 117, 118, 125, 134, 142, 148, 156, 158, 173, 177, 189, 195, 208, 211, 217, 222, 240, 252, 271, 289, 307, 310, 311, 334, 343, 355, 366, 367, 401, 414, 419, 420, 421, 422, 423, 425, 426, 427, 431, 434, 436, 439, 442, 455, 458, 464, 470, 489, 492, 495, 496, 499, 507, 514, 516, 522, 535, 545, 546, 561, 566, 575, 599, 606, 616, 618, 622, 638, 647, 667, 685, 708, 738, 747, 760, 772, 802, 817, 835, 836, 837, 841, 844, 847, 863, 866, 872, 878, 917], "other": [1, 16, 28, 68, 95, 96, 99, 106, 113, 114, 133, 137, 143, 162, 163, 169, 170, 185, 189, 212, 217, 238, 240, 251, 262, 267, 300, 301, 302, 313, 371, 390, 442, 484, 498, 501, 534, 546, 555, 564, 580, 581, 589, 590, 599, 613, 616, 617, 638, 646, 663, 698, 699, 700, 712, 779, 834, 900, 908, 916, 917], "onli": [1, 16, 24, 28, 49, 58, 64, 66, 95, 96, 98, 99, 100, 104, 106, 107, 108, 109, 110, 117, 118, 122, 125, 133, 160, 163, 167, 186, 197, 202, 240, 247, 252, 262, 299, 300, 301, 302, 334, 352, 361, 414, 487, 530, 546, 561, 564, 577, 581, 584, 638, 695, 698, 699, 700, 738, 765, 817, 894, 917], "gener": [1, 90, 97, 115, 116, 117, 118, 129, 177, 187, 203, 208, 240, 289, 429, 435, 546, 638, 685, 832, 843, 895, 917], "userwarn": 1, "pl": [1, 7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 31, 32, 49, 58, 59, 60, 61, 62, 63, 66, 67, 68, 83, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 106, 107, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 396, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 546, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 671, 672, 674, 679, 680, 681, 683, 685, 692, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 756, 757, 760, 761, 762, 763, 765, 768, 769, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 810, 811, 812, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 843, 844, 845, 846, 848, 849, 850, 851, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 917], "register_expr_namespac": [1, 59, 61, 62], "greet": 1, "def": [1, 59, 60, 61, 62, 116, 117, 118, 176, 208, 240, 521, 546, 592, 638], "__init__": [1, 2, 3, 4, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 115], "self": [1, 59, 60, 61, 62, 65, 125, 126, 127, 129, 130, 131, 133, 136, 137, 138, 139, 140, 147, 148, 149, 151, 153, 154, 155, 162, 163, 165, 166, 167, 168, 169, 170, 171, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 203, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 240, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 291, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 546, 558, 559, 560, 561, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 638, 646, 796, 797, 835, 836, 849, 904, 908, 917], "_expr": [1, 60], "hello": [1, 458, 464, 470, 492, 672, 866, 872, 878], "return": [1, 24, 26, 30, 31, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 75, 77, 82, 83, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 121, 125, 126, 129, 132, 133, 134, 135, 136, 138, 139, 142, 146, 147, 151, 153, 159, 160, 161, 162, 164, 165, 172, 173, 175, 176, 177, 185, 186, 187, 198, 199, 205, 208, 209, 217, 219, 222, 225, 229, 234, 240, 249, 250, 253, 254, 255, 256, 257, 258, 261, 262, 264, 265, 266, 268, 272, 274, 275, 276, 287, 288, 292, 294, 303, 304, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 344, 345, 347, 354, 364, 367, 369, 370, 371, 372, 373, 375, 376, 377, 383, 387, 397, 401, 415, 416, 429, 430, 436, 437, 438, 445, 447, 449, 451, 452, 453, 455, 456, 457, 459, 460, 463, 465, 466, 467, 468, 474, 479, 480, 481, 482, 483, 485, 487, 488, 489, 493, 494, 495, 496, 499, 508, 509, 510, 516, 518, 520, 521, 530, 531, 534, 536, 538, 546, 559, 561, 564, 565, 566, 568, 577, 583, 584, 585, 592, 593, 602, 603, 604, 609, 610, 611, 616, 619, 625, 629, 634, 638, 643, 644, 645, 647, 654, 655, 657, 658, 661, 662, 664, 668, 670, 671, 672, 683, 684, 687, 689, 697, 709, 710, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 751, 754, 759, 767, 769, 774, 776, 777, 779, 780, 781, 782, 783, 784, 788, 790, 793, 796, 802, 819, 820, 832, 833, 834, 836, 844, 853, 854, 855, 857, 859, 860, 861, 863, 864, 865, 867, 868, 871, 873, 874, 875, 876, 879, 882, 888, 890, 901, 903, 904, 908, 917], "lit": [1, 93, 121, 292, 367, 379, 505, 507, 514, 535, 538, 546, 687, 762, 917], "alia": [1, 58, 60, 62, 148, 149, 165, 210, 217, 240, 252, 264, 269, 271, 300, 301, 302, 306, 307, 308, 309, 310, 312, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 328, 330, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 345, 346, 358, 360, 365, 367, 370, 371, 379, 382, 383, 390, 399, 407, 414, 430, 446, 447, 450, 453, 456, 459, 465, 467, 468, 469, 475, 476, 484, 485, 491, 494, 497, 498, 500, 501, 505, 506, 507, 510, 511, 514, 515, 521, 529, 530, 534, 535, 546, 575, 576, 578, 584, 612, 616, 638, 659, 667, 716, 718, 721, 738, 741, 746, 750, 793, 875, 876, 917], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 458, 464, 470, 672, 866, 872, 878], "select": [1, 27, 58, 59, 60, 61, 63, 94, 95, 96, 97, 98, 100, 104, 106, 111, 125, 159, 163, 173, 176, 185, 194, 206, 210, 213, 240, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 285, 286, 289, 290, 291, 299, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 359, 361, 362, 363, 365, 366, 368, 369, 371, 372, 374, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 391, 392, 393, 400, 401, 402, 403, 404, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 451, 452, 453, 454, 455, 457, 458, 460, 463, 464, 466, 467, 468, 470, 472, 473, 475, 476, 477, 478, 481, 482, 483, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 499, 500, 502, 503, 504, 505, 506, 507, 510, 512, 513, 514, 515, 516, 518, 522, 523, 524, 525, 526, 527, 529, 532, 533, 534, 535, 536, 537, 546, 562, 578, 581, 592, 605, 612, 617, 619, 638, 667, 685, 835, 836, 848, 860, 863, 889, 917], "shape": [1, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 49, 58, 59, 60, 61, 62, 63, 66, 67, 68, 80, 83, 85, 86, 87, 88, 89, 90, 93, 106, 111, 117, 118, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 158, 159, 162, 163, 165, 166, 167, 168, 169, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 187, 189, 191, 192, 194, 195, 196, 197, 198, 199, 201, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 518, 521, 522, 523, 524, 525, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 546, 559, 561, 563, 564, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 599, 600, 601, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 666, 667, 668, 671, 672, 674, 679, 680, 681, 683, 685, 692, 694, 695, 697, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 756, 757, 760, 761, 762, 763, 765, 768, 769, 771, 772, 774, 776, 779, 780, 781, 782, 783, 784, 788, 790, 793, 796, 797, 802, 810, 811, 812, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 839, 843, 844, 845, 846, 848, 849, 850, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 886, 888, 889, 890, 891, 892, 895, 896, 900, 902, 903, 904, 905, 908, 917], "3": [1, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 25, 26, 28, 29, 30, 31, 32, 49, 58, 59, 60, 61, 62, 63, 66, 67, 68, 83, 85, 86, 87, 88, 89, 90, 97, 99, 106, 111, 112, 113, 114, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 247, 248, 249, 252, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 297, 298, 299, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 329, 331, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 384, 385, 386, 387, 389, 390, 401, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 439, 441, 442, 443, 446, 449, 450, 452, 454, 456, 459, 465, 466, 467, 468, 469, 475, 476, 477, 479, 480, 481, 485, 487, 488, 489, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 511, 512, 513, 514, 515, 518, 520, 521, 522, 523, 524, 525, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 546, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638, 643, 646, 647, 648, 650, 651, 652, 654, 655, 656, 657, 658, 666, 667, 668, 671, 674, 679, 680, 681, 683, 685, 692, 694, 695, 696, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716, 717, 718, 719, 720, 721, 722, 725, 726, 727, 729, 731, 732, 733, 735, 737, 739, 741, 742, 743, 746, 747, 749, 750, 754, 756, 757, 760, 761, 762, 763, 765, 768, 769, 771, 772, 774, 776, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 791, 792, 793, 796, 798, 799, 800, 801, 802, 803, 804, 810, 811, 812, 814, 815, 818, 819, 820, 821, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 843, 845, 846, 847, 848, 849, 851, 857, 858, 860, 862, 864, 867, 873, 877, 886, 887, 888, 889, 890, 891, 892, 894, 895, 897, 898, 899, 902, 903, 904, 905, 906, 908, 917], "1": [1, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 25, 26, 28, 29, 30, 31, 32, 49, 58, 59, 60, 61, 62, 63, 66, 67, 68, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 100, 106, 107, 111, 112, 113, 114, 115, 117, 118, 125, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 457, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 546, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 670, 671, 674, 679, 680, 681, 683, 685, 692, 694, 695, 696, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 755, 756, 757, 760, 761, 762, 763, 765, 768, 769, 771, 772, 774, 776, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 790, 792, 793, 796, 798, 799, 800, 801, 802, 803, 804, 810, 811, 812, 814, 815, 818, 819, 820, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 860, 862, 863, 875, 876, 879, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 917], "2": [1, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 25, 26, 28, 29, 30, 31, 32, 49, 58, 59, 60, 61, 62, 63, 66, 67, 83, 85, 86, 87, 88, 89, 90, 97, 106, 111, 112, 113, 114, 117, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 246, 247, 248, 250, 251, 252, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 318, 320, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 336, 337, 338, 339, 340, 341, 343, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 439, 440, 441, 442, 443, 445, 447, 450, 453, 454, 455, 456, 458, 459, 460, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 491, 492, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 546, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638, 643, 646, 647, 649, 653, 654, 655, 656, 657, 658, 666, 667, 668, 671, 672, 674, 679, 680, 681, 683, 685, 694, 695, 696, 697, 701, 702, 705, 706, 707, 708, 709, 710, 711, 712, 717, 722, 726, 727, 733, 735, 740, 742, 743, 747, 749, 751, 753, 754, 755, 756, 757, 760, 761, 762, 763, 765, 768, 769, 771, 772, 774, 776, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 792, 793, 794, 796, 798, 799, 800, 801, 802, 803, 804, 810, 811, 812, 814, 815, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 843, 845, 847, 848, 849, 850, 851, 853, 855, 861, 862, 863, 866, 867, 868, 869, 870, 872, 875, 876, 878, 879, 886, 887, 888, 889, 890, 891, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 908, 917], "column_0": [1, 125, 208, 240], "register_dataframe_namespac": [1, 60, 61, 62], "split": [1, 59, 161, 240, 467, 468, 875, 876], "splitfram": [1, 59], "df": [1, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 25, 26, 28, 29, 30, 31, 32, 59, 60, 63, 83, 84, 85, 86, 87, 88, 89, 90, 96, 106, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 285, 286, 289, 290, 291, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 518, 521, 522, 523, 524, 525, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 546, 560, 561, 562, 564, 566, 567, 568, 569, 570, 572, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 600, 601, 602, 605, 607, 608, 609, 611, 612, 613, 614, 618, 619, 622, 625, 634, 638, 667, 685, 694, 860, 863, 870, 875, 876, 896, 917], "_df": [1, 59], "by_alternate_row": 1, "list": [1, 28, 35, 58, 59, 61, 65, 67, 83, 85, 86, 87, 89, 92, 94, 95, 96, 97, 98, 100, 104, 106, 107, 116, 117, 118, 128, 131, 134, 135, 136, 140, 145, 147, 148, 153, 160, 172, 175, 185, 186, 189, 195, 201, 202, 208, 209, 210, 211, 217, 220, 221, 240, 247, 267, 270, 271, 272, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 354, 360, 388, 397, 398, 406, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 433, 441, 442, 453, 466, 475, 476, 480, 496, 499, 500, 507, 511, 522, 525, 534, 535, 546, 562, 563, 565, 567, 571, 574, 575, 589, 599, 606, 611, 612, 616, 617, 620, 621, 638, 660, 663, 666, 667, 668, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 696, 709, 754, 759, 763, 766, 779, 819, 821, 822, 823, 824, 825, 826, 828, 829, 830, 833, 861, 874, 889, 897, 917], "with_row_count": [1, 240, 390, 546, 638, 836, 917], "name": [1, 14, 18, 20, 27, 28, 30, 48, 59, 60, 61, 62, 67, 68, 72, 83, 85, 86, 87, 88, 89, 90, 94, 95, 96, 98, 99, 100, 101, 104, 105, 106, 108, 109, 110, 114, 115, 116, 117, 118, 125, 128, 131, 132, 133, 136, 141, 144, 146, 147, 160, 162, 163, 169, 175, 177, 181, 185, 186, 188, 189, 195, 201, 203, 207, 208, 209, 210, 211, 212, 217, 218, 219, 220, 240, 248, 252, 289, 338, 343, 352, 367, 379, 389, 396, 398, 406, 409, 442, 475, 476, 477, 492, 493, 496, 498, 499, 501, 502, 504, 507, 512, 518, 519, 522, 525, 527, 528, 530, 532, 534, 535, 536, 546, 562, 563, 564, 567, 574, 580, 581, 589, 596, 598, 599, 606, 611, 612, 613, 616, 618, 619, 620, 638, 643, 685, 697, 709, 742, 747, 818, 883, 885, 895, 896, 899, 917], "n": [1, 11, 13, 21, 31, 35, 36, 59, 60, 61, 62, 68, 92, 93, 95, 96, 106, 121, 125, 126, 137, 148, 151, 160, 161, 165, 186, 187, 198, 199, 202, 225, 234, 240, 270, 275, 287, 311, 312, 316, 317, 321, 342, 346, 355, 364, 383, 407, 415, 429, 439, 467, 468, 479, 481, 485, 516, 518, 530, 536, 546, 559, 561, 575, 577, 584, 609, 610, 625, 634, 638, 646, 666, 671, 683, 697, 708, 711, 716, 717, 721, 746, 750, 760, 769, 793, 810, 832, 847, 851, 875, 876, 888, 890, 901, 906, 917], "filter": [1, 59, 98, 106, 107, 111, 133, 156, 157, 158, 222, 240, 450, 469, 491, 495, 514, 546, 564, 568, 578, 622, 638, 835, 917], "col": [1, 26, 28, 58, 59, 60, 61, 63, 87, 89, 106, 116, 117, 125, 136, 140, 147, 148, 149, 157, 159, 173, 176, 185, 189, 195, 210, 217, 220, 240, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 285, 286, 289, 290, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 355, 358, 359, 360, 361, 365, 366, 367, 368, 370, 371, 373, 374, 375, 378, 379, 380, 381, 385, 386, 387, 390, 391, 392, 393, 400, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 498, 500, 501, 505, 506, 507, 510, 513, 514, 515, 516, 517, 522, 525, 528, 529, 535, 538, 546, 567, 571, 574, 575, 576, 578, 592, 599, 606, 612, 616, 617, 620, 638, 667, 685, 694, 738, 819, 835, 836, 860, 863, 879, 917], "0": [1, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 28, 32, 58, 59, 60, 62, 63, 67, 90, 95, 96, 97, 99, 100, 104, 106, 108, 109, 110, 111, 112, 115, 116, 117, 118, 121, 125, 126, 127, 129, 130, 131, 134, 138, 139, 142, 143, 145, 146, 147, 148, 150, 154, 159, 160, 161, 162, 164, 166, 167, 168, 171, 172, 173, 174, 178, 179, 183, 187, 188, 189, 192, 194, 195, 196, 197, 203, 205, 206, 208, 211, 213, 214, 217, 218, 220, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 240, 246, 247, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 269, 271, 274, 280, 289, 297, 299, 301, 302, 303, 304, 306, 311, 314, 315, 322, 325, 326, 328, 329, 333, 339, 340, 349, 350, 351, 353, 354, 355, 356, 357, 361, 363, 366, 369, 372, 373, 375, 376, 377, 379, 380, 385, 386, 388, 390, 391, 392, 393, 400, 403, 404, 405, 407, 408, 411, 412, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 434, 436, 437, 438, 439, 443, 444, 452, 474, 478, 482, 483, 484, 490, 495, 496, 497, 498, 500, 502, 504, 505, 507, 511, 514, 523, 524, 527, 528, 529, 532, 535, 537, 538, 546, 559, 560, 563, 565, 569, 570, 574, 575, 580, 583, 588, 593, 594, 598, 599, 601, 602, 604, 606, 607, 614, 616, 617, 618, 620, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 638, 648, 649, 650, 651, 652, 653, 654, 656, 658, 659, 667, 670, 692, 695, 697, 702, 703, 708, 709, 710, 712, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 736, 737, 743, 744, 753, 755, 756, 757, 759, 761, 765, 768, 776, 778, 780, 781, 782, 783, 784, 790, 791, 796, 799, 800, 810, 814, 815, 821, 823, 824, 826, 827, 828, 830, 832, 844, 845, 846, 850, 851, 853, 860, 863, 882, 891, 892, 895, 899, 900, 904, 906, 907, 917], "drop": [1, 86, 125, 132, 133, 209, 217, 240, 270, 312, 314, 315, 546, 564, 611, 616, 638, 666, 711, 713, 714, 917], "aaa": [1, 28, 240, 475, 476], "bbb": [1, 28, 240, 475, 476], "ccc": [1, 28, 240, 475, 476], "ddd": [1, 28, 240, 475, 476], "eee": [1, 28, 240], "fff": 1, "column": [1, 13, 14, 17, 18, 20, 28, 30, 49, 58, 59, 66, 67, 68, 70, 72, 83, 85, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 100, 101, 104, 105, 106, 107, 108, 109, 110, 113, 117, 124, 125, 131, 132, 133, 134, 136, 141, 144, 146, 147, 148, 149, 153, 154, 160, 162, 163, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 188, 189, 195, 196, 197, 201, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 217, 218, 220, 240, 249, 250, 252, 261, 264, 267, 272, 285, 288, 289, 317, 319, 322, 324, 325, 327, 329, 331, 332, 335, 336, 339, 344, 345, 347, 352, 354, 358, 360, 367, 379, 390, 395, 396, 398, 406, 409, 413, 415, 416, 419, 420, 421, 422, 423, 425, 426, 427, 434, 441, 442, 451, 467, 468, 471, 477, 491, 492, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 546, 563, 564, 565, 567, 574, 575, 576, 580, 581, 585, 586, 587, 588, 589, 591, 592, 594, 596, 598, 599, 606, 607, 608, 611, 612, 613, 614, 616, 617, 618, 619, 620, 638, 644, 645, 663, 668, 681, 684, 709, 719, 722, 724, 728, 730, 733, 735, 736, 739, 740, 743, 748, 749, 751, 759, 819, 841, 859, 875, 876, 886, 895, 896, 917], "txt": 1, "utf8": [1, 9, 16, 49, 86, 95, 96, 106, 115, 134, 135, 136, 142, 188, 204, 240, 276, 354, 390, 445, 449, 452, 453, 455, 456, 465, 466, 467, 468, 471, 499, 501, 546, 565, 567, 598, 638, 672, 745, 759, 789, 853, 857, 860, 861, 863, 864, 873, 874, 875, 876, 879, 917], "register_lazyframe_namespac": [1, 59, 60, 62], "dtypeoper": [1, 61], "ldf": [1, 61, 559, 563, 574, 599, 603, 604, 606, 616, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638], "_ldf": [1, 61], "upcast_integer_typ": [1, 61], "with_column": [1, 61, 149, 176, 240, 252, 262, 271, 297, 298, 300, 301, 302, 307, 310, 312, 363, 366, 367, 370, 373, 375, 376, 377, 379, 390, 406, 407, 450, 456, 459, 461, 462, 465, 467, 468, 469, 471, 474, 484, 494, 495, 498, 500, 501, 507, 511, 521, 535, 538, 546, 576, 592, 638, 667, 694, 879], "tp": [1, 61], "cast": [1, 60, 61, 83, 120, 142, 148, 149, 176, 205, 217, 240, 251, 298, 309, 310, 316, 390, 414, 454, 455, 474, 478, 484, 501, 546, 575, 576, 592, 616, 638, 694, 706, 707, 716, 817, 862, 863, 887, 896, 900, 917], "int64": [1, 30, 60, 61, 93, 95, 121, 134, 142, 148, 149, 176, 188, 200, 205, 240, 309, 310, 320, 323, 326, 328, 330, 333, 340, 352, 414, 454, 478, 484, 495, 499, 512, 534, 546, 565, 575, 576, 592, 598, 619, 638, 706, 707, 720, 723, 729, 731, 734, 737, 744, 817, 834, 887, 898, 899, 900, 917], "int8": [1, 61, 142, 240, 309, 310, 478, 546, 706, 707, 711, 820, 887, 904, 917], "int16": [1, 61, 309, 310, 478, 546, 706, 707, 887, 917], "int32": [1, 61, 86, 117, 118, 148, 149, 161, 240, 297, 324, 347, 484, 546, 575, 576, 638, 724, 751, 796, 900, 917], "b": [1, 25, 26, 29, 32, 49, 61, 66, 83, 85, 86, 87, 88, 89, 90, 99, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 153, 154, 156, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 248, 251, 252, 263, 267, 271, 276, 278, 291, 297, 298, 305, 313, 314, 315, 352, 356, 357, 358, 360, 362, 363, 366, 367, 369, 372, 373, 374, 375, 376, 377, 379, 382, 384, 389, 401, 405, 406, 409, 417, 434, 440, 442, 451, 454, 461, 477, 487, 489, 491, 492, 493, 494, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 511, 512, 513, 514, 515, 518, 521, 522, 523, 524, 525, 526, 527, 529, 532, 533, 534, 535, 536, 537, 546, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 577, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638, 646, 667, 694, 710, 712, 753, 754, 762, 772, 779, 789, 818, 834, 859, 862, 869, 886, 899, 903, 917], "4": [1, 13, 21, 25, 26, 28, 29, 32, 49, 58, 59, 60, 61, 62, 63, 66, 68, 83, 85, 86, 87, 88, 89, 90, 106, 112, 113, 114, 118, 125, 126, 127, 130, 133, 136, 137, 138, 139, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 169, 172, 173, 175, 176, 177, 178, 182, 186, 190, 195, 198, 199, 200, 201, 202, 203, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 246, 247, 251, 252, 263, 269, 270, 271, 272, 275, 283, 284, 287, 291, 297, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 319, 323, 329, 330, 331, 335, 336, 338, 339, 340, 343, 344, 345, 347, 353, 356, 357, 360, 361, 362, 364, 365, 366, 367, 376, 377, 379, 382, 384, 386, 389, 390, 406, 408, 409, 411, 412, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 430, 432, 433, 436, 440, 441, 442, 443, 446, 456, 457, 459, 460, 463, 465, 467, 468, 471, 475, 476, 477, 479, 480, 481, 484, 485, 494, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 511, 513, 514, 518, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 546, 559, 560, 561, 564, 566, 567, 568, 569, 570, 572, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 600, 601, 602, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638, 646, 649, 656, 666, 667, 668, 671, 679, 680, 683, 695, 696, 698, 708, 710, 712, 722, 723, 728, 730, 733, 734, 735, 736, 740, 742, 743, 744, 745, 747, 748, 749, 761, 762, 771, 772, 774, 779, 781, 782, 783, 784, 788, 797, 803, 810, 811, 812, 815, 819, 824, 826, 827, 828, 829, 830, 832, 834, 844, 848, 849, 854, 864, 865, 867, 868, 871, 873, 875, 876, 879, 886, 889, 890, 899, 900, 908, 917], "c": [1, 25, 26, 29, 32, 49, 59, 61, 86, 88, 99, 106, 116, 126, 127, 128, 130, 131, 132, 133, 134, 136, 140, 141, 142, 143, 145, 146, 147, 148, 151, 153, 154, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 177, 178, 179, 181, 183, 184, 185, 187, 188, 189, 191, 192, 194, 195, 196, 197, 198, 200, 204, 205, 206, 208, 211, 212, 214, 215, 217, 220, 223, 224, 225, 226, 227, 228, 230, 233, 234, 240, 252, 267, 276, 278, 367, 379, 406, 434, 467, 471, 487, 489, 492, 493, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 513, 514, 515, 518, 521, 522, 523, 524, 525, 526, 527, 532, 533, 535, 536, 537, 546, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 574, 575, 580, 583, 589, 593, 596, 597, 598, 599, 602, 605, 606, 613, 616, 617, 620, 623, 624, 625, 626, 627, 628, 630, 633, 634, 638, 710, 772, 789, 875, 879, 903, 917], "5": [1, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 25, 26, 29, 32, 58, 59, 61, 62, 63, 66, 67, 83, 86, 87, 88, 89, 92, 93, 96, 112, 117, 118, 121, 125, 126, 127, 130, 136, 137, 138, 139, 142, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 157, 159, 160, 163, 164, 165, 167, 169, 172, 173, 175, 177, 178, 179, 182, 186, 190, 195, 198, 199, 200, 201, 202, 207, 211, 213, 216, 217, 218, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 247, 264, 269, 271, 272, 275, 280, 286, 287, 297, 298, 299, 300, 301, 302, 311, 312, 313, 317, 318, 320, 337, 339, 340, 341, 344, 351, 352, 355, 361, 364, 367, 370, 373, 375, 376, 377, 379, 384, 406, 407, 409, 411, 412, 416, 417, 418, 419, 420, 422, 426, 428, 430, 436, 442, 447, 455, 456, 459, 460, 474, 477, 479, 481, 485, 494, 497, 498, 500, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 518, 521, 522, 523, 524, 525, 526, 527, 529, 532, 533, 535, 536, 537, 546, 559, 560, 561, 566, 567, 568, 569, 570, 572, 574, 575, 576, 577, 579, 581, 582, 583, 584, 587, 588, 589, 593, 600, 601, 602, 605, 606, 607, 608, 609, 610, 615, 616, 618, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638, 646, 649, 653, 656, 659, 667, 668, 671, 674, 683, 694, 696, 698, 704, 708, 709, 710, 711, 712, 717, 718, 719, 720, 741, 743, 744, 748, 749, 757, 760, 771, 772, 796, 803, 810, 811, 812, 814, 815, 819, 821, 822, 823, 825, 826, 829, 832, 834, 844, 850, 855, 863, 864, 868, 901, 904, 908, 917], "6": [1, 25, 26, 28, 29, 30, 31, 32, 59, 61, 66, 83, 86, 87, 88, 89, 90, 125, 128, 131, 132, 133, 134, 136, 137, 140, 141, 143, 144, 145, 146, 148, 149, 151, 153, 154, 155, 157, 159, 160, 162, 165, 166, 167, 168, 169, 171, 174, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 217, 218, 225, 233, 234, 240, 252, 272, 291, 297, 309, 310, 313, 317, 334, 336, 339, 348, 356, 357, 362, 364, 366, 384, 410, 412, 413, 416, 419, 420, 421, 422, 423, 425, 426, 427, 430, 442, 447, 451, 456, 459, 460, 479, 481, 492, 494, 505, 506, 507, 511, 514, 521, 535, 546, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 575, 576, 577, 579, 580, 582, 584, 585, 589, 593, 596, 598, 599, 600, 601, 602, 605, 606, 609, 610, 612, 613, 615, 616, 618, 619, 625, 633, 634, 638, 646, 668, 696, 702, 706, 707, 710, 712, 738, 749, 803, 815, 819, 824, 826, 827, 828, 830, 834, 855, 859, 864, 868, 887, 917], "7": [1, 25, 26, 28, 29, 30, 31, 32, 59, 61, 66, 68, 128, 129, 130, 131, 132, 134, 136, 140, 141, 143, 148, 149, 151, 153, 155, 162, 166, 167, 168, 171, 174, 179, 181, 183, 185, 187, 188, 189, 191, 192, 194, 196, 197, 198, 199, 204, 205, 206, 211, 212, 213, 214, 215, 240, 310, 317, 319, 335, 337, 338, 343, 345, 347, 353, 364, 366, 416, 420, 426, 442, 479, 481, 494, 505, 506, 514, 521, 535, 546, 562, 563, 565, 567, 571, 575, 576, 577, 579, 580, 584, 594, 596, 598, 599, 609, 610, 613, 619, 638, 653, 717, 719, 724, 742, 747, 749, 819, 829, 917], "float32": [1, 26, 61, 142, 240, 638, 775, 796, 917], "lazi": [1, 61, 66, 68, 93, 106, 117, 121, 163, 176, 240, 252, 289, 495, 516, 546, 555, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 638], "i16": [1, 61, 434, 546], "i32": [1, 61, 86, 117, 189, 240, 297, 324, 347, 434, 460, 538, 546, 599, 638, 724, 751, 796, 868, 917], "f32": [1, 61, 240, 271, 412, 434, 511, 546, 638, 667, 796, 815, 917], "i64": [1, 13, 17, 59, 60, 61, 62, 66, 83, 85, 86, 87, 88, 89, 93, 106, 118, 121, 125, 126, 127, 128, 131, 133, 134, 136, 137, 139, 140, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 158, 159, 162, 163, 165, 166, 169, 171, 175, 176, 177, 178, 181, 182, 183, 184, 187, 189, 191, 192, 194, 195, 197, 198, 199, 201, 206, 208, 209, 210, 211, 212, 213, 215, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 230, 233, 234, 240, 248, 251, 252, 270, 271, 272, 273, 274, 275, 277, 279, 281, 282, 283, 284, 285, 286, 287, 290, 291, 298, 300, 301, 302, 307, 308, 309, 310, 312, 313, 320, 321, 323, 326, 328, 330, 333, 340, 342, 352, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 370, 373, 375, 376, 377, 379, 381, 384, 387, 388, 389, 401, 406, 407, 409, 410, 413, 414, 416, 417, 429, 431, 432, 434, 435, 436, 440, 441, 442, 461, 462, 475, 476, 477, 478, 479, 480, 481, 485, 486, 488, 491, 492, 494, 498, 499, 501, 505, 506, 507, 511, 512, 513, 514, 518, 521, 522, 525, 529, 531, 535, 536, 538, 546, 559, 561, 563, 564, 567, 568, 570, 571, 572, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 589, 591, 592, 593, 596, 597, 599, 600, 601, 605, 606, 608, 609, 610, 611, 612, 613, 616, 618, 620, 621, 622, 624, 625, 626, 627, 630, 633, 634, 638, 646, 647, 666, 667, 668, 671, 679, 680, 681, 683, 694, 698, 701, 704, 705, 706, 707, 710, 720, 721, 723, 729, 731, 734, 737, 741, 744, 746, 760, 762, 763, 769, 771, 779, 793, 802, 818, 819, 822, 825, 829, 832, 835, 836, 839, 843, 844, 848, 849, 886, 888, 889, 890, 896, 902, 905, 908, 917], "register_series_namespac": [1, 59, 60, 61], "math": [1, 62, 702, 845, 891, 917], "mathshortcut": [1, 62], "": [1, 26, 28, 62, 67, 90, 95, 96, 118, 131, 133, 135, 136, 147, 148, 154, 162, 163, 175, 177, 182, 183, 189, 195, 199, 203, 209, 210, 211, 240, 275, 276, 283, 284, 287, 321, 341, 352, 380, 397, 401, 403, 404, 406, 407, 414, 418, 442, 456, 457, 459, 463, 465, 466, 468, 471, 474, 475, 476, 496, 499, 502, 507, 510, 512, 515, 516, 522, 525, 527, 534, 535, 546, 563, 564, 567, 574, 575, 581, 599, 606, 610, 611, 612, 622, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 668, 671, 672, 674, 679, 680, 681, 683, 692, 695, 696, 697, 698, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 717, 721, 741, 742, 747, 754, 756, 757, 760, 761, 762, 763, 765, 768, 769, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 810, 811, 812, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 843, 844, 845, 846, 848, 849, 851, 854, 855, 857, 858, 859, 861, 862, 864, 865, 866, 867, 868, 869, 871, 872, 873, 876, 877, 878, 879, 882, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 900, 902, 903, 904, 905, 906, 907, 917], "_": [1, 58, 62, 90, 177, 203, 240, 467, 875, 895, 917], "squar": [1, 62, 222, 380, 443, 546, 622, 791, 850, 917], "cube": [1, 62], "s2": [1, 114, 142, 240, 646, 696, 712, 779, 803, 834, 899, 908, 917], "renam": [1, 86, 95, 96, 189, 217, 220, 240, 248, 389, 399, 476, 531, 534, 546, 599, 616, 620, 638, 797, 885, 896, 917], "n2": 1, "in_plac": [1, 153, 193, 215, 240, 816, 818, 842, 849, 917], "true": [1, 9, 12, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 28, 30, 32, 63, 65, 66, 68, 83, 84, 88, 92, 95, 96, 98, 99, 100, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 122, 124, 126, 127, 130, 139, 142, 143, 145, 146, 147, 148, 154, 156, 157, 158, 160, 163, 164, 167, 172, 173, 175, 177, 178, 185, 186, 187, 189, 195, 201, 205, 208, 209, 210, 211, 213, 217, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 240, 247, 249, 250, 251, 252, 262, 268, 285, 288, 293, 297, 306, 307, 308, 309, 310, 338, 339, 343, 348, 349, 350, 351, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 414, 424, 429, 434, 439, 441, 442, 446, 448, 450, 454, 455, 460, 466, 467, 469, 471, 475, 476, 480, 485, 486, 489, 493, 494, 495, 496, 502, 503, 514, 530, 532, 534, 538, 546, 559, 560, 561, 566, 568, 570, 574, 575, 580, 581, 583, 585, 589, 593, 599, 602, 603, 604, 606, 611, 612, 616, 621, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 638, 644, 645, 646, 647, 657, 681, 684, 688, 692, 696, 697, 742, 743, 747, 753, 755, 756, 757, 763, 767, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 791, 803, 811, 812, 817, 827, 834, 847, 849, 854, 856, 858, 862, 863, 868, 874, 875, 877, 879, 898, 899, 901, 907, 908, 917], "s3": [1, 98, 107, 111, 917], "n3": 1, "8": [1, 25, 26, 29, 30, 31, 32, 42, 55, 57, 58, 59, 61, 62, 66, 67, 90, 112, 116, 117, 125, 128, 129, 130, 131, 132, 133, 134, 136, 140, 141, 143, 146, 151, 153, 162, 166, 167, 168, 171, 179, 181, 183, 185, 187, 188, 189, 191, 192, 194, 196, 197, 198, 199, 204, 205, 206, 211, 212, 214, 215, 217, 240, 251, 263, 270, 271, 305, 307, 310, 311, 314, 315, 317, 366, 382, 408, 409, 416, 417, 420, 421, 423, 425, 427, 434, 440, 442, 457, 463, 471, 477, 481, 497, 502, 503, 504, 506, 507, 511, 513, 518, 521, 522, 523, 524, 525, 526, 527, 532, 533, 535, 536, 537, 546, 562, 563, 564, 565, 567, 571, 577, 580, 584, 585, 593, 596, 598, 599, 609, 610, 613, 616, 619, 638, 666, 667, 708, 724, 810, 819, 821, 824, 826, 827, 828, 830, 865, 871, 879, 917], "9": [1, 25, 26, 29, 32, 58, 66, 125, 129, 142, 149, 151, 155, 189, 198, 211, 212, 215, 217, 233, 240, 251, 263, 270, 282, 285, 305, 307, 310, 314, 315, 317, 319, 335, 344, 345, 366, 371, 379, 382, 416, 418, 420, 426, 436, 440, 481, 494, 500, 505, 506, 546, 576, 577, 579, 584, 599, 609, 613, 616, 633, 638, 666, 681, 719, 728, 730, 736, 742, 743, 747, 748, 779, 819, 821, 829, 831, 844, 917], "27": [1, 62, 233, 310, 324, 336, 347, 408, 546, 633], "16": [1, 28, 39, 52, 60, 67, 90, 112, 148, 149, 217, 240, 264, 307, 310, 354, 366, 420, 460, 494, 505, 510, 511, 514, 527, 532, 546, 575, 576, 602, 616, 638, 659, 742, 747, 759, 810, 845, 868, 891, 917], "64": [1, 32, 38, 41, 54, 60, 62, 240, 408, 546, 604, 638, 810, 917], "25": [1, 28, 62, 68, 148, 149, 163, 213, 217, 240, 312, 324, 338, 343, 347, 516, 546, 575, 576, 581, 587, 614, 616, 638, 711, 742, 747, 753, 810, 917], "125": [1, 28, 62, 240, 810, 917], "arg": [2, 3, 4, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 176, 205, 240, 496, 515, 546, 592, 638, 647, 898, 899, 917], "ani": [2, 3, 4, 7, 26, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 64, 83, 84, 85, 86, 87, 88, 89, 95, 96, 98, 99, 100, 104, 106, 107, 108, 110, 115, 117, 118, 122, 125, 129, 133, 137, 139, 140, 142, 159, 160, 161, 175, 176, 185, 186, 201, 202, 204, 205, 211, 240, 252, 267, 271, 297, 339, 357, 371, 388, 390, 399, 416, 418, 430, 433, 460, 471, 480, 494, 502, 513, 520, 532, 546, 564, 570, 592, 638, 646, 647, 663, 667, 712, 743, 762, 779, 790, 797, 819, 821, 833, 836, 868, 879, 889, 897, 898, 899, 917], "kwarg": [2, 3, 4, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 129, 176, 205, 240, 546, 592, 638, 898, 899, 917], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 546, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 917, 923], "method": [2, 3, 4, 7, 25, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 84, 95, 96, 99, 115, 133, 147, 155, 160, 173, 179, 185, 186, 209, 217, 232, 240, 249, 355, 366, 411, 412, 419, 420, 421, 422, 423, 425, 426, 427, 487, 502, 527, 528, 532, 539, 540, 542, 546, 547, 550, 551, 552, 555, 564, 579, 594, 611, 616, 632, 638, 647, 760, 771, 814, 815, 826, 900, 909, 911, 913, 917, 920, 921, 922], "A": [4, 26, 28, 46, 65, 68, 95, 96, 97, 104, 106, 107, 142, 148, 163, 177, 186, 201, 211, 212, 213, 217, 240, 246, 289, 317, 320, 323, 326, 328, 330, 333, 340, 355, 369, 372, 373, 375, 388, 389, 397, 409, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 446, 447, 452, 453, 455, 474, 477, 500, 511, 515, 546, 575, 581, 596, 613, 616, 638, 685, 717, 720, 723, 729, 731, 734, 737, 744, 760, 821, 822, 823, 825, 828, 829, 830, 854, 855, 860, 861, 863, 869, 870, 879, 882, 917], "encod": [4, 57, 95, 96, 106, 293, 448, 688, 856], "set": [4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 21, 22, 24, 26, 28, 30, 31, 59, 63, 68, 84, 86, 89, 90, 95, 96, 99, 100, 104, 106, 108, 109, 110, 113, 114, 116, 117, 118, 122, 124, 128, 133, 147, 150, 160, 163, 169, 187, 189, 194, 203, 208, 209, 211, 217, 240, 252, 284, 288, 289, 346, 363, 371, 390, 418, 419, 420, 421, 422, 423, 425, 426, 427, 429, 435, 439, 440, 458, 464, 465, 470, 495, 530, 534, 546, 562, 564, 566, 574, 580, 581, 585, 589, 599, 603, 604, 605, 611, 616, 619, 622, 638, 646, 647, 680, 684, 685, 750, 768, 779, 797, 821, 822, 823, 824, 825, 826, 828, 829, 830, 832, 836, 843, 847, 848, 866, 872, 873, 878, 898, 917], "string": [4, 6, 8, 11, 12, 16, 26, 28, 30, 31, 35, 49, 57, 68, 95, 96, 106, 115, 116, 118, 120, 142, 146, 147, 148, 149, 163, 189, 195, 211, 213, 217, 220, 240, 276, 295, 298, 334, 338, 343, 354, 360, 367, 390, 406, 419, 420, 421, 422, 423, 425, 426, 427, 442, 445, 446, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 496, 498, 501, 515, 522, 525, 534, 546, 566, 573, 574, 575, 576, 581, 599, 606, 616, 619, 620, 638, 672, 690, 694, 738, 742, 747, 759, 772, 852, 853, 854, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 917], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 573, 595, 638], "activ": [5, 9, 14, 15, 17, 18, 19, 20, 23, 271, 667], "decim": [5, 26, 28, 240, 428, 546, 831, 917], "temporari": 5, "remov": [5, 7, 131, 212, 240, 252, 264, 352, 354, 458, 464, 470, 512, 527, 532, 546, 563, 613, 638, 659, 759, 866, 872, 878, 917], "later": 5, "onc": [5, 95, 96, 99, 124, 187, 220, 240, 429, 546, 558, 620, 638, 832, 917], "stabil": 5, "happen": 5, "being": [5, 67, 95, 96, 106, 111, 211, 212, 240, 252, 311, 338, 419, 420, 421, 422, 423, 425, 426, 427, 511, 538, 546, 613, 638, 708, 709, 742, 917], "consid": [5, 67, 95, 96, 106, 111, 133, 143, 169, 209, 211, 212, 240, 300, 301, 302, 311, 338, 419, 420, 421, 422, 423, 425, 426, 427, 505, 514, 546, 564, 577, 584, 589, 611, 613, 638, 698, 699, 700, 708, 709, 742, 834, 835, 836, 917], "break": [5, 67, 111, 211, 212, 240, 252, 311, 338, 419, 420, 421, 422, 423, 425, 426, 427, 546, 613, 638, 708, 709, 742, 917], "chang": [5, 24, 58, 67, 95, 96, 111, 211, 212, 213, 240, 252, 311, 312, 338, 407, 419, 420, 421, 422, 423, 425, 426, 427, 546, 613, 638, 708, 709, 741, 742, 810, 842, 917], "current": [5, 8, 24, 84, 97, 124, 126, 127, 240, 289, 338, 407, 546, 555, 559, 560, 638, 697, 701, 742, 810, 917], "alpha": [5, 65, 252, 349, 350, 351, 546, 561, 566, 568, 593, 602, 638, 755, 756, 757, 917], "stage": [5, 252, 546], "cfg": [6, 7, 8, 13, 122, 189, 217, 240, 599, 616, 638], "previous": 6, "save": [6, 555], "share": [6, 49, 135, 240, 754, 917], "option": [6, 7, 8, 28, 58, 68, 90, 95, 98, 99, 100, 104, 107, 108, 110, 112, 115, 116, 117, 118, 163, 169, 173, 201, 208, 240, 380, 418, 419, 420, 421, 422, 423, 425, 426, 427, 439, 465, 492, 520, 534, 546, 555, 580, 581, 589, 638, 787, 791, 821, 822, 823, 824, 825, 826, 828, 829, 830, 836, 847, 873, 896, 917], "paramet": [6, 10, 11, 12, 13, 16, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 43, 46, 48, 50, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 121, 124, 125, 126, 129, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 153, 154, 160, 161, 162, 163, 165, 167, 169, 170, 172, 173, 175, 176, 177, 179, 181, 182, 183, 185, 186, 187, 189, 191, 192, 194, 195, 196, 197, 198, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 222, 225, 232, 234, 240, 248, 251, 252, 261, 264, 267, 268, 269, 270, 271, 274, 275, 276, 283, 284, 285, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 321, 334, 337, 338, 342, 343, 346, 348, 349, 350, 351, 352, 355, 357, 358, 362, 363, 364, 366, 367, 371, 380, 383, 385, 388, 389, 390, 406, 407, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 479, 480, 485, 486, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 514, 515, 516, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 534, 535, 536, 546, 559, 561, 563, 564, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 580, 581, 584, 585, 589, 590, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 609, 611, 612, 613, 616, 617, 618, 619, 620, 622, 625, 632, 634, 638, 643, 646, 647, 656, 659, 663, 664, 665, 666, 667, 670, 671, 672, 679, 680, 681, 683, 684, 685, 687, 688, 689, 690, 691, 692, 694, 697, 698, 699, 700, 704, 705, 706, 707, 708, 709, 711, 712, 716, 717, 718, 721, 738, 741, 742, 746, 747, 750, 753, 754, 755, 756, 757, 760, 761, 762, 763, 768, 769, 771, 772, 786, 787, 791, 793, 797, 810, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 843, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 882, 883, 885, 888, 889, 895, 896, 897, 898, 899, 901, 902, 905, 906, 907, 908, 917], "json": [6, 8, 30, 31, 102, 103, 109, 240, 454, 455, 555, 573, 595, 619, 638, 862, 863], "produc": [6, 117, 118, 269, 396, 521, 585, 638, 665], "reset": [7, 122], "default": [7, 24, 25, 26, 28, 29, 30, 31, 32, 63, 83, 85, 86, 87, 88, 89, 90, 93, 95, 96, 104, 106, 115, 116, 117, 118, 121, 133, 135, 147, 149, 150, 160, 163, 169, 175, 177, 185, 186, 187, 203, 209, 211, 218, 240, 284, 288, 289, 298, 348, 349, 350, 351, 363, 385, 390, 403, 404, 407, 412, 429, 435, 452, 458, 460, 464, 465, 470, 471, 495, 502, 516, 520, 530, 532, 534, 546, 564, 566, 574, 576, 581, 589, 604, 611, 619, 638, 680, 684, 685, 694, 753, 754, 755, 756, 757, 768, 797, 806, 807, 810, 815, 832, 843, 851, 860, 866, 868, 872, 873, 878, 906, 917], "state": [7, 65, 76, 505, 555, 561, 566, 568, 593, 602, 638], "note": [7, 16, 28, 58, 68, 83, 84, 85, 87, 89, 93, 95, 97, 98, 104, 107, 116, 117, 118, 121, 122, 124, 125, 129, 138, 148, 149, 160, 162, 163, 173, 176, 185, 186, 202, 204, 208, 212, 213, 217, 240, 252, 271, 288, 309, 310, 314, 315, 334, 338, 343, 367, 373, 375, 419, 420, 421, 422, 423, 425, 426, 427, 439, 456, 458, 459, 464, 470, 471, 478, 505, 514, 529, 546, 561, 568, 569, 575, 576, 577, 581, 584, 596, 602, 613, 616, 638, 667, 684, 706, 707, 738, 747, 835, 836, 842, 847, 864, 866, 867, 872, 878, 887, 917], "oper": [7, 28, 49, 66, 73, 74, 83, 85, 86, 87, 88, 89, 95, 104, 125, 137, 142, 147, 154, 164, 170, 173, 175, 176, 180, 200, 204, 205, 208, 211, 219, 220, 240, 247, 289, 306, 307, 308, 309, 310, 311, 379, 399, 414, 492, 493, 501, 511, 546, 568, 574, 577, 580, 584, 589, 590, 620, 638, 646, 704, 705, 706, 707, 708, 817, 894, 897, 898, 899, 907, 917], "from": [7, 26, 28, 58, 68, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 130, 131, 135, 137, 146, 148, 149, 160, 161, 163, 164, 169, 181, 185, 187, 189, 208, 209, 211, 213, 240, 306, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 352, 366, 380, 403, 404, 407, 429, 452, 454, 460, 471, 487, 489, 498, 508, 509, 510, 520, 532, 545, 546, 563, 568, 573, 575, 576, 581, 589, 595, 596, 599, 611, 617, 638, 646, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 754, 787, 791, 806, 807, 808, 810, 832, 860, 862, 868, 905, 908, 917], "environ": [7, 24], "local": [7, 98, 107, 811, 812, 917], "non": [7, 28, 58, 88, 161, 169, 189, 212, 217, 240, 407, 418, 419, 420, 421, 422, 423, 425, 426, 427, 447, 453, 498, 501, 534, 546, 589, 599, 613, 616, 638, 685, 810, 821, 822, 823, 824, 825, 826, 828, 829, 830, 855, 861, 898, 917], "env": 7, "back": [7, 58, 137, 205, 240, 406, 546, 646, 899, 917], "valu": [7, 10, 11, 24, 26, 28, 30, 43, 44, 56, 58, 66, 67, 86, 88, 95, 96, 97, 106, 111, 113, 114, 115, 116, 117, 118, 120, 122, 124, 125, 133, 137, 138, 139, 143, 146, 148, 149, 150, 151, 155, 160, 166, 167, 168, 169, 171, 173, 175, 177, 178, 179, 181, 185, 186, 187, 191, 192, 195, 196, 197, 198, 201, 202, 205, 211, 212, 213, 214, 223, 224, 226, 227, 228, 230, 231, 240, 246, 247, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 269, 270, 273, 274, 275, 277, 279, 280, 281, 283, 286, 287, 289, 290, 291, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 307, 310, 311, 312, 314, 315, 317, 319, 331, 335, 344, 349, 350, 351, 353, 355, 356, 357, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 372, 373, 375, 376, 377, 378, 381, 382, 386, 387, 388, 390, 391, 392, 393, 400, 401, 402, 403, 404, 405, 407, 411, 412, 415, 418, 419, 420, 421, 422, 423, 425, 426, 427, 429, 430, 431, 432, 433, 436, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 461, 462, 465, 467, 468, 469, 474, 478, 480, 481, 482, 483, 485, 486, 487, 488, 489, 493, 498, 501, 503, 505, 506, 507, 513, 514, 520, 522, 523, 524, 525, 526, 529, 530, 535, 538, 546, 564, 569, 570, 575, 576, 578, 579, 586, 587, 588, 589, 591, 594, 596, 600, 601, 606, 607, 608, 613, 614, 619, 623, 624, 626, 627, 628, 630, 631, 638, 642, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 661, 662, 665, 666, 669, 670, 671, 673, 675, 676, 677, 679, 683, 686, 688, 689, 690, 691, 694, 695, 698, 699, 700, 702, 703, 708, 709, 710, 711, 713, 714, 717, 719, 735, 739, 748, 754, 755, 756, 757, 760, 761, 762, 765, 767, 768, 771, 772, 774, 776, 777, 779, 780, 781, 782, 783, 784, 788, 797, 798, 799, 801, 802, 804, 806, 807, 808, 809, 810, 813, 814, 815, 821, 822, 823, 824, 825, 826, 828, 829, 830, 832, 833, 834, 835, 836, 839, 840, 844, 845, 846, 847, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 867, 869, 870, 873, 875, 876, 877, 882, 887, 889, 890, 891, 892, 899, 900, 903, 905, 907, 908, 917], "exampl": [7, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 49, 58, 59, 60, 61, 62, 63, 66, 67, 68, 83, 85, 86, 87, 88, 89, 90, 92, 93, 96, 97, 98, 99, 106, 107, 111, 112, 113, 114, 115, 116, 117, 118, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 546, 555, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 671, 672, 674, 679, 680, 681, 683, 685, 692, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 760, 761, 762, 763, 765, 768, 769, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 810, 811, 812, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 843, 844, 845, 846, 848, 849, 851, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 917], "bool": [9, 12, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 30, 32, 58, 63, 65, 66, 83, 84, 88, 95, 96, 100, 104, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 120, 124, 126, 127, 139, 140, 142, 143, 145, 146, 147, 148, 153, 154, 156, 157, 158, 163, 175, 177, 187, 193, 195, 201, 205, 208, 209, 210, 213, 215, 217, 224, 226, 227, 230, 240, 249, 250, 251, 252, 261, 264, 268, 269, 271, 285, 288, 293, 297, 306, 307, 308, 309, 310, 311, 339, 348, 349, 350, 351, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 388, 394, 395, 412, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 431, 433, 434, 439, 441, 442, 446, 448, 450, 460, 461, 462, 466, 467, 469, 471, 476, 485, 486, 489, 493, 494, 495, 496, 502, 505, 520, 530, 532, 534, 538, 546, 559, 561, 566, 568, 570, 571, 574, 575, 580, 581, 585, 589, 593, 602, 603, 604, 606, 611, 612, 616, 624, 626, 627, 630, 638, 644, 645, 646, 647, 656, 659, 664, 665, 667, 681, 684, 688, 692, 697, 704, 705, 706, 707, 708, 743, 753, 755, 756, 757, 763, 767, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 811, 812, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 836, 837, 842, 847, 849, 854, 856, 858, 868, 869, 870, 874, 875, 877, 879, 897, 898, 899, 901, 902, 905, 907, 917], "ascii": [9, 16, 457, 459, 463, 474, 865, 867, 871, 882], "charact": [9, 11, 16, 22, 26, 95, 96, 106, 240, 334, 451, 456, 457, 458, 463, 464, 466, 467, 470, 474, 593, 638, 738, 859, 864, 865, 866, 871, 872, 874, 875, 878, 882], "print": [9, 11, 13, 15, 21, 96, 112, 134, 146, 147, 161, 164, 219, 240, 365, 546, 578, 638, 779, 821, 917], "tabl": [9, 12, 13, 15, 16, 17, 18, 19, 21, 22, 27, 28, 48, 83, 95, 96, 98, 106, 107, 177, 200, 205, 211, 212, 240, 613, 638, 899, 917], "outlin": 9, "fals": [9, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 28, 30, 32, 58, 63, 65, 68, 84, 88, 95, 96, 99, 100, 104, 106, 109, 110, 113, 114, 115, 116, 117, 118, 124, 126, 127, 130, 142, 143, 145, 146, 147, 148, 153, 154, 156, 157, 158, 160, 163, 164, 167, 172, 173, 175, 177, 178, 185, 186, 187, 193, 195, 201, 205, 208, 213, 215, 217, 223, 224, 226, 227, 228, 230, 233, 240, 249, 250, 252, 261, 264, 268, 271, 285, 288, 306, 307, 308, 309, 310, 311, 339, 348, 349, 350, 351, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 388, 412, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 431, 434, 439, 441, 442, 446, 450, 454, 460, 461, 462, 466, 467, 469, 471, 485, 486, 489, 493, 495, 496, 502, 505, 520, 530, 532, 534, 538, 546, 559, 560, 561, 566, 568, 574, 575, 580, 581, 583, 585, 593, 602, 603, 604, 606, 616, 623, 624, 626, 627, 628, 630, 633, 638, 646, 656, 659, 667, 681, 684, 692, 696, 697, 704, 705, 706, 707, 708, 743, 753, 755, 756, 757, 763, 772, 773, 774, 776, 779, 780, 781, 782, 783, 784, 786, 787, 788, 791, 803, 811, 812, 815, 816, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 837, 842, 847, 849, 854, 858, 862, 868, 869, 870, 874, 875, 877, 879, 897, 898, 899, 901, 902, 905, 907, 908, 917], "revert": 9, "abc": [9, 14, 15, 17, 18, 19, 20, 21, 461, 869], "xyz": [9, 14, 15, 17, 18, 19, 20, 21, 447, 453, 855, 861, 896, 917], "f64": [9, 12, 14, 15, 17, 18, 19, 20, 21, 58, 60, 62, 67, 86, 111, 117, 126, 127, 129, 130, 131, 133, 134, 138, 139, 142, 145, 146, 147, 154, 162, 163, 167, 168, 178, 179, 194, 195, 196, 214, 217, 220, 224, 226, 227, 228, 229, 230, 232, 233, 240, 246, 253, 254, 255, 256, 257, 258, 280, 297, 299, 303, 304, 311, 314, 315, 339, 348, 349, 350, 351, 352, 353, 361, 366, 373, 375, 376, 377, 379, 380, 385, 386, 391, 392, 393, 400, 403, 404, 407, 408, 411, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 437, 438, 439, 443, 444, 482, 483, 490, 497, 498, 500, 502, 504, 512, 523, 524, 527, 532, 533, 537, 546, 559, 563, 564, 569, 570, 574, 580, 581, 587, 588, 594, 606, 607, 614, 616, 617, 620, 624, 626, 627, 628, 629, 630, 632, 633, 638, 648, 649, 650, 651, 652, 653, 695, 702, 703, 708, 709, 710, 743, 756, 757, 761, 765, 810, 821, 823, 824, 826, 827, 828, 830, 831, 845, 846, 850, 891, 892, 904, 917], "fmt": [10, 341, 365, 471, 515, 546, 578, 638, 745, 879], "mix": [10, 471, 710, 879, 917], "control": [10, 28, 116, 240, 566, 638], "how": [10, 28, 49, 66, 86, 89, 97, 133, 162, 211, 212, 240, 269, 270, 298, 312, 366, 406, 415, 546, 564, 580, 613, 638, 665, 666, 694, 711, 917], "float": [10, 28, 37, 38, 67, 111, 113, 114, 115, 117, 118, 135, 138, 163, 179, 187, 192, 232, 240, 268, 269, 299, 300, 301, 302, 314, 315, 339, 348, 349, 350, 351, 356, 361, 366, 367, 369, 372, 373, 375, 376, 377, 385, 391, 400, 403, 404, 408, 411, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 433, 497, 507, 522, 523, 524, 525, 528, 530, 533, 535, 537, 546, 569, 581, 594, 601, 602, 632, 638, 664, 665, 692, 695, 698, 699, 700, 709, 712, 743, 753, 754, 755, 756, 757, 761, 765, 772, 778, 791, 794, 798, 799, 800, 801, 806, 807, 813, 814, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 835, 836, 847, 851, 887, 906, 917], "point": [10, 28, 37, 38, 107, 117, 118, 138, 148, 164, 240, 299, 314, 315, 339, 356, 361, 373, 375, 428, 429, 546, 569, 575, 585, 596, 638, 695, 743, 761, 765, 778, 831, 832, 917], "displai": [10, 15, 19, 28, 240], "full": [10, 35, 64, 95, 96, 98, 106, 107, 585, 638], "format": [10, 12, 16, 26, 28, 94, 95, 96, 106, 111, 136, 146, 160, 169, 186, 202, 238, 240, 338, 341, 460, 471, 493, 567, 573, 589, 619, 638, 745, 868, 879, 916], "number": [10, 11, 13, 21, 22, 26, 28, 32, 58, 77, 83, 85, 87, 89, 92, 93, 95, 96, 99, 106, 109, 116, 117, 121, 126, 135, 136, 138, 139, 151, 160, 161, 164, 165, 172, 173, 187, 191, 192, 198, 211, 223, 225, 234, 240, 262, 270, 275, 283, 287, 289, 291, 305, 311, 312, 322, 324, 329, 331, 339, 344, 345, 347, 349, 350, 351, 355, 357, 362, 364, 373, 375, 382, 383, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 432, 433, 435, 456, 459, 467, 468, 479, 485, 502, 503, 518, 532, 536, 546, 559, 567, 568, 569, 570, 577, 584, 593, 600, 601, 604, 609, 623, 625, 634, 638, 666, 671, 679, 683, 685, 697, 708, 711, 722, 724, 733, 735, 743, 748, 749, 751, 754, 755, 756, 757, 760, 762, 769, 778, 793, 803, 804, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 839, 840, 843, 851, 864, 867, 875, 876, 888, 901, 906, 917], "int": [11, 13, 21, 22, 26, 28, 32, 60, 86, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 106, 107, 108, 109, 110, 115, 116, 117, 118, 119, 121, 125, 126, 135, 138, 139, 141, 150, 151, 152, 154, 160, 161, 163, 165, 166, 167, 171, 172, 173, 183, 185, 187, 190, 191, 192, 194, 196, 197, 198, 199, 206, 211, 214, 216, 218, 225, 234, 240, 268, 269, 270, 274, 275, 283, 284, 287, 288, 289, 291, 300, 301, 302, 311, 312, 349, 350, 351, 355, 356, 357, 362, 363, 364, 367, 383, 407, 408, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 440, 444, 452, 457, 460, 463, 465, 467, 468, 474, 479, 480, 481, 485, 490, 495, 502, 503, 507, 508, 509, 510, 516, 518, 522, 524, 525, 526, 527, 530, 532, 533, 534, 535, 536, 537, 546, 559, 568, 569, 570, 577, 581, 584, 593, 600, 601, 604, 605, 607, 609, 610, 614, 615, 618, 625, 634, 638, 654, 655, 664, 665, 666, 670, 671, 679, 680, 683, 684, 685, 692, 696, 697, 698, 699, 700, 708, 711, 754, 755, 756, 757, 760, 761, 762, 768, 769, 772, 792, 793, 798, 799, 801, 803, 804, 806, 807, 808, 809, 810, 813, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 839, 840, 843, 848, 851, 860, 865, 868, 871, 873, 875, 876, 882, 887, 888, 889, 890, 901, 906, 917], "liter": [12, 16, 63, 68, 99, 118, 146, 160, 166, 167, 171, 172, 175, 185, 186, 189, 197, 201, 217, 240, 249, 250, 317, 355, 367, 379, 413, 446, 461, 462, 495, 498, 501, 508, 509, 520, 530, 534, 538, 546, 570, 599, 616, 638, 644, 645, 717, 760, 772, 835, 836, 854, 869, 870, 917], "left": [12, 68, 113, 114, 148, 149, 162, 163, 212, 240, 349, 350, 351, 366, 367, 419, 420, 421, 422, 423, 425, 426, 427, 430, 457, 474, 484, 498, 505, 506, 514, 529, 546, 575, 576, 580, 581, 613, 638, 755, 756, 757, 772, 833, 865, 882, 900, 917], "center": [12, 349, 350, 351, 418, 419, 420, 421, 422, 423, 425, 426, 427, 546, 755, 756, 757, 821, 822, 823, 824, 825, 826, 828, 829, 830, 917], "right": [12, 14, 28, 68, 95, 96, 113, 114, 148, 149, 162, 163, 240, 349, 350, 351, 367, 419, 420, 421, 422, 423, 425, 426, 427, 430, 439, 463, 498, 546, 575, 576, 580, 581, 638, 755, 756, 757, 772, 833, 847, 871, 917], "cell": 12, "align": [12, 58, 474, 882], "keyerror": [12, 16], "recognis": [12, 16, 115], "column_abc": 12, "column_xyz": 12, "If": [13, 26, 28, 30, 31, 32, 49, 63, 64, 67, 68, 83, 84, 85, 86, 87, 88, 89, 90, 95, 96, 98, 99, 100, 104, 106, 107, 108, 109, 110, 124, 125, 133, 137, 146, 148, 149, 160, 163, 169, 173, 186, 187, 194, 202, 203, 204, 208, 209, 211, 212, 240, 252, 284, 289, 300, 301, 302, 317, 358, 380, 388, 390, 414, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 435, 439, 440, 454, 456, 458, 459, 464, 465, 466, 467, 468, 470, 471, 485, 492, 494, 495, 502, 503, 505, 514, 520, 530, 532, 534, 546, 564, 566, 575, 576, 580, 581, 585, 589, 596, 604, 605, 611, 613, 619, 622, 638, 646, 647, 680, 698, 699, 700, 709, 717, 767, 791, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 837, 843, 847, 848, 862, 864, 866, 867, 872, 873, 874, 875, 876, 878, 879, 894, 898, 901, 907, 917], "rang": [13, 28, 67, 68, 97, 135, 148, 161, 240, 319, 331, 335, 336, 338, 343, 344, 366, 495, 500, 508, 509, 546, 575, 638, 709, 719, 735, 739, 740, 742, 747, 748, 754, 810, 917], "100": [13, 28, 86, 89, 95, 96, 106, 109, 240, 474, 495, 638, 822, 823, 825, 917], "98": [13, 154, 240, 441, 480, 485, 546], "99": [13, 138, 139, 154, 157, 240, 247, 355, 357, 441, 480, 485, 546, 569, 570, 638, 753, 760, 917], "10": [13, 25, 26, 28, 29, 32, 58, 66, 67, 68, 97, 106, 112, 117, 118, 127, 137, 145, 148, 149, 151, 153, 154, 155, 172, 176, 178, 182, 183, 189, 198, 217, 220, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 240, 251, 259, 260, 261, 263, 264, 270, 275, 283, 284, 287, 300, 305, 307, 310, 312, 314, 315, 317, 338, 343, 346, 363, 364, 366, 371, 379, 382, 383, 386, 407, 420, 440, 474, 479, 498, 505, 511, 514, 516, 518, 521, 527, 532, 536, 546, 561, 575, 576, 577, 579, 584, 592, 593, 599, 604, 608, 609, 616, 620, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 638, 647, 666, 671, 679, 680, 683, 698, 709, 711, 717, 747, 750, 753, 769, 779, 793, 795, 810, 835, 836, 888, 917], "95": [13, 247, 546], "96": [13, 247, 546], "97": [13, 154, 240, 247, 546], "move": [14, 349, 350, 351, 419, 420, 422, 426, 546, 755, 756, 757, 822, 823, 825, 829, 917], "inlin": 14, "parenthes": 14, "below": [15, 28, 98, 107, 133, 240, 366, 538, 546, 564, 638], "when": [15, 19, 28, 32, 49, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 90, 95, 96, 97, 100, 104, 106, 107, 108, 109, 117, 118, 120, 125, 134, 135, 137, 139, 142, 148, 176, 185, 189, 195, 203, 209, 240, 300, 301, 302, 349, 350, 351, 357, 388, 390, 397, 441, 442, 458, 464, 470, 471, 496, 505, 514, 546, 570, 575, 585, 599, 604, 606, 611, 638, 646, 698, 699, 700, 754, 755, 756, 757, 762, 797, 835, 836, 866, 872, 878, 895, 917], "ascii_ful": 16, "ascii_full_condens": 16, "ascii_no_bord": 16, "ascii_borders_onli": 16, "ascii_borders_only_condens": 16, "ascii_horizontal_onli": 16, "ascii_markdown": 16, "utf8_ful": [16, 58], "utf8_full_condens": 16, "utf8_no_bord": 16, "utf8_borders_onli": 16, "utf8_horizontal_onli": 16, "noth": [16, 447, 452, 453, 455, 855, 860, 861, 863], "none": [16, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 44, 48, 58, 67, 68, 83, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 125, 126, 130, 133, 138, 139, 146, 148, 149, 150, 155, 162, 163, 164, 167, 169, 173, 174, 185, 187, 189, 192, 194, 195, 201, 203, 205, 208, 209, 210, 211, 212, 213, 217, 220, 240, 248, 251, 252, 263, 274, 284, 289, 291, 300, 301, 302, 305, 307, 310, 314, 315, 337, 338, 343, 349, 350, 351, 352, 355, 356, 357, 362, 363, 366, 367, 373, 374, 375, 376, 377, 382, 388, 390, 405, 407, 413, 418, 419, 420, 421, 422, 423, 425, 426, 427, 429, 433, 434, 435, 436, 440, 441, 445, 446, 449, 450, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 467, 468, 469, 470, 471, 474, 475, 476, 484, 492, 494, 495, 498, 501, 503, 509, 510, 512, 513, 520, 521, 530, 531, 533, 534, 537, 546, 559, 560, 564, 569, 570, 575, 576, 579, 580, 581, 583, 585, 589, 599, 601, 602, 603, 604, 605, 606, 611, 612, 613, 616, 617, 619, 620, 622, 638, 647, 654, 655, 670, 680, 685, 697, 698, 709, 710, 712, 725, 726, 727, 732, 741, 742, 747, 752, 753, 755, 756, 757, 760, 761, 762, 764, 767, 768, 770, 771, 772, 783, 784, 787, 791, 797, 798, 799, 800, 801, 805, 814, 821, 822, 823, 824, 825, 826, 828, 829, 830, 832, 838, 840, 843, 844, 847, 848, 851, 853, 854, 857, 858, 862, 863, 864, 865, 866, 867, 868, 871, 872, 873, 875, 876, 877, 878, 879, 893, 896, 899, 900, 906, 907, 917], "rounded_corn": 16, "style": [16, 28, 177, 240], "border": 16, "line": [16, 28, 95, 96, 99, 106, 146, 156, 158, 240], "includ": [16, 24, 26, 28, 64, 98, 107, 117, 135, 148, 208, 211, 240, 339, 367, 466, 467, 505, 546, 575, 638, 743, 754, 772, 874, 875, 907, 917], "row": [16, 21, 26, 28, 30, 32, 58, 59, 61, 75, 77, 82, 86, 87, 89, 95, 96, 99, 100, 104, 106, 108, 109, 110, 113, 116, 117, 125, 126, 133, 137, 140, 142, 146, 148, 150, 151, 156, 158, 160, 161, 163, 164, 165, 169, 173, 187, 194, 198, 199, 202, 209, 211, 212, 218, 222, 225, 234, 240, 252, 262, 272, 354, 364, 383, 407, 416, 440, 451, 479, 496, 505, 506, 514, 518, 522, 525, 529, 536, 546, 559, 561, 564, 568, 571, 572, 575, 577, 581, 582, 584, 585, 589, 604, 605, 609, 610, 611, 613, 618, 622, 625, 634, 638, 646, 668, 759, 769, 793, 810, 819, 848, 859, 888, 917], "divid": [16, 338, 343, 349, 350, 351, 380, 546, 742, 747, 755, 756, 757, 791, 917], "same": [16, 28, 49, 58, 65, 100, 116, 125, 131, 147, 195, 209, 217, 220, 222, 240, 246, 251, 354, 406, 418, 419, 420, 421, 422, 423, 425, 426, 427, 442, 476, 499, 546, 563, 574, 585, 606, 611, 616, 620, 622, 638, 642, 646, 647, 717, 759, 821, 822, 823, 824, 825, 826, 828, 829, 830, 908, 917], "dens": [16, 146, 240, 412, 546, 815, 917], "space": 16, "horizont": [16, 66, 142, 153, 211, 240, 501, 505, 506, 507, 511, 514, 522, 525, 529, 535], "markdown": 16, "compat": [16, 28, 32, 97, 107, 240, 604, 638], "No": 16, "appli": [16, 26, 28, 66, 106, 115, 117, 118, 142, 176, 240, 319, 322, 324, 325, 327, 329, 331, 332, 335, 336, 339, 344, 345, 347, 350, 351, 388, 418, 419, 420, 422, 426, 471, 492, 495, 505, 506, 514, 521, 529, 546, 577, 584, 585, 592, 638, 719, 722, 724, 728, 730, 733, 735, 736, 739, 740, 743, 748, 749, 751, 756, 757, 821, 822, 823, 825, 829, 879, 917], "round": [16, 28, 60, 240, 299, 361, 482, 546, 695, 765, 917], "corner": 16, "op": [16, 118, 240, 415, 546, 638, 917], "The": [16, 27, 28, 32, 43, 50, 58, 64, 83, 85, 86, 87, 89, 92, 95, 97, 104, 106, 107, 125, 132, 134, 146, 147, 148, 149, 150, 155, 160, 163, 170, 175, 185, 186, 189, 210, 213, 217, 220, 222, 240, 288, 289, 291, 292, 293, 294, 319, 331, 334, 335, 338, 343, 344, 352, 355, 362, 363, 388, 406, 412, 415, 418, 419, 420, 421, 422, 423, 425, 426, 427, 436, 439, 445, 448, 449, 454, 456, 457, 458, 463, 464, 470, 474, 499, 512, 516, 531, 534, 539, 540, 542, 546, 547, 550, 551, 552, 575, 576, 577, 579, 581, 584, 585, 590, 593, 599, 604, 612, 616, 620, 622, 638, 684, 687, 688, 689, 697, 719, 735, 738, 739, 742, 747, 748, 760, 768, 771, 815, 821, 822, 823, 824, 825, 826, 828, 829, 830, 844, 847, 853, 856, 857, 862, 864, 865, 866, 871, 872, 878, 882, 909, 911, 913, 917, 920, 921, 922], "one": [16, 27, 28, 58, 75, 83, 85, 86, 87, 88, 89, 118, 139, 140, 146, 147, 148, 149, 160, 169, 177, 185, 186, 207, 221, 240, 247, 357, 379, 418, 441, 480, 492, 522, 525, 535, 546, 570, 571, 574, 575, 576, 589, 617, 621, 638, 646, 762, 787, 821, 883, 917], "more": [16, 28, 30, 32, 58, 82, 83, 84, 85, 86, 87, 88, 89, 98, 104, 107, 117, 118, 125, 129, 160, 164, 169, 173, 185, 186, 187, 209, 222, 240, 252, 300, 301, 302, 379, 380, 388, 429, 439, 486, 522, 525, 535, 546, 589, 604, 611, 622, 638, 647, 698, 699, 700, 787, 791, 832, 847, 902, 917, 924], "semigraph": 16, "box": [16, 125, 240], "draw": [16, 21, 22], "found": [16, 26, 70, 79, 81, 86, 134, 212, 240, 430, 455, 471, 546, 613, 638, 833, 863, 917], "unicod": 16, "block": [16, 596, 618, 638, 835, 836, 917], "http": [16, 28, 84, 97, 124, 129, 240, 452, 860, 924], "en": 16, "wikipedia": 16, "org": [16, 84, 97, 124, 129, 240], "wiki": 16, "drawing_charact": 16, "box_draw": 16, "hide": [17, 18, 19, 20, 28, 240], "etc": [17, 28, 95, 98, 100, 104, 107, 108, 110, 240, 495, 835, 836, 917], "inform": [19, 64, 98, 107, 129, 240, 300, 301, 302, 380, 439, 546, 593, 638, 698, 699, 700, 791, 847, 917], "separ": [20, 26, 90, 175, 177, 203, 208, 210, 240, 252, 272, 276, 451, 501, 505, 506, 546, 612, 638, 668, 672, 859, 886, 895, 917], "between": [20, 66, 115, 116, 117, 118, 179, 232, 240, 276, 297, 313, 367, 407, 411, 423, 445, 502, 504, 527, 528, 532, 546, 594, 632, 638, 672, 692, 712, 772, 810, 814, 826, 853, 917], "set_tbl_column_data_type_inlin": 20, "max": [21, 28, 32, 117, 118, 130, 139, 147, 148, 149, 177, 240, 300, 301, 307, 357, 406, 412, 419, 431, 468, 546, 570, 574, 575, 576, 604, 638, 685, 698, 699, 704, 710, 762, 815, 822, 837, 876, 917], "both": [21, 26, 49, 68, 97, 148, 149, 162, 163, 170, 185, 240, 251, 367, 419, 420, 421, 422, 423, 425, 426, 427, 546, 575, 576, 580, 581, 590, 638, 772, 917], "element": [21, 93, 118, 121, 252, 253, 254, 255, 256, 257, 258, 269, 271, 272, 303, 304, 306, 307, 308, 309, 310, 311, 353, 363, 371, 386, 407, 412, 415, 430, 436, 437, 438, 443, 467, 468, 482, 483, 485, 546, 647, 648, 649, 650, 651, 652, 653, 665, 667, 668, 697, 702, 703, 704, 705, 706, 707, 708, 758, 763, 779, 795, 810, 815, 833, 844, 845, 846, 850, 851, 875, 876, 891, 892, 901, 902, 906, 917], "width": [22, 28, 95, 96, 240, 457, 463, 474, 638, 865, 871, 882], "char": [22, 49, 459, 867], "enabl": [23, 189, 217, 240, 431, 546, 599, 616, 638, 837, 917], "addit": [23, 28, 86, 98, 107, 115, 116, 131, 136, 147, 175, 189, 195, 210, 217, 220, 240, 352, 355, 406, 442, 498, 499, 512, 531, 534, 546, 563, 567, 574, 599, 606, 612, 616, 620, 638, 760, 917], "verbos": 23, "debug": [23, 561, 568, 585, 638], "log": [23, 60, 348, 485, 546, 753, 901, 917], "if_set": 24, "dict": [24, 28, 32, 59, 61, 64, 83, 85, 86, 87, 88, 89, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107, 108, 110, 117, 160, 175, 181, 185, 186, 188, 201, 202, 240, 390, 546, 596, 598, 638, 797, 917], "show": [24, 133, 146, 164, 174, 240, 564, 593, 602, 638], "variabl": [24, 90, 169, 203, 240, 589, 638, 895, 917], "restrict": [24, 468, 876], "dictionari": [24, 28, 83, 85, 86, 87, 89, 95, 96, 101, 105, 106, 160, 175, 185, 186, 201, 202, 240, 390, 546, 638, 710, 797, 917], "those": [24, 28, 95, 240, 412, 546, 815, 917], "_have_": 24, "been": [24, 28, 67, 90, 240, 412, 546, 815, 917], "set_stat": 24, "all_stat": 24, "file": [25, 26, 29, 30, 31, 32, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 137, 240, 568, 595, 603, 604, 619, 638, 646, 917], "binaryio": [25, 29, 94, 95, 99, 100, 101, 104, 105, 240], "bytesio": [25, 26, 28, 29, 32, 94, 95, 96, 99, 100, 104, 240], "path": [25, 26, 28, 29, 30, 31, 32, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 240, 431, 455, 546, 595, 603, 604, 619, 638, 837, 863, 917], "compress": [25, 29, 32, 240, 603, 604, 638], "avrocompress": [25, 240], "uncompress": [25, 29, 32, 100, 108, 240, 604, 638], "write": [25, 26, 27, 28, 29, 30, 32, 96, 100, 240, 300, 301, 302, 546, 583, 602, 604, 619, 638, 698, 699, 700, 917], "apach": [25, 32, 94, 97, 240], "avro": [25, 94, 240, 555], "should": [25, 26, 28, 29, 30, 31, 32, 83, 85, 87, 89, 90, 93, 98, 115, 116, 118, 121, 124, 125, 131, 148, 160, 163, 185, 186, 202, 203, 210, 222, 240, 247, 252, 271, 298, 311, 346, 352, 373, 375, 418, 419, 420, 421, 422, 423, 425, 426, 427, 430, 439, 499, 512, 519, 520, 546, 563, 575, 580, 581, 585, 602, 603, 604, 612, 619, 622, 638, 647, 667, 694, 708, 750, 821, 822, 823, 824, 825, 826, 828, 829, 830, 833, 847, 917], "written": [25, 26, 28, 29, 30, 31, 32, 240, 603, 604, 619, 638], "snappi": [25, 32, 240, 604, 638], "deflat": [25, 240], "import": [25, 26, 28, 29, 32, 35, 58, 68, 83, 87, 88, 106, 107, 111, 113, 114, 115, 116, 117, 118, 130, 146, 148, 161, 163, 205, 211, 213, 240, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 510, 520, 575, 581, 585, 638, 702, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 776, 780, 781, 782, 787, 821, 845, 891, 917], "pathlib": [25, 26, 29, 32, 106, 109, 240, 603, 604, 638], "foo": [25, 26, 29, 30, 31, 32, 90, 125, 128, 129, 131, 132, 133, 134, 137, 140, 141, 142, 143, 144, 145, 150, 151, 152, 153, 154, 155, 157, 162, 165, 166, 167, 168, 171, 174, 177, 179, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 194, 196, 197, 198, 200, 202, 203, 204, 205, 206, 208, 209, 210, 214, 215, 216, 219, 240, 248, 268, 273, 274, 277, 278, 300, 301, 302, 334, 364, 365, 408, 416, 432, 433, 445, 447, 449, 451, 453, 458, 464, 466, 468, 470, 472, 473, 479, 481, 492, 495, 497, 499, 502, 503, 504, 513, 517, 518, 520, 522, 523, 524, 525, 526, 527, 528, 531, 532, 533, 536, 537, 538, 546, 562, 563, 564, 565, 571, 578, 579, 580, 596, 598, 599, 611, 612, 615, 617, 619, 638, 672, 698, 738, 819, 855, 857, 859, 861, 876, 917], "bar": [25, 26, 29, 30, 31, 32, 90, 125, 128, 129, 131, 132, 133, 134, 137, 140, 141, 142, 143, 144, 145, 151, 153, 154, 155, 157, 162, 165, 166, 167, 168, 171, 174, 177, 179, 181, 182, 183, 185, 187, 188, 189, 191, 192, 194, 196, 197, 198, 200, 202, 203, 204, 205, 206, 209, 210, 214, 215, 219, 240, 248, 278, 365, 439, 449, 451, 466, 468, 492, 497, 499, 502, 503, 504, 513, 518, 522, 523, 524, 525, 526, 527, 531, 532, 533, 536, 537, 538, 546, 562, 563, 564, 565, 571, 578, 579, 580, 596, 598, 599, 611, 612, 615, 619, 638, 672, 847, 857, 859, 876, 917], "ham": [25, 26, 29, 32, 90, 128, 129, 131, 132, 133, 134, 140, 141, 143, 150, 151, 153, 162, 166, 167, 168, 171, 174, 179, 181, 183, 185, 187, 188, 189, 191, 192, 194, 196, 197, 198, 203, 204, 205, 206, 209, 214, 215, 240, 499, 562, 563, 564, 565, 571, 580, 596, 598, 599, 611, 617, 638], "d": [25, 26, 29, 32, 49, 66, 86, 111, 130, 146, 150, 151, 154, 162, 165, 198, 200, 211, 215, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 240, 321, 341, 367, 434, 447, 453, 467, 471, 498, 516, 546, 580, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 638, 721, 745, 772, 855, 861, 875, 879, 917], "e": [25, 26, 29, 32, 49, 84, 95, 96, 99, 100, 104, 108, 110, 130, 146, 151, 165, 198, 200, 211, 240, 252, 348, 352, 367, 385, 390, 434, 439, 512, 546, 583, 596, 638, 753, 772, 834, 847, 898, 917], "dirpath": [25, 26, 29, 32, 106, 240], "new_fil": [25, 26, 29, 32, 240], "has_head": [26, 28, 95, 96, 99, 106, 240], "sep": [26, 92, 95, 96, 106, 240], "quot": [26, 95, 96, 106, 240], "batch_siz": [26, 95, 96, 109, 240], "1024": [26, 32, 95, 96, 109, 240, 604, 638], "datetime_format": [26, 240], "date_format": [26, 240, 341], "time_format": [26, 240], "float_precis": [26, 28, 240], "null_valu": [26, 95, 96, 106, 240], "comma": [26, 240], "csv": [26, 95, 96, 99, 106, 240, 555, 603, 604, 638], "result": [26, 30, 31, 58, 87, 89, 97, 98, 106, 108, 110, 111, 118, 137, 148, 159, 173, 192, 205, 220, 240, 349, 350, 351, 355, 380, 406, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 431, 433, 466, 467, 495, 505, 506, 507, 521, 535, 546, 558, 575, 585, 593, 601, 603, 604, 619, 620, 638, 646, 755, 756, 757, 791, 819, 821, 822, 823, 824, 825, 826, 828, 829, 830, 837, 840, 874, 875, 898, 917], "instead": [26, 30, 31, 63, 93, 95, 104, 117, 121, 125, 148, 160, 173, 175, 185, 186, 189, 205, 217, 240, 261, 264, 456, 458, 464, 470, 495, 530, 534, 546, 569, 575, 599, 616, 619, 638, 656, 659, 835, 836, 864, 866, 872, 878, 899, 917], "whether": [26, 68, 87, 89, 118, 240, 394, 395, 431, 546, 585, 638], "header": [26, 28, 32, 95, 96, 99, 106, 134, 177, 208, 240, 604, 638], "field": [26, 50, 79, 81, 86, 210, 240, 289, 390, 454, 467, 468, 476, 505, 506, 521, 534, 546, 612, 638, 685, 875, 876, 885, 886], "symbol": [26, 240], "byte": [26, 95, 96, 99, 100, 101, 104, 105, 106, 135, 240, 292, 295, 296, 456, 459, 604, 638, 687, 690, 691, 754, 864, 867, 917], "process": [26, 240, 603, 604, 638], "per": [26, 28, 116, 117, 146, 173, 174, 195, 229, 231, 232, 240, 252, 271, 274, 288, 442, 496, 546, 606, 629, 631, 632, 638, 667, 670, 684], "thread": [26, 92, 95, 96, 97, 119, 240, 252, 271, 546, 667], "specifi": [26, 28, 58, 68, 70, 79, 81, 117, 131, 135, 136, 139, 147, 175, 185, 189, 195, 210, 217, 220, 240, 349, 350, 351, 352, 357, 390, 406, 415, 442, 457, 463, 496, 498, 499, 512, 531, 534, 546, 563, 567, 570, 574, 599, 606, 612, 616, 620, 638, 754, 755, 756, 757, 762, 865, 871, 917], "defin": [26, 28, 35, 68, 115, 116, 117, 125, 148, 149, 173, 176, 222, 240, 252, 288, 367, 419, 420, 421, 422, 423, 425, 426, 427, 494, 520, 534, 546, 575, 576, 592, 622, 638, 647, 684, 772, 917], "chrono": [26, 240, 341, 471, 745, 879], "rust": [26, 32, 76, 100, 104, 125, 222, 240, 622], "crate": [26, 240], "fraction": [26, 113, 114, 187, 240, 339, 407, 429, 471, 546, 743, 810, 832, 917], "second": [26, 68, 148, 149, 163, 213, 240, 334, 338, 343, 419, 420, 421, 422, 423, 425, 426, 427, 471, 509, 510, 546, 575, 576, 581, 638, 738, 742, 747], "precis": [26, 28, 160, 186, 202, 240, 316, 471, 716], "infer": [26, 83, 85, 86, 87, 88, 89, 95, 96, 99, 106, 109, 115, 125, 240, 416, 454, 471, 546, 638, 819, 862, 917], "maximum": [26, 95, 96, 106, 116, 117, 118, 166, 240, 265, 300, 301, 391, 403, 412, 522, 546, 586, 638, 661, 698, 699, 725, 798, 806, 811, 815, 917], "timeunit": [26, 35, 36, 68, 240, 316, 317, 342, 346, 716, 717, 746, 750], "frame": [26, 27, 28, 58, 86, 113, 117, 125, 126, 160, 161, 170, 173, 176, 185, 186, 205, 211, 240, 559, 590, 592, 638, 697, 917], "datetim": [26, 28, 58, 68, 130, 146, 148, 149, 161, 163, 213, 240, 268, 269, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 367, 419, 420, 421, 422, 423, 425, 426, 427, 471, 484, 510, 516, 520, 525, 546, 575, 576, 581, 638, 664, 665, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 772, 787, 798, 801, 806, 807, 836, 879, 900, 917], "place": [26, 132, 153, 154, 182, 191, 192, 195, 215, 240, 261, 264, 276, 283, 432, 433, 441, 546, 600, 601, 606, 638, 656, 659, 672, 679, 816, 818, 839, 840, 849, 917], "float64": [26, 86, 93, 95, 117, 121, 134, 135, 142, 188, 205, 217, 240, 253, 254, 255, 256, 257, 258, 297, 303, 304, 339, 352, 373, 375, 437, 438, 482, 483, 499, 512, 546, 565, 598, 616, 638, 743, 899, 904, 917], "datatyp": [26, 30, 43, 56, 83, 85, 86, 87, 89, 91, 93, 99, 101, 105, 118, 121, 134, 136, 142, 188, 240, 272, 297, 352, 434, 451, 471, 484, 499, 512, 546, 555, 567, 598, 619, 638, 647, 668, 692, 710, 785, 787, 789, 841, 859, 879, 900, 917], "repres": [26, 44, 56, 68, 83, 85, 87, 88, 89, 240, 373, 375, 499, 512, 520, 546, 836, 851, 906, 917], "null": [26, 58, 66, 86, 95, 96, 106, 111, 124, 126, 130, 133, 139, 142, 143, 155, 162, 167, 168, 174, 179, 191, 192, 195, 196, 197, 201, 205, 210, 212, 214, 217, 240, 248, 251, 252, 261, 264, 270, 273, 274, 277, 283, 288, 289, 291, 293, 300, 301, 302, 305, 307, 310, 312, 314, 315, 320, 323, 326, 328, 330, 333, 340, 349, 350, 351, 352, 355, 356, 357, 358, 362, 366, 373, 374, 375, 376, 377, 382, 390, 405, 407, 413, 418, 419, 420, 421, 422, 423, 425, 426, 427, 432, 433, 434, 436, 441, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 459, 460, 463, 465, 467, 468, 469, 474, 475, 476, 484, 491, 492, 498, 500, 501, 512, 520, 534, 546, 559, 564, 570, 579, 580, 600, 601, 606, 612, 613, 616, 617, 619, 638, 647, 656, 659, 666, 679, 684, 685, 688, 697, 698, 711, 714, 720, 723, 729, 731, 734, 737, 744, 755, 756, 757, 760, 762, 767, 783, 784, 809, 810, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 834, 839, 840, 844, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 871, 873, 875, 876, 877, 898, 899, 900, 907, 917], "empti": [26, 74, 86, 95, 96, 99, 106, 126, 127, 157, 169, 240, 531, 559, 560, 589, 638, 697, 701, 775, 917], "table_nam": [27, 28, 240], "connection_uri": [27, 97, 240], "if_exist": [27, 240], "dbwritemod": [27, 240], "fail": [27, 84, 98, 100, 107, 124, 209, 240, 262, 289, 471, 546, 611, 638, 647, 879, 917], "engin": [27, 97, 125, 222, 240, 585, 589, 622, 638], "dbwriteengin": [27, 240], "sqlalchemi": [27, 240], "databas": [27, 97, 240, 555], "append": [27, 117, 137, 162, 163, 240, 413, 546, 580, 581, 638, 917], "creat": [27, 28, 67, 68, 83, 87, 89, 107, 116, 117, 118, 126, 127, 148, 149, 174, 177, 213, 217, 240, 317, 338, 343, 413, 465, 489, 495, 500, 508, 509, 510, 546, 559, 560, 566, 575, 576, 616, 638, 697, 701, 709, 714, 717, 742, 747, 808, 816, 873, 898, 917], "connect": [27, 95, 97, 100, 104, 108, 110, 111, 240, 556], "uri": [27, 97, 98, 107, 240], "postgresql": [27, 97, 240, 406, 546], "usernam": [27, 95, 97, 100, 104, 108, 110, 240], "password": [27, 95, 97, 100, 104, 108, 110, 240], "server": [27, 97, 240], "port": [27, 95, 97, 100, 104, 108, 110, 240], "replac": [27, 95, 96, 106, 138, 139, 183, 208, 217, 240, 317, 337, 390, 462, 546, 569, 616, 638, 717, 741, 797, 835, 836, 870, 917], "insert": [27, 95, 96, 100, 104, 106, 108, 109, 110, 154, 182, 208, 210, 240, 430, 445, 474, 546, 612, 638, 833, 853, 882, 917], "mode": [27, 240, 530, 546, 638, 917], "new": [27, 28, 93, 121, 122, 125, 133, 153, 154, 173, 174, 181, 182, 199, 210, 211, 217, 240, 248, 317, 354, 366, 389, 461, 462, 467, 468, 475, 476, 481, 546, 555, 564, 596, 610, 612, 616, 622, 638, 643, 647, 714, 717, 759, 808, 818, 869, 870, 875, 876, 883, 885, 890, 896, 908, 917], "overwrit": [27, 83, 85, 86, 87, 89, 95, 96, 106, 124, 240, 568, 638], "alreadi": [27, 240, 271, 311, 546, 667, 708, 917], "adbc": [27, 97, 240], "workbook": [28, 240], "worksheet": [28, 240], "posit": [28, 131, 136, 147, 175, 189, 195, 210, 217, 220, 240, 349, 350, 351, 352, 406, 442, 460, 498, 499, 512, 531, 546, 563, 567, 574, 599, 606, 612, 616, 620, 638, 755, 756, 757, 868, 917], "tupl": [28, 97, 125, 160, 185, 186, 190, 219, 240, 416, 546, 593, 602, 638, 819, 917], "a1": [28, 59, 61, 240], "table_styl": [28, 240], "column_format": [28, 240], "dtype_format": [28, 240], "oneormoredatatyp": [28, 116, 240, 787, 917], "conditional_format": [28, 240], "conditionalformatdict": [28, 240], "column_tot": [28, 240], "columntotalsdefinit": [28, 240], "column_width": [28, 240], "row_height": [28, 240], "sparklin": [28, 240], "sequenc": [28, 50, 58, 65, 83, 85, 86, 87, 89, 90, 92, 95, 96, 116, 117, 118, 131, 133, 136, 137, 162, 163, 169, 173, 176, 177, 195, 203, 208, 209, 210, 211, 212, 213, 240, 371, 388, 442, 476, 492, 493, 494, 496, 500, 505, 506, 507, 514, 516, 521, 522, 525, 529, 535, 546, 563, 564, 567, 580, 581, 592, 606, 611, 612, 613, 638, 646, 712, 779, 836, 885, 917], "autofilt": [28, 240], "autofit": [28, 240], "hidden_column": [28, 240], "hide_gridlin": [28, 240], "sheet_zoom": [28, 240], "excel": [28, 99, 240, 555], "object": [28, 32, 68, 84, 85, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 116, 117, 118, 124, 147, 164, 205, 240, 520, 555, 560, 578, 583, 595, 638, 660, 693, 715, 852, 894, 917], "open": [28, 95, 96, 99, 100, 104, 108, 110, 240], "xlsxwriter": [28, 240], "ha": [28, 58, 67, 90, 107, 124, 213, 240, 252, 311, 379, 397, 485, 494, 546, 622, 697, 708, 767, 778, 901, 917], "close": [28, 68, 148, 149, 240, 367, 419, 420, 421, 422, 423, 425, 426, 427, 439, 546, 575, 576, 638, 772, 847, 917], "xlsx": [28, 99, 240], "work": [28, 96, 99, 149, 182, 240, 252, 271, 299, 300, 301, 302, 352, 361, 406, 459, 486, 546, 576, 638, 667, 695, 698, 699, 700, 765, 867, 902, 917], "directori": [28, 104, 240], "sheet1": [28, 240], "valid": [28, 100, 104, 118, 122, 135, 240, 311, 446, 447, 452, 453, 455, 546, 708, 754, 767, 854, 855, 860, 861, 863, 869, 870, 917], "notat": [28, 240], "eg": [28, 240, 338, 471], "integ": [28, 39, 40, 41, 42, 52, 53, 54, 55, 116, 117, 148, 149, 240, 299, 339, 361, 414, 419, 420, 421, 422, 423, 424, 425, 426, 427, 460, 495, 516, 520, 546, 575, 576, 638, 654, 655, 695, 743, 765, 817, 827, 836, 868, 917], "medium": [28, 240], "kei": [28, 58, 64, 148, 163, 170, 175, 177, 181, 184, 240, 575, 581, 590, 596, 597, 638], "contain": [28, 58, 64, 85, 88, 98, 107, 113, 133, 161, 173, 177, 240, 252, 371, 390, 447, 450, 452, 453, 455, 468, 469, 546, 564, 593, 638, 797, 803, 855, 858, 860, 861, 863, 876, 877, 894, 917], "follow": [28, 64, 95, 96, 98, 106, 107, 125, 148, 149, 163, 176, 213, 240, 252, 334, 338, 343, 412, 419, 420, 421, 422, 423, 425, 426, 427, 476, 494, 539, 540, 542, 546, 547, 550, 551, 552, 575, 576, 581, 592, 638, 738, 742, 747, 815, 835, 836, 909, 911, 913, 917, 920, 921, 922, 924], "first_column": [28, 240], "last_column": [28, 240], "banded_column": [28, 240], "banded_row": [28, 240], "sheet": [28, 99, 240], "formula": [28, 240, 348, 546, 753, 917], "chart": [28, 240, 593, 638], "subsequ": [28, 180, 205, 240, 566, 638], "colnam": [28, 117, 134, 240, 389, 546, 565, 638], "given": [28, 46, 48, 58, 67, 68, 83, 85, 86, 87, 89, 93, 95, 96, 106, 115, 116, 117, 118, 121, 125, 135, 136, 175, 176, 185, 191, 192, 195, 212, 240, 268, 283, 318, 342, 348, 367, 385, 406, 412, 415, 416, 419, 420, 422, 425, 426, 427, 430, 432, 433, 453, 471, 476, 485, 492, 512, 546, 567, 585, 592, 600, 601, 606, 613, 622, 638, 647, 664, 679, 709, 718, 746, 753, 754, 772, 794, 796, 808, 815, 819, 822, 823, 825, 828, 829, 830, 833, 839, 840, 861, 879, 901, 904, 908, 917], "here": [28, 83, 85, 86, 87, 89, 97, 98, 107, 116, 117, 118, 240, 455, 638, 863], "dd": [28, 240], "mm": [28, 240], "yyyi": [28, 240], "00": [28, 68, 148, 163, 213, 240, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 471, 510, 575, 581, 638, 716, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 879], "dtype": [28, 61, 83, 85, 87, 89, 93, 95, 96, 106, 115, 116, 117, 118, 121, 124, 148, 149, 163, 205, 240, 252, 253, 254, 255, 256, 257, 258, 261, 264, 265, 266, 267, 276, 288, 297, 300, 301, 302, 303, 304, 309, 310, 320, 323, 326, 328, 330, 333, 340, 346, 352, 354, 387, 388, 414, 415, 419, 420, 421, 422, 423, 425, 426, 427, 434, 437, 438, 445, 454, 465, 478, 480, 482, 483, 484, 488, 489, 494, 495, 500, 503, 512, 516, 520, 521, 534, 546, 575, 576, 581, 638, 661, 662, 663, 672, 684, 692, 697, 698, 699, 700, 706, 707, 711, 720, 723, 729, 731, 734, 737, 744, 750, 754, 759, 775, 787, 796, 820, 834, 841, 853, 862, 873, 879, 887, 898, 899, 900, 904, 917], "overridden": [28, 83, 85, 87, 89, 240, 638], "basi": [28, 117, 240], "param": [28, 83, 85, 86, 87, 89, 95, 96, 106, 117, 118, 185, 240, 638], "It": [28, 68, 125, 170, 176, 222, 240, 252, 289, 396, 546, 585, 590, 622, 638, 835, 836, 917], "also": [28, 68, 86, 117, 118, 134, 147, 148, 149, 170, 173, 189, 195, 217, 240, 307, 310, 337, 366, 367, 412, 419, 420, 421, 422, 423, 425, 426, 427, 442, 505, 506, 514, 516, 529, 545, 546, 574, 575, 576, 590, 599, 606, 616, 617, 638, 741, 772, 815, 917], "group": [28, 32, 96, 147, 148, 149, 161, 173, 175, 177, 211, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 247, 252, 271, 360, 406, 441, 442, 452, 480, 494, 546, 574, 575, 576, 604, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638, 667, 860], "float_dtyp": [28, 240], "simplifi": [28, 65, 240, 561, 566, 568, 593, 602, 603, 604, 638], "uniform": [28, 240], "condit": [28, 63, 133, 140, 185, 240, 450, 469, 514, 564, 571, 638], "suppli": [28, 83, 85, 86, 87, 89, 185, 240, 638], "typenam": [28, 240], "3_color_scal": [28, 240], "data_bar": [28, 240], "make": [28, 50, 66, 83, 88, 95, 96, 97, 100, 104, 108, 110, 148, 149, 170, 173, 180, 213, 240, 350, 351, 390, 415, 467, 474, 546, 575, 576, 590, 638, 756, 757, 797, 875, 882, 917], "icon": [28, 240], "multipl": [28, 65, 66, 95, 96, 106, 108, 109, 110, 116, 118, 131, 135, 137, 140, 147, 148, 153, 161, 175, 177, 189, 195, 217, 220, 240, 288, 394, 397, 401, 406, 416, 419, 420, 421, 422, 423, 425, 426, 427, 442, 496, 499, 505, 506, 514, 521, 529, 538, 546, 563, 571, 574, 575, 599, 606, 616, 620, 638, 646, 684, 754, 802, 819, 917], "singl": [28, 58, 66, 95, 96, 97, 104, 106, 116, 131, 132, 133, 137, 144, 175, 185, 195, 240, 252, 269, 288, 334, 358, 388, 413, 416, 442, 445, 491, 494, 496, 499, 501, 521, 530, 546, 563, 564, 606, 638, 646, 665, 684, 738, 816, 819, 853, 894, 917], "across": [28, 240, 507, 535], "effect": [28, 124, 142, 240, 252, 546, 618, 638], "heatmap": [28, 240], "min": [28, 32, 117, 118, 130, 139, 148, 149, 177, 240, 300, 302, 308, 357, 406, 412, 422, 531, 546, 570, 575, 576, 604, 638, 698, 700, 705, 710, 762, 815, 825, 917], "determin": [28, 56, 58, 66, 86, 89, 95, 96, 99, 104, 110, 125, 142, 148, 149, 160, 161, 208, 213, 240, 289, 298, 396, 415, 419, 420, 421, 422, 423, 425, 426, 427, 439, 546, 575, 576, 638, 685, 694, 847, 917], "entir": [28, 240], "final": [28, 58, 110, 240, 349, 350, 351, 546, 568, 638, 755, 756, 757, 917], "made": [28, 240, 898, 917], "up": [28, 50, 97, 160, 163, 186, 202, 240, 252, 299, 474, 546, 580, 581, 585, 638, 695, 882, 917], "abov": [28, 240], "order": [28, 58, 86, 113, 147, 148, 149, 175, 176, 177, 187, 195, 209, 213, 240, 261, 264, 285, 298, 412, 429, 430, 431, 441, 442, 476, 486, 487, 496, 546, 574, 575, 576, 589, 603, 604, 606, 611, 638, 656, 659, 681, 694, 786, 815, 820, 832, 833, 837, 849, 885, 902, 903, 917], "than": [28, 68, 82, 87, 89, 95, 96, 111, 117, 118, 125, 146, 147, 160, 163, 175, 185, 186, 187, 211, 222, 240, 379, 429, 439, 457, 463, 468, 474, 502, 522, 525, 532, 535, 546, 574, 581, 603, 604, 622, 638, 832, 847, 865, 871, 876, 882, 917], "add": [28, 48, 96, 125, 137, 148, 217, 218, 240, 409, 477, 510, 514, 538, 546, 575, 580, 616, 617, 618, 638, 646, 917], "total": [28, 135, 240, 754, 917], "export": [28, 160, 161, 186, 202, 240], "numer": [28, 163, 240, 300, 301, 302, 367, 415, 434, 546, 555, 581, 638, 698, 699, 700, 772, 785, 834, 841, 917], "have": [28, 58, 84, 95, 96, 99, 117, 118, 120, 137, 160, 180, 186, 202, 240, 311, 349, 350, 351, 397, 412, 471, 546, 589, 602, 618, 638, 646, 708, 741, 755, 756, 757, 767, 815, 879, 917], "associ": [28, 58, 240], "sum": [28, 58, 135, 142, 147, 149, 159, 177, 220, 240, 252, 289, 309, 310, 348, 358, 419, 420, 422, 425, 426, 427, 491, 492, 505, 507, 514, 522, 525, 529, 546, 561, 566, 568, 574, 576, 593, 602, 620, 638, 706, 707, 753, 754, 822, 823, 825, 828, 829, 830, 917], "pass": [28, 32, 58, 68, 85, 99, 107, 116, 117, 118, 129, 131, 147, 175, 176, 189, 195, 217, 220, 240, 252, 321, 337, 355, 365, 406, 442, 458, 464, 470, 496, 499, 516, 534, 546, 563, 574, 578, 585, 592, 599, 602, 606, 616, 620, 638, 647, 721, 741, 760, 866, 872, 878, 917], "For": [28, 97, 98, 99, 107, 137, 149, 162, 163, 222, 240, 289, 297, 349, 350, 351, 397, 414, 439, 505, 514, 515, 546, 576, 581, 622, 638, 646, 755, 756, 757, 817, 847, 898, 917], "funcnam": [28, 240], "averag": [28, 240, 349, 350, 351, 412, 546, 755, 756, 757, 815, 917], "count_num": [28, 240], "count": [28, 95, 96, 100, 104, 106, 108, 109, 110, 130, 148, 149, 163, 173, 174, 177, 208, 212, 213, 218, 222, 231, 240, 269, 306, 334, 382, 402, 405, 419, 420, 421, 422, 423, 425, 426, 427, 447, 487, 489, 526, 546, 575, 576, 581, 613, 618, 622, 631, 638, 665, 710, 738, 804, 809, 855, 903, 905, 917], "std_dev": [28, 240], "var": [28, 240, 546, 638, 917], "pixel": [28, 240], "unit": [28, 35, 36, 68, 117, 118, 135, 240, 316, 317, 321, 342, 346, 387, 397, 488, 516, 546, 593, 638, 716, 717, 721, 746, 750, 754, 796, 904, 917], "height": [28, 133, 240], "intersect": [28, 240], "bodi": [28, 240], "marker": [28, 240], "compliant": [28, 240], "case": [28, 58, 83, 85, 86, 87, 89, 110, 125, 137, 148, 149, 160, 240, 388, 396, 397, 538, 546, 575, 576, 638, 646, 917], "three": [28, 207, 240, 430, 546], "avail": [28, 92, 98, 107, 116, 239, 240, 412, 539, 540, 542, 545, 546, 547, 550, 551, 552, 555, 556, 568, 637, 638, 815, 909, 911, 913, 917, 920, 921, 922], "insert_befor": [28, 240], "insert_aft": [28, 240], "respect": [28, 240], "direct": [28, 97, 104, 110, 211, 240], "ad": [28, 86, 124, 148, 208, 217, 240, 251, 355, 505, 506, 546, 575, 616, 638, 760, 917], "end": [28, 95, 96, 104, 106, 148, 240, 284, 295, 338, 352, 367, 446, 450, 465, 469, 499, 512, 546, 575, 577, 584, 593, 638, 680, 690, 742, 772, 858, 873, 877, 917], "far": [28, 240], "thei": [28, 86, 113, 122, 164, 240, 418, 546, 821, 917], "pure": [28, 240], "actual": [28, 86, 99, 117, 118, 240, 842, 917], "indic": [28, 63, 90, 94, 95, 96, 100, 104, 106, 115, 116, 118, 148, 149, 203, 240, 262, 288, 369, 372, 373, 375, 376, 377, 419, 420, 421, 422, 423, 425, 426, 427, 430, 436, 480, 496, 546, 575, 576, 638, 684, 776, 780, 781, 782, 783, 784, 833, 844, 889, 895, 917], "provid": [28, 95, 96, 97, 98, 106, 107, 117, 118, 240, 289, 293, 294, 448, 449, 452, 454, 455, 516, 555, 603, 604, 638, 688, 689, 856, 857, 860, 862, 863, 924], "calcul": [28, 58, 148, 240, 270, 312, 349, 350, 351, 380, 387, 424, 439, 488, 494, 546, 575, 638, 666, 711, 755, 756, 757, 791, 827, 847, 851, 906, 917], "individu": [28, 117, 149, 240, 252, 453, 546, 576, 604, 638, 696, 861, 917], "gridlin": [28, 240], "zoom": [28, 240], "level": [28, 32, 106, 108, 109, 110, 117, 125, 142, 173, 240, 358, 546, 577, 584, 604, 638], "definit": [28, 240, 380, 546, 791, 917], "take": [28, 117, 142, 170, 176, 199, 240, 334, 481, 511, 513, 546, 590, 610, 638, 738, 890, 908, 917], "care": [28, 240, 252, 431, 546, 837, 917], "rel": [28, 98, 107, 113, 114, 240, 334, 349, 350, 351, 546, 738, 755, 756, 757, 917], "see": [28, 97, 98, 99, 107, 113, 114, 117, 118, 129, 162, 176, 240, 300, 301, 302, 341, 357, 366, 380, 388, 439, 529, 546, 698, 699, 700, 745, 791, 847, 917, 924], "readthedoc": [28, 240, 924], "io": [28, 240, 924], "working_with_conditional_format": [28, 240], "html": [28, 84, 97, 124, 129, 240], "similarli": [28, 86, 240], "well": [28, 136, 177, 240, 367, 546, 567, 638, 772, 917], "mandatori": [28, 240], "adjac": [28, 240], "each": [28, 58, 96, 109, 113, 114, 116, 125, 146, 147, 161, 163, 175, 205, 210, 219, 220, 222, 223, 225, 234, 240, 252, 275, 287, 338, 343, 412, 453, 467, 468, 494, 501, 534, 546, 581, 593, 612, 620, 622, 623, 625, 634, 638, 671, 683, 696, 742, 747, 815, 861, 875, 876, 886, 917], "two": [28, 85, 87, 89, 97, 142, 169, 170, 177, 207, 221, 222, 240, 247, 313, 317, 441, 480, 492, 502, 504, 527, 532, 546, 589, 590, 621, 622, 638, 712, 717, 917], "help": [28, 240, 568, 638], "where": [28, 63, 97, 133, 137, 160, 169, 186, 240, 262, 345, 348, 430, 439, 502, 532, 538, 546, 589, 638, 646, 657, 749, 753, 833, 847, 851, 906, 908, 917], "appear": [28, 86, 113, 240, 487, 546, 903, 917], "working_with_sparklin": [28, 240], "instanti": [28, 189, 217, 240, 599, 616, 638], "basic": [28, 240], "random": [28, 116, 117, 118, 150, 187, 240, 363, 412, 429, 435, 546, 768, 815, 832, 843, 917], "date": [28, 35, 58, 68, 95, 96, 97, 106, 111, 130, 146, 148, 149, 161, 163, 240, 268, 269, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 367, 419, 420, 421, 422, 423, 425, 426, 427, 471, 484, 516, 525, 546, 555, 575, 576, 581, 638, 664, 665, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 772, 787, 798, 801, 806, 807, 836, 879, 900, 917], "dtm": [28, 240, 317, 717], "2023": [28, 161, 240, 317, 717], "num": [28, 207, 240, 367, 370, 474, 546, 772, 917], "500": [28, 160, 212, 240, 568, 613, 638, 728, 730, 736, 743, 822, 823, 825, 917], "val": [28, 184, 240, 298, 484, 546, 597, 638, 694], "10_000": [28, 240], "20_000": [28, 240], "30_000": [28, 240], "locat": [28, 137, 183, 206, 210, 240, 430, 546, 612, 638, 646, 833, 836, 889, 917], "u": [28, 35, 36, 68, 160, 186, 202, 240, 316, 317, 321, 342, 346, 471, 516, 530, 716, 717, 721, 746, 750], "increas": [28, 95, 104, 240, 311, 546, 708, 917], "b4": [28, 240], "light": [28, 240], "twice": [28, 99, 240], "differ": [28, 95, 111, 113, 137, 148, 149, 160, 186, 202, 208, 240, 270, 312, 319, 334, 335, 337, 344, 390, 403, 404, 471, 487, 513, 516, 522, 525, 546, 566, 575, 576, 638, 646, 666, 711, 719, 738, 739, 741, 748, 806, 807, 834, 879, 917], "titl": [28, 240], "explicit": [28, 116, 240, 495, 529], "integr": [28, 240], "multi_fram": [28, 240], "wb": [28, 240], "coordin": [28, 240], "advanc": [28, 240], "len": [28, 67, 116, 117, 161, 240, 306, 416, 457, 463, 474, 546, 709, 819, 865, 871, 882, 917], "min_color": [28, 240], "76933c": [28, 240], "mid_color": [28, 240], "c4d79b": [28, 240], "max_color": [28, 240], "ebf1d": [28, 240], "data_bar_2010": [28, 240], "bar_color": [28, 240], "9bbb59": [28, 240], "bar_negative_color_sam": [28, 240], "bar_negative_border_color_sam": [28, 240], "000": [28, 240], "white": [28, 240], "some": [28, 86, 95, 96, 106, 133, 240, 564, 638, 779, 917], "w": [28, 240, 452, 860], "get_worksheet_by_nam": [28, 240], "fmt_titl": [28, 240], "add_format": [28, 240], "font_color": [28, 240], "4f6228": [28, 240], "font_siz": [28, 240], "12": [28, 58, 67, 68, 148, 149, 163, 213, 240, 309, 317, 322, 324, 331, 336, 338, 343, 347, 407, 434, 506, 508, 509, 521, 546, 575, 576, 577, 581, 584, 602, 609, 638, 647, 709, 717, 735, 742, 747, 831, 917], "ital": [28, 240], "bold": [28, 240], "customis": [28, 240], "trend": [28, 240], "win_loss": [28, 240], "subtl": [28, 240], "tone": [28, 240], "hidden": [28, 240], "id": [28, 107, 222, 240, 461, 462, 487, 489, 546, 622, 903, 917], "q1": [28, 240], "55": [28, 60, 240], "20": [28, 137, 153, 154, 176, 178, 182, 183, 240, 259, 260, 261, 264, 312, 338, 343, 363, 366, 516, 520, 546, 592, 638, 711, 747, 917], "35": [28, 118, 240, 312, 546, 711, 917], "q2": [28, 240], "30": [28, 67, 137, 148, 153, 176, 182, 183, 201, 217, 240, 259, 260, 261, 264, 312, 317, 320, 324, 336, 338, 343, 347, 363, 434, 546, 575, 592, 616, 638, 709, 711, 717, 720, 742, 747, 917], "15": [28, 125, 148, 149, 154, 240, 311, 312, 338, 343, 354, 506, 546, 575, 576, 638, 708, 711, 742, 747, 759, 917], "60": [28, 137, 240, 339, 340, 471, 739, 743, 744, 879], "q3": [28, 240], "50": [28, 137, 240, 300, 301, 302, 338, 343, 546, 698, 747, 917], "40": [28, 137, 176, 240, 338, 343, 363, 546, 592, 638, 724, 747], "80": [28, 240], "q4": [28, 240], "75": [28, 240], "account": [28, 240, 334, 349, 350, 351, 546, 738, 755, 756, 757, 917], "flavour": [28, 240], "integer_dtyp": [28, 189, 240, 599, 638], "0_": [28, 240], "just": [28, 97, 106, 169, 240, 589, 638], "unifi": [28, 240], "multi": [28, 95, 96, 240, 352, 546], "2_color_scal": [28, 240], "95b3d7": [28, 240], "ffffff": [28, 240], "ipccompress": [29, 240], "arrow": [29, 69, 83, 97, 100, 108, 200, 240, 603, 638, 894, 898, 917], "ipc": [29, 100, 101, 108, 111, 240, 555], "binari": [29, 240, 292, 294, 295, 296, 493, 687, 689, 690, 691], "stream": [29, 65, 240, 561, 566, 568, 585, 589, 593, 602, 603, 604, 638], "feather": [29, 100, 108, 240, 555], "lz4": [29, 32, 240, 603, 604, 638], "zstd": [29, 32, 240, 603, 604, 638], "pretti": [30, 240], "row_ori": [30, 240], "iobas": [30, 31, 102, 103, 240, 595, 619, 638], "serial": [30, 31, 240], "represent": [30, 31, 240, 298, 319, 322, 324, 325, 327, 329, 331, 332, 335, 336, 339, 344, 345, 347, 484, 546, 566, 583, 638, 694, 719, 722, 724, 728, 730, 733, 735, 736, 739, 740, 743, 748, 749, 751, 900, 917], "orient": [30, 59, 61, 87, 89, 240, 638], "slower": [30, 87, 89, 125, 147, 175, 213, 222, 240, 574, 622, 638], "common": [30, 240], "write_ndjson": [30, 240], "newlin": [31, 103, 109, 240], "delimit": [31, 90, 95, 96, 103, 106, 109, 177, 203, 240, 445, 853, 895, 917], "parquetcompress": [32, 240], "compression_level": [32, 240, 604, 638], "statist": [32, 95, 96, 104, 110, 130, 240, 350, 351, 380, 419, 420, 421, 422, 423, 424, 425, 426, 427, 439, 546, 604, 638, 710, 756, 757, 791, 827, 847, 917], "row_group_s": [32, 240, 604, 638], "use_pyarrow": [32, 95, 100, 104, 240, 604, 638, 897, 898, 917], "pyarrow_opt": [32, 98, 104, 107, 240], "parquet": [32, 104, 105, 110, 240, 555, 604, 638], "gzip": [32, 240, 604, 638], "lzo": [32, 240, 604, 638], "brotli": [32, 240, 604, 638], "choos": [32, 240, 603, 604, 638], "good": [32, 160, 240, 603, 604, 638], "perform": [32, 74, 84, 95, 96, 100, 104, 106, 108, 109, 110, 124, 125, 148, 149, 163, 180, 222, 240, 252, 406, 546, 575, 576, 581, 603, 604, 618, 622, 638], "fast": [32, 240, 355, 431, 546, 603, 604, 638, 760, 837, 917], "decompress": [32, 240, 603, 604, 638], "backward": [32, 139, 163, 240, 291, 357, 546, 570, 581, 604, 638, 762, 917], "guarante": [32, 84, 95, 96, 240, 568, 604, 638], "deal": [32, 240, 412, 471, 546, 604, 638, 815, 879, 917], "older": [32, 240, 604, 638], "reader": [32, 92, 95, 96, 100, 104, 240, 556, 604, 638], "higher": [32, 179, 232, 240, 411, 423, 528, 546, 594, 604, 632, 638, 814, 826, 917], "mean": [32, 95, 96, 100, 104, 106, 130, 139, 147, 177, 220, 240, 354, 357, 420, 439, 452, 497, 546, 570, 574, 585, 604, 620, 638, 710, 759, 762, 767, 823, 847, 860, 917], "smaller": [32, 135, 240, 568, 604, 638, 754, 917], "disk": [32, 100, 240, 602, 603, 604, 638], "11": [32, 149, 240, 314, 315, 324, 334, 338, 343, 366, 407, 426, 440, 474, 499, 535, 546, 561, 576, 577, 584, 593, 604, 609, 638, 647, 738, 742, 747, 821, 917], "22": [32, 240, 338, 343, 346, 471, 499, 604, 638, 742, 747, 750, 879], "extra": [32, 95, 98, 99, 100, 104, 107, 108, 110, 137, 240, 604, 638, 646, 917], "comput": [32, 65, 66, 71, 135, 147, 163, 205, 209, 220, 232, 240, 246, 253, 254, 255, 256, 257, 258, 279, 280, 281, 303, 304, 306, 307, 308, 309, 310, 313, 348, 353, 380, 385, 386, 401, 406, 407, 410, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 437, 438, 439, 443, 482, 483, 496, 502, 504, 511, 527, 532, 546, 574, 578, 580, 581, 604, 611, 617, 620, 632, 638, 642, 648, 649, 650, 651, 652, 653, 675, 676, 677, 702, 703, 704, 705, 706, 707, 712, 753, 754, 758, 791, 794, 795, 802, 810, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 844, 845, 846, 847, 850, 891, 892, 899, 917], "size": [32, 95, 96, 116, 117, 118, 119, 135, 148, 211, 240, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 495, 546, 575, 604, 638, 754, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 917], "chunk": [32, 92, 95, 96, 104, 106, 108, 109, 110, 117, 118, 137, 161, 172, 240, 251, 413, 546, 604, 638, 646, 696, 766, 803, 816, 894, 917], "reduc": [32, 95, 96, 104, 106, 108, 109, 110, 227, 228, 230, 233, 240, 434, 514, 546, 604, 627, 628, 630, 633, 638, 799, 813, 841, 887, 917], "memori": [32, 66, 83, 84, 87, 88, 89, 95, 96, 100, 104, 106, 108, 109, 110, 124, 125, 137, 193, 222, 240, 413, 434, 546, 604, 622, 638, 646, 816, 841, 842, 917], "pressur": [32, 104, 109, 110, 240, 434, 546, 604, 638, 841, 917], "improv": [32, 100, 108, 240, 604, 638], "speed": [32, 240, 252, 546, 604, 638], "minimum": [32, 116, 117, 118, 142, 171, 240, 300, 302, 349, 350, 351, 400, 404, 412, 525, 546, 591, 604, 638, 698, 700, 732, 755, 756, 757, 807, 812, 815, 917], "implement": [32, 84, 107, 124, 125, 222, 240, 252, 546, 622, 835, 836, 917], "v": [32, 67, 135, 240, 430, 546, 709, 833, 917], "At": [32, 240], "moment": [32, 129, 240, 380, 439, 546, 791, 847, 917], "argument": [32, 95, 98, 104, 107, 129, 131, 136, 147, 148, 149, 167, 175, 176, 177, 189, 195, 197, 205, 210, 213, 217, 220, 240, 338, 343, 352, 367, 406, 419, 420, 421, 422, 423, 425, 426, 427, 442, 458, 464, 470, 498, 499, 512, 531, 534, 546, 563, 567, 574, 575, 576, 592, 599, 606, 612, 616, 620, 638, 742, 747, 772, 866, 872, 878, 899, 917], "pyarrow": [32, 83, 88, 95, 98, 100, 104, 107, 111, 112, 161, 200, 204, 205, 240, 556, 894, 897, 898, 899, 917], "write_t": [32, 240], "base": [33, 133, 140, 148, 149, 240, 348, 349, 350, 351, 385, 386, 460, 522, 525, 546, 555, 564, 571, 575, 576, 638, 753, 755, 756, 757, 794, 795, 868, 908, 917], "calendar": [34, 35, 148, 149, 163, 213, 240, 324, 334, 338, 343, 347, 419, 420, 421, 422, 423, 425, 426, 427, 546, 575, 576, 581, 638, 724, 738, 742, 747, 751], "time": [35, 36, 64, 65, 68, 106, 137, 148, 149, 163, 213, 240, 267, 268, 269, 289, 316, 317, 318, 321, 334, 337, 342, 346, 367, 471, 484, 485, 500, 501, 510, 516, 530, 546, 555, 561, 575, 576, 581, 593, 638, 646, 663, 665, 716, 717, 718, 721, 738, 741, 746, 750, 772, 879, 900, 901, 917], "time_unit": [35, 36, 68, 346, 750], "time_zon": [35, 68, 318, 337, 718, 741], "m": [35, 36, 68, 316, 317, 321, 341, 342, 346, 471, 510, 516, 716, 717, 721, 745, 746, 750, 879], "timezon": [35, 68, 471, 879], "zoneinfo": 35, "run": [35, 65, 125, 164, 222, 240, 252, 271, 311, 531, 546, 561, 566, 568, 585, 589, 593, 602, 603, 604, 622, 638, 667, 708, 917, 923], "available_timezon": 35, "attribut": [35, 36, 43, 115, 240, 539, 540, 542, 547, 550, 551, 552, 638, 909, 911, 913, 920, 921, 922], "delta": [36, 98, 107, 502, 527, 532, 555, 851, 906, 917], "32": [37, 40, 53, 60, 112, 149, 159, 240, 434, 546, 576, 638, 712, 739, 810, 826, 917], "bit": [37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 414, 446, 546, 817, 854, 917], "sign": [39, 40, 41, 42, 334, 414, 474, 546, 738, 817, 882, 917], "inner": [43, 49, 162, 212, 240, 276, 313, 546, 580, 613, 619, 638, 672, 712, 917], "polarsdatatyp": [43, 93, 95, 96, 101, 105, 115, 117, 118, 121, 125, 134, 240, 252, 297, 352, 388, 454, 494, 495, 499, 512, 520, 521, 546, 565, 638, 647, 692, 862, 917], "pythondatatyp": 43, "nest": [43, 49, 135, 240, 555, 754, 917], "arrai": [43, 83, 87, 95, 96, 104, 135, 200, 204, 205, 240, 267, 278, 279, 280, 281, 282, 285, 286, 294, 300, 301, 302, 306, 307, 308, 309, 310, 386, 419, 420, 422, 425, 426, 427, 431, 447, 449, 452, 453, 455, 500, 511, 546, 638, 663, 674, 675, 676, 677, 678, 681, 682, 689, 698, 699, 700, 704, 705, 706, 707, 712, 754, 795, 822, 823, 825, 828, 829, 830, 837, 842, 855, 857, 860, 861, 863, 894, 898, 899, 907, 917], "within": [43, 113, 114, 163, 240, 581, 638], "wrap": [45, 107, 367, 546], "arbitrari": [45, 117], "python": [45, 68, 95, 96, 112, 125, 160, 186, 202, 222, 240, 252, 317, 388, 494, 546, 622, 647, 717, 725, 726, 727, 732, 897, 917], "queri": [46, 65, 97, 100, 106, 108, 109, 110, 137, 164, 176, 240, 289, 390, 455, 546, 561, 566, 568, 577, 584, 593, 602, 618, 622, 638, 646, 863, 917, 923], "pars": [46, 95, 96, 99, 106, 108, 109, 147, 189, 195, 217, 220, 240, 406, 442, 454, 460, 471, 496, 498, 501, 516, 534, 546, 574, 599, 606, 616, 620, 638, 862, 868, 879], "transform": [46, 125, 240, 388, 472, 473, 546], "lf": [48, 565, 571, 598, 615, 638], "under": [48, 59, 60, 61, 62, 539, 540, 542, 547, 550, 551, 552, 909, 911, 913, 920, 921, 922], "context": [49, 173, 240, 247, 252, 271, 358, 396, 441, 442, 489, 494, 503, 513, 516, 531, 545, 546, 555, 617, 638, 667], "manag": [49, 555], "categor": [49, 90, 120, 162, 203, 240, 298, 390, 484, 546, 693, 694, 900, 917], "temporarili": [49, 148, 149, 240, 575, 576, 638], "cach": [49, 65, 100, 106, 108, 110, 120, 390, 419, 420, 421, 422, 423, 425, 426, 427, 471, 546, 561, 566, 568, 593, 602, 638, 879], "categori": [49, 67, 120, 298, 694, 709, 917], "until": [49, 164, 240], "finish": [49, 71, 137, 240, 646, 917], "global": [49, 117, 120, 390, 546], "invalid": [49, 95, 96, 106, 454, 455, 460, 862, 863, 868], "outermost": 49, "exit": [49, 122], "df1": [49, 58, 66, 113, 137, 143, 205, 215, 240], "color": [49, 222, 622], "red": [49, 222, 622], "green": [49, 222, 622], "blue": 49, "orang": [49, 128, 223, 224, 226, 227, 228, 230, 232, 233, 240, 623, 624, 626, 627, 628, 630, 632, 633], "uint8": [49, 115, 309, 310, 478, 546, 706, 707, 887, 917], "df2": [49, 58, 66, 113, 137, 143, 205, 215, 240], "yellow": 49, "black": [49, 125, 240], "join": [49, 58, 65, 163, 212, 240, 366, 406, 546, 561, 566, 568, 581, 593, 602, 613, 617, 638], "succe": [49, 95, 96, 106], "df_join": 49, "cat": [49, 67, 446, 472, 473, 484, 501, 542, 546, 709, 854, 913, 917], "u8": [49, 90, 203, 240, 895, 917], "schemadict": [50, 83, 85, 86, 87, 88, 89, 106, 188, 240, 534, 585, 598, 622, 638], "composit": 50, "dai": [51, 68, 148, 149, 161, 163, 213, 240, 321, 324, 331, 334, 335, 336, 338, 342, 343, 344, 345, 347, 419, 420, 421, 422, 423, 425, 426, 427, 508, 509, 510, 546, 575, 576, 581, 638, 738, 739, 742, 747, 749], "unsign": [52, 53, 54, 55, 414, 546, 817, 917], "could": [56, 71, 133, 148, 240, 297, 505, 514, 546, 564, 575, 638, 692, 917], "static": [56, 622], "utf": 57, "union": [58, 65, 66, 90, 173, 175, 240, 492, 493, 500, 506, 507, 516, 522, 525, 529, 535, 561, 566, 568, 593, 602, 638, 712, 779, 836, 917], "intern": [58, 63, 160, 185, 201, 240, 360, 495, 507, 516, 522, 525, 530, 534, 535, 546, 660, 693, 715, 833, 852, 917], "descend": [58, 195, 240, 261, 264, 285, 412, 431, 441, 442, 485, 496, 546, 606, 638, 656, 659, 681, 786, 815, 837, 849, 901, 917], "uniqu": [58, 115, 116, 118, 158, 173, 231, 240, 263, 370, 378, 402, 471, 487, 489, 526, 546, 631, 638, 658, 710, 777, 788, 804, 879, 903, 905, 917], "inject": 58, "fill": [58, 66, 93, 121, 138, 139, 192, 211, 240, 291, 307, 310, 356, 357, 362, 366, 419, 420, 422, 425, 426, 427, 433, 457, 463, 474, 515, 546, 569, 570, 601, 617, 638, 761, 762, 808, 822, 823, 825, 828, 829, 830, 840, 865, 871, 882, 917], "sort": [58, 59, 113, 148, 149, 163, 170, 176, 177, 213, 225, 234, 240, 261, 264, 298, 358, 431, 442, 489, 491, 496, 546, 566, 575, 576, 581, 590, 592, 593, 602, 625, 634, 638, 656, 659, 694, 786, 837, 902, 905, 917], "origin": [58, 95, 96, 209, 240, 337, 379, 390, 406, 414, 447, 452, 453, 455, 457, 463, 474, 546, 611, 638, 741, 797, 855, 860, 861, 863, 865, 871, 882, 917], "unless": [58, 85, 205, 240, 638, 899, 907, 917], "doe": [58, 77, 83, 85, 86, 87, 89, 95, 96, 98, 99, 106, 107, 111, 113, 114, 137, 161, 185, 186, 217, 240, 346, 390, 487, 513, 546, 568, 585, 616, 638, 646, 750, 767, 797, 842, 907, 917], "receiv": [58, 125, 176, 240, 546, 592, 638], "now": [58, 149, 240, 576, 638], "whose": [58, 163, 177, 240, 352, 512, 546, 581, 638], "post": 58, "constrain": 58, "newli": 58, "boolean": [58, 63, 140, 142, 195, 240, 249, 250, 268, 292, 358, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 442, 454, 491, 496, 534, 546, 571, 606, 638, 644, 645, 657, 664, 687, 763, 772, 773, 774, 776, 777, 779, 780, 781, 782, 783, 784, 788, 811, 812, 835, 854, 908, 917], "2022": [58, 68, 112, 130, 146, 240, 317, 471, 510, 516, 717, 724, 879], "x": [58, 95, 96, 97, 106, 116, 117, 135, 153, 156, 158, 162, 169, 240, 252, 267, 276, 363, 388, 415, 436, 439, 467, 484, 494, 505, 506, 507, 514, 521, 529, 535, 546, 580, 585, 589, 605, 638, 643, 647, 762, 789, 844, 847, 875, 900, 917], "y": [58, 116, 117, 135, 156, 158, 162, 169, 240, 267, 276, 341, 415, 471, 507, 535, 546, 580, 589, 605, 638, 643, 745, 879, 917], "df3": [58, 240], "set_tbl_format": 58, "09": [58, 149, 240, 317, 324, 576, 638, 719], "01": [58, 68, 130, 146, 148, 149, 213, 240, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 471, 510, 575, 576, 638, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 879], "02": [58, 68, 146, 148, 149, 213, 240, 316, 317, 321, 322, 323, 329, 330, 331, 339, 340, 342, 344, 346, 428, 471, 510, 546, 575, 576, 638, 716, 717, 721, 722, 723, 725, 726, 727, 728, 730, 732, 733, 734, 735, 736, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 879], "03": [58, 68, 148, 149, 213, 240, 316, 317, 318, 320, 321, 323, 330, 331, 337, 338, 339, 340, 341, 342, 343, 344, 346, 575, 576, 638, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 730, 732, 734, 735, 736, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750], "af1": 58, "af2": 58, "af3": 58, "keep": [58, 95, 96, 106, 209, 212, 213, 240, 379, 390, 498, 546, 611, 613, 638, 797, 917], "easili": [58, 189, 217, 220, 240, 499, 534, 599, 616, 620, 638], "wise": [58, 142, 240, 253, 254, 255, 256, 257, 258, 303, 304, 353, 386, 436, 437, 438, 482, 483, 505, 506, 514, 529, 546, 648, 649, 650, 651, 652, 653, 702, 703, 758, 795, 844, 845, 846, 891, 892, 917], "dot": [58, 546, 602, 638, 917], "product": [58, 129, 240, 309, 313, 494, 546, 706, 712, 917], "fill_nul": [58, 138, 240, 471, 546, 569, 617, 638, 879, 917], "167": 58, "47": 58, "callabl": [59, 60, 61, 62, 106, 125, 142, 176, 222, 240, 252, 289, 388, 389, 418, 494, 505, 506, 514, 521, 529, 546, 585, 592, 622, 638, 647, 685, 821, 917], "decor": [59, 60, 61, 62, 117, 118], "access": [59, 60, 61, 62, 160, 185, 186, 240, 390, 546, 617, 638], "by_first_letter_of_column_nam": 59, "f": [59, 96, 107, 130, 146, 161, 165, 200, 208, 211, 240, 252, 289, 434, 451, 471, 494, 500, 505, 506, 514, 521, 529, 546, 685, 859, 879], "fromkei": [59, 61], "by_first_letter_of_column_valu": 59, "starts_with": [59, 446, 450, 858], "slice": [59, 65, 135, 151, 161, 198, 240, 275, 287, 418, 419, 420, 421, 422, 423, 425, 426, 427, 546, 561, 566, 568, 585, 593, 602, 603, 604, 638, 671, 683, 754, 821, 822, 823, 824, 825, 826, 828, 829, 830, 917], "to_seri": [59, 63, 240, 289, 685], "xx": [59, 61], "xy": [59, 61], "yy": [59, 61], "yz": [59, 61], "schema": [59, 60, 61, 66, 78, 79, 81, 83, 85, 86, 87, 89, 95, 96, 101, 105, 106, 109, 116, 117, 125, 126, 127, 134, 135, 170, 173, 240, 289, 396, 534, 559, 560, 565, 585, 590, 619, 622, 638, 701, 917], "a2": [59, 61], "b1": [59, 61], "b2": [59, 61], "pow_n": 60, "powersofn": 60, "next": [60, 291, 412, 546, 815, 917], "p": [60, 176, 240, 534, 546, 592, 638], "ceil": [60, 546, 917], "previou": [60, 122, 407, 476, 546, 810, 917], "floor": [60, 546, 917], "nearest": [60, 163, 179, 232, 240, 299, 361, 411, 423, 528, 546, 581, 594, 632, 638, 695, 765, 771, 814, 826, 917], "24": [60, 125, 135, 149, 240, 309, 311, 323, 546, 576, 638, 708, 723, 917], "001": [60, 325, 326, 328, 333, 510, 729, 731, 737], "next_pow2": 60, "prev_pow2": 60, "nearest_pow2": 60, "128": [60, 810, 917], "split_by_column_dtyp": 61, "collect": [61, 65, 107, 111, 164, 200, 240, 252, 495, 500, 516, 534, 546, 563, 564, 567, 568, 569, 570, 571, 572, 574, 575, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 592, 594, 596, 597, 599, 600, 601, 605, 606, 607, 608, 609, 610, 611, 612, 614, 616, 617, 618, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 638], "31": [62, 112, 317, 319, 320, 331, 344, 471, 508, 509, 516, 717, 719, 720, 879], "42": [62, 149, 150, 240, 576, 638, 768, 917], "961": 62, "1764": 62, "4160": 62, "eager": [63, 148, 211, 240, 495, 516, 520, 530, 534, 545, 555, 575, 638], "evalu": [63, 138, 140, 163, 240, 262, 311, 365, 367, 371, 390, 493, 495, 511, 530, 534, 546, 571, 578, 580, 581, 638, 657, 708, 908, 917], "immedi": [63, 412, 495, 530, 534, 546, 815, 917], "arg_tru": [63, 546, 917], "u32": [63, 148, 174, 218, 223, 231, 233, 240, 247, 259, 260, 261, 262, 263, 264, 265, 266, 269, 278, 305, 306, 319, 322, 325, 329, 331, 335, 336, 339, 344, 345, 382, 390, 402, 405, 412, 430, 447, 456, 459, 484, 487, 496, 503, 526, 546, 575, 618, 623, 631, 633, 638, 656, 657, 658, 674, 692, 719, 722, 728, 730, 733, 735, 736, 739, 740, 743, 748, 749, 815, 855, 864, 867, 900, 903, 905, 917], "build": [64, 84], "wa": 64, "compil": [64, 265, 266, 661, 662], "gate": 64, "info": [64, 98, 107, 112], "otherwis": [64, 170, 189, 240, 293, 300, 301, 302, 349, 350, 351, 414, 446, 448, 538, 546, 590, 599, 638, 647, 688, 698, 699, 700, 755, 756, 757, 817, 835, 836, 854, 856, 917], "version": [64, 67, 90, 98, 107, 112, 264, 354, 527, 529, 532, 546, 659, 759, 917], "depend": [64, 112, 252, 265, 266, 396, 412, 494, 513, 516, 546, 661, 662, 815, 917], "host": [64, 95, 100, 104, 108, 110], "git": 64, "lazy_fram": 65, "type_coercion": [65, 561, 566, 568, 593, 602, 603, 604, 638], "predicate_pushdown": [65, 561, 566, 568, 585, 593, 602, 603, 604, 638], "projection_pushdown": [65, 561, 566, 568, 585, 593, 602, 603, 604, 638], "simplify_express": [65, 561, 566, 568, 593, 602, 603, 604, 638], "no_optim": [65, 561, 568, 585, 593, 603, 604, 638], "slice_pushdown": [65, 561, 566, 568, 585, 593, 602, 603, 604, 638], "common_subplan_elimin": [65, 561, 566, 568, 593, 602, 638], "graph": [65, 164, 240, 578, 617, 638], "parallel": [65, 66, 92, 97, 104, 110, 148, 163, 164, 176, 240, 271, 311, 546, 555, 575, 580, 581, 638, 667, 708, 917], "threadpool": 65, "coercion": [65, 415, 546, 561, 566, 568, 593, 602, 603, 604, 638], "optim": [65, 104, 106, 108, 109, 110, 160, 164, 176, 180, 186, 240, 561, 566, 568, 585, 593, 602, 603, 604, 618, 638], "predic": [65, 106, 108, 109, 110, 111, 140, 185, 240, 358, 491, 514, 538, 546, 561, 566, 568, 571, 585, 593, 596, 602, 603, 604, 618, 638, 763, 835, 836, 917], "pushdown": [65, 561, 566, 568, 585, 593, 596, 602, 603, 604, 618, 638, 835, 836, 917], "project": [65, 106, 107, 108, 109, 110, 252, 441, 442, 546, 561, 566, 568, 585, 593, 596, 602, 603, 604, 619, 638], "turn": [65, 95, 96, 106, 120, 489, 546, 561, 566, 568, 585, 593, 603, 604, 638], "off": [65, 95, 96, 106, 120, 489, 546, 561, 566, 568, 585, 593, 603, 604, 638], "Will": [65, 208, 240, 522, 525, 561, 566, 568, 593, 602, 638, 917], "try": [65, 78, 80, 95, 96, 99, 100, 104, 106, 108, 110, 561, 566, 568, 593, 602, 638], "branch": [65, 561, 566, 568, 593, 602, 638], "subplan": [65, 561, 566, 568, 593, 602, 638], "occur": [65, 269, 401, 412, 546, 561, 566, 568, 593, 602, 638, 665, 802, 815, 917], "part": [65, 83, 467, 468, 561, 566, 568, 593, 602, 617, 638, 719, 722, 728, 730, 733, 735, 736, 743, 751, 875, 876], "fashion": [65, 162, 240, 561, 566, 568, 593, 602, 638], "item": [66, 96, 187, 240, 268, 274, 276, 354, 429, 468, 546, 664, 670, 672, 759, 832, 876, 917], "iter": [66, 147, 148, 149, 160, 161, 175, 185, 186, 189, 195, 208, 217, 219, 220, 240, 311, 352, 406, 442, 496, 498, 499, 501, 512, 531, 534, 546, 574, 575, 576, 599, 606, 616, 620, 638, 708, 917], "rechunk": [66, 83, 88, 95, 96, 100, 104, 106, 108, 109, 110, 137, 240, 546, 646, 696, 803, 917], "concatmethod": 66, "vertic": [66, 137, 211, 215, 240, 445, 522, 853], "aggreg": [66, 95, 96, 104, 142, 148, 166, 167, 168, 171, 173, 177, 178, 179, 196, 197, 211, 214, 220, 221, 224, 226, 240, 247, 358, 384, 388, 406, 418, 419, 420, 421, 422, 423, 425, 426, 427, 489, 505, 506, 507, 514, 519, 522, 525, 529, 535, 546, 575, 585, 586, 587, 588, 591, 594, 607, 608, 614, 620, 621, 624, 626, 638, 821, 822, 823, 825, 828, 829, 830, 917], "concaten": [66, 142, 176, 240, 501, 546, 592, 638, 696, 803, 917], "sure": [66, 83, 88, 95, 96, 97, 100, 104, 180, 240, 495], "contigu": [66, 83, 88, 95, 96, 100, 104, 106, 108, 109, 110, 180, 240], "diagon": [66, 208, 240], "strategi": [66, 95, 115, 116, 117, 118, 139, 148, 162, 163, 172, 240, 252, 289, 357, 546, 570, 575, 580, 581, 638, 685, 762, 917], "vstack": [66, 137, 240], "find": [66, 141, 240, 430, 546, 833, 917], "miss": [66, 95, 96, 106, 138, 240, 291, 349, 350, 351, 362, 366, 373, 375, 532, 546, 569, 638, 755, 756, 757, 907, 917], "stack": [66, 153, 215, 240], "length": [66, 67, 93, 116, 121, 148, 149, 194, 240, 284, 311, 338, 343, 397, 418, 419, 420, 421, 422, 423, 425, 426, 427, 440, 457, 459, 463, 465, 474, 495, 546, 575, 576, 593, 605, 638, 680, 685, 696, 708, 709, 717, 742, 747, 792, 808, 821, 822, 823, 824, 825, 826, 828, 829, 830, 848, 865, 867, 871, 873, 882, 917], "don": [66, 211, 240, 252, 271, 311, 494, 546, 667, 708, 834, 907, 917], "t": [66, 99, 106, 125, 176, 211, 240, 252, 271, 311, 348, 349, 350, 351, 458, 464, 470, 471, 494, 538, 546, 592, 638, 667, 708, 753, 755, 756, 757, 834, 866, 872, 878, 879, 907, 917], "match": [66, 77, 83, 85, 86, 87, 89, 113, 114, 139, 163, 185, 240, 395, 446, 447, 450, 453, 454, 455, 458, 461, 462, 464, 469, 470, 471, 499, 570, 581, 638, 787, 854, 855, 858, 861, 862, 863, 866, 869, 870, 872, 877, 878, 879, 917], "relev": 66, "execut": [66, 164, 240, 271, 558, 585, 593, 638, 667], "df_h1": 66, "l1": 66, "l2": 66, "df_h2": 66, "r1": 66, "r2": 66, "r3": 66, "df_d1": 66, "df_d2": 66, "bin": [67, 460, 540, 709, 868, 911, 917], "label": [67, 418, 419, 420, 421, 422, 423, 425, 426, 427, 546, 593, 638, 709, 821, 822, 823, 824, 825, 826, 828, 829, 830, 917], "break_point_label": [67, 709, 917], "break_point": [67, 709, 917], "category_label": [67, 709, 917], "discret": [67, 270, 312, 348, 546, 666, 709, 711, 753, 917], "deprec": [67, 90, 264, 354, 527, 532, 546, 638, 659, 759, 917], "sinc": [67, 90, 98, 107, 264, 321, 354, 516, 527, 532, 546, 659, 721, 759, 917], "assign": [67, 116, 148, 240, 412, 467, 468, 546, 575, 638, 709, 797, 815, 875, 876, 917], "must": [67, 84, 85, 98, 107, 136, 148, 149, 163, 170, 185, 240, 289, 388, 419, 420, 421, 422, 423, 425, 426, 427, 546, 567, 575, 576, 581, 585, 590, 638, 709, 917], "breakpoint": [67, 709, 917], "experiment": [67, 111, 189, 211, 212, 217, 240, 311, 338, 419, 420, 421, 422, 423, 425, 426, 427, 546, 599, 613, 616, 638, 708, 709, 742, 917], "inf": [67, 117, 118, 258, 369, 372, 546, 653, 709, 776, 780, 796, 810, 904, 917], "low": [68, 148, 240, 339, 495, 575, 638], "high": [68, 148, 240, 339, 495, 575, 638], "pli": [68, 166, 167, 171, 197, 240], "interv": [68, 148, 149, 213, 240, 338, 339, 343, 367, 419, 420, 421, 422, 423, 425, 426, 427, 546, 575, 576, 638, 719, 721, 722, 728, 730, 733, 735, 736, 739, 740, 742, 743, 745, 746, 747, 748, 749, 751, 772, 917], "timedelta": [68, 148, 149, 213, 240, 319, 321, 322, 324, 329, 331, 334, 335, 336, 338, 339, 341, 342, 343, 344, 345, 347, 419, 420, 421, 422, 423, 425, 426, 427, 546, 575, 576, 638, 725, 727, 732, 738, 742, 747, 798, 801, 806, 807, 917], "1d": [68, 148, 149, 163, 213, 240, 316, 323, 330, 334, 338, 343, 346, 419, 420, 421, 422, 423, 425, 426, 427, 546, 575, 576, 581, 638, 716, 721, 723, 725, 726, 727, 732, 734, 738, 742, 745, 746, 747, 749, 750], "closedinterv": [68, 148, 149, 240, 367, 419, 420, 421, 422, 423, 425, 426, 427, 546, 575, 576, 638, 772, 917], "lower": [68, 106, 148, 179, 232, 240, 367, 387, 411, 414, 423, 495, 528, 546, 568, 575, 594, 632, 638, 772, 796, 814, 817, 826, 904, 917], "bound": [68, 95, 96, 135, 148, 240, 274, 288, 367, 387, 488, 495, 546, 575, 638, 670, 684, 754, 772, 796, 904, 917], "upper": [68, 95, 96, 135, 148, 240, 367, 488, 495, 546, 575, 638, 754, 772, 796, 904, 917], "period": [68, 148, 149, 191, 192, 240, 283, 338, 343, 349, 350, 351, 407, 432, 433, 546, 575, 576, 600, 601, 638, 679, 742, 747, 755, 756, 757, 810, 839, 840, 917], "like": [68, 84, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 156, 158, 162, 240, 271, 399, 412, 522, 525, 535, 546, 568, 595, 638, 667, 815, 917], "durat": [68, 163, 213, 240, 320, 323, 326, 328, 330, 333, 340, 346, 484, 546, 581, 638, 720, 723, 729, 731, 734, 737, 744, 750, 900, 917], "3d12h4m25": [68, 148, 149, 163, 213, 240, 338, 343, 575, 576, 581, 638, 742, 747], "hour": [68, 148, 149, 163, 213, 240, 334, 338, 343, 419, 420, 421, 422, 423, 425, 426, 427, 509, 510, 546, 575, 576, 581, 638, 738, 742, 747], "minut": [68, 148, 149, 163, 213, 240, 334, 338, 343, 419, 420, 421, 422, 423, 425, 426, 427, 509, 510, 546, 575, 576, 581, 638, 738, 742, 747], "tempor": [68, 148, 149, 160, 186, 202, 240, 367, 419, 420, 421, 422, 423, 425, 426, 427, 546, 575, 576, 638, 772, 787, 917], "window": [68, 148, 149, 240, 311, 338, 343, 349, 350, 351, 406, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 500, 546, 575, 576, 638, 708, 742, 747, 755, 756, 757, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 917], "granular": 68, "finer": 68, "permut": 68, "1mo": [68, 148, 149, 163, 213, 240, 318, 320, 334, 337, 338, 341, 343, 419, 420, 421, 422, 423, 425, 426, 427, 546, 575, 576, 581, 638, 718, 720, 735, 738, 739, 740, 741, 742, 747, 748], "dtrang": 68, "1985": 68, "04": [68, 111, 148, 213, 240, 317, 318, 319, 320, 323, 329, 330, 331, 335, 337, 338, 339, 340, 341, 344, 345, 346, 471, 510, 575, 638, 718, 720, 723, 728, 730, 733, 734, 735, 736, 740, 741, 743, 744, 745, 748, 749, 750, 879], "05": [68, 111, 113, 114, 163, 213, 240, 317, 318, 320, 337, 339, 341, 581, 638, 717, 718, 719, 720, 741, 742, 747, 749], "07": [68, 317, 319, 335, 337, 338, 343, 345, 471, 516, 717, 719, 749, 879], "08": [68, 113, 114, 149, 240, 317, 338, 471, 510, 576, 638, 742, 747, 879], "zone": [68, 318, 337, 718, 741], "america": [68, 741], "new_york": [68, 741], "\u03bc": [68, 148, 149, 163, 213, 240, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 471, 516, 575, 576, 581, 638, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 879], "est": [68, 741], "encount": [69, 148, 240, 403, 404, 454, 455, 502, 505, 514, 532, 546, 575, 638, 806, 807, 862, 863, 917], "error": [69, 95, 96, 106, 185, 240, 276, 288, 293, 297, 379, 446, 448, 454, 455, 471, 546, 622, 672, 684, 688, 692, 854, 856, 862, 863, 879, 917], "duplic": [72, 156, 162, 163, 209, 240, 368, 546, 580, 581, 611, 638, 774, 917], "certain": [73, 98, 107, 154, 213, 240, 499, 561, 593, 603, 604, 638, 917], "structur": [74, 78, 80, 137, 176, 240, 546, 592, 638, 646, 917], "least": [75, 117, 407, 489, 546, 810, 905, 917], "expect": [75, 77, 82, 252, 494, 546, 583, 585, 638], "unexpect": [76, 240], "caus": [76, 84, 95, 96, 106, 124, 137, 240, 646, 917], "panic": 76, "combin": [78, 80, 148, 149, 150, 163, 213, 240, 262, 343, 458, 464, 470, 546, 575, 576, 581, 602, 638, 747, 866, 872, 878], "mismatch": 78, "incompat": 80, "pa": [83, 107, 111], "chunkedarrai": [83, 172, 240, 712, 917], "schemadefinit": [83, 85, 86, 87, 89, 240, 638], "schema_overrid": [83, 85, 86, 87, 88, 89, 161, 240, 638], "zero": [83, 84, 94, 95, 96, 100, 104, 124, 126, 139, 160, 185, 200, 205, 240, 356, 357, 430, 439, 474, 546, 559, 570, 638, 685, 697, 762, 847, 882, 894, 898, 899, 917], "copi": [83, 84, 124, 126, 127, 161, 200, 205, 217, 240, 355, 474, 546, 559, 560, 616, 638, 643, 697, 701, 714, 760, 882, 894, 898, 899, 917], "most": [83, 397, 401, 407, 468, 489, 546, 802, 810, 876, 905, 917], "closest": 83, "pair": [83, 85, 86, 87, 89, 181, 240, 596, 638], "declar": [83, 85, 86, 87, 89, 240, 638], "sever": [83, 85, 86, 87, 89, 240, 638], "wai": [83, 85, 86, 87, 89, 131, 147, 161, 176, 195, 220, 240, 406, 442, 499, 546, 563, 574, 592, 606, 620, 638], "As": [83, 85, 86, 87, 89, 99, 240, 530, 638], "auto": [83, 85, 86, 87, 89, 104, 110, 208, 240, 638], "automat": [83, 85, 86, 87, 89, 95, 96, 97, 106, 117, 118, 189, 217, 240, 458, 464, 470, 471, 599, 616, 638, 866, 872, 878, 879, 917], "equival": [83, 85, 86, 87, 89, 98, 159, 173, 240, 459, 638, 790, 867, 880, 881, 917], "form": [83, 85, 86, 87, 89, 160, 186, 211, 240, 407, 546, 638, 810, 917], "them": [83, 85, 86, 87, 89, 137, 148, 149, 163, 170, 213, 240, 276, 367, 403, 404, 500, 546, 575, 576, 581, 590, 638, 646, 672, 806, 807, 917], "dimens": [83, 85, 87, 89, 240, 416, 546, 638, 819, 917], "construct": [83, 85, 86, 87, 88, 89, 240, 390, 546, 573, 595, 638, 917], "allow_copi": [84, 124], "interchang": [84, 124], "protocol": [84, 97, 124], "__dataframe__": 84, "convers": [84, 124, 161, 205, 240, 471, 555, 879, 897, 898, 899, 917], "detail": [84, 97, 113, 114, 124, 240, 638, 924], "latest": [84, 98, 107, 124, 362, 397, 546], "index": [84, 88, 91, 97, 112, 124, 141, 148, 149, 154, 163, 177, 183, 185, 194, 206, 213, 218, 240, 247, 259, 260, 261, 263, 264, 265, 266, 274, 284, 288, 334, 419, 420, 421, 422, 423, 425, 426, 427, 430, 440, 452, 465, 480, 546, 575, 576, 581, 605, 618, 638, 654, 655, 656, 657, 658, 659, 661, 662, 670, 680, 684, 738, 808, 833, 836, 848, 860, 873, 889, 917], "throw": [84, 297, 454, 455, 546, 692, 862, 863, 917], "runtimeerror": 84, "from_panda": [84, 99], "from_arrow": 84, "effici": [84, 161, 240], "map": [85, 86, 95, 96, 100, 101, 104, 105, 106, 108, 125, 134, 160, 181, 185, 186, 201, 240, 338, 343, 389, 390, 489, 494, 546, 565, 596, 638, 742, 747, 797, 917], "clone": [85, 86, 87, 88, 89, 126, 204, 205, 240, 559, 638, 697, 897, 898, 899, 907, 917], "dimension": [85, 87, 89, 240, 638, 917], "infer_schema_length": [86, 89, 95, 96, 99, 106, 109, 240, 638], "mani": [86, 89, 97, 137, 240, 646, 917], "scan": [86, 89, 95, 96, 104, 106, 107, 108, 109, 110, 111, 568, 577, 584, 638], "slow": [86, 89, 95, 96, 106, 252, 311, 546, 708, 917], "NOT": [86, 113, 114], "typic": 86, "clearer": 86, "after": [86, 94, 95, 96, 100, 104, 106, 108, 109, 110, 137, 210, 239, 240, 352, 390, 412, 474, 546, 612, 638, 646, 741, 797, 815, 882, 917], "load": [86, 88, 98, 107, 240, 555, 577, 584, 638], "want": [86, 125, 137, 173, 240, 300, 301, 302, 358, 388, 390, 419, 420, 421, 422, 423, 425, 426, 427, 505, 514, 546, 561, 577, 584, 638, 646, 698, 699, 700, 898, 917], "_partial_": [86, 240, 638], "omit": [86, 116, 117, 118, 173, 240], "partial": 86, "present": [86, 113, 117, 371, 546, 907, 917], "np": [87, 140, 240, 480, 546, 638, 776, 780, 781, 782, 821, 917], "ndarrai": [87, 140, 204, 240, 480, 546, 638, 712, 833, 836, 889, 898, 917], "numpi": [87, 112, 129, 204, 205, 240, 403, 404, 546, 638, 776, 780, 781, 782, 806, 807, 821, 833, 889, 898, 899, 907, 917], "columnar": [87, 89, 160, 186, 240], "interpret": [87, 89, 95, 96, 106, 240, 638], "yield": [87, 89, 95, 96, 106, 135, 137, 208, 240, 638, 646, 754, 917], "conclus": [87, 89, 240, 638], "pd": [88, 99, 484, 546, 900, 917], "nan_to_nul": [88, 240, 638, 917], "include_index": 88, "datetimeindex": [88, 712, 917], "panda": [88, 99, 112, 205, 240, 484, 546, 638, 899, 900, 917], "instal": [88, 95, 96, 97, 100, 104, 107, 112, 129, 204, 205, 240, 602, 638, 899, 917], "nan": [88, 113, 114, 117, 124, 138, 205, 240, 314, 315, 356, 366, 373, 375, 376, 377, 391, 400, 403, 404, 502, 532, 546, 569, 638, 649, 653, 713, 761, 781, 782, 806, 807, 821, 899, 917], "convert": [88, 90, 98, 99, 107, 124, 201, 202, 203, 204, 207, 240, 289, 318, 460, 471, 638, 685, 718, 868, 879, 886, 897, 898, 899, 907, 917], "pd_df": 88, "pd_seri": 88, "dummi": [90, 203, 240, 895, 917], "to_dummi": [90, 240, 917], "foo_1": [90, 203, 240], "foo_2": [90, 203, 240], "bar_3": [90, 203, 240], "bar_4": [90, 203, 240], "ham_a": [90, 203, 240], "ham_b": [90, 203, 240], "datatypeclass": 91, "get": [91, 101, 105, 119, 128, 134, 144, 145, 148, 149, 151, 152, 156, 158, 165, 172, 185, 188, 190, 194, 198, 216, 225, 234, 240, 247, 259, 260, 261, 263, 264, 273, 277, 278, 290, 306, 307, 308, 309, 310, 321, 359, 364, 368, 370, 378, 381, 383, 391, 392, 393, 396, 398, 400, 403, 404, 411, 440, 444, 456, 459, 478, 479, 486, 490, 513, 518, 522, 523, 524, 525, 533, 536, 537, 546, 562, 565, 572, 575, 576, 577, 582, 584, 598, 605, 609, 615, 625, 634, 638, 654, 655, 656, 657, 658, 659, 669, 673, 674, 686, 696, 704, 705, 706, 707, 721, 766, 769, 772, 774, 777, 788, 793, 798, 800, 801, 803, 806, 807, 811, 812, 814, 848, 851, 864, 867, 888, 894, 895, 902, 906, 907, 917], "uint32": [91, 112, 135, 240, 261, 264, 265, 266, 278, 319, 322, 325, 327, 329, 331, 332, 335, 336, 339, 344, 345, 415, 447, 456, 459, 480, 484, 546, 657, 661, 662, 674, 692, 719, 722, 728, 730, 733, 735, 736, 739, 740, 743, 748, 749, 754, 834, 855, 900, 917], "regular": [91, 160, 185, 186, 213, 240, 352, 499, 512, 522, 525, 535, 546], "uint64": [91, 150, 240, 265, 266, 363, 414, 546, 661, 662, 768, 817, 917], "bigidx": 91, "read": [92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 137, 240, 388, 546, 568, 573, 595, 638, 646, 917], "over": [92, 95, 96, 98, 106, 117, 125, 137, 160, 161, 185, 186, 208, 219, 222, 240, 252, 311, 357, 366, 388, 389, 418, 419, 420, 421, 422, 423, 425, 426, 427, 494, 505, 506, 514, 521, 529, 546, 622, 646, 647, 708, 821, 822, 823, 825, 829, 917], "fetch": [92, 106, 164, 240, 559, 561, 577, 584, 638], "ideal": 92, "read_csv_batch": [92, 556], "tpch": [92, 96], "tables_scale_100": [92, 96], "lineitem": [92, 96, 97], "tbl": [92, 96], "try_parse_d": [92, 95, 96, 106], "In": [93, 98, 107, 110, 117, 118, 121, 125, 135, 137, 148, 149, 173, 240, 252, 396, 546, 575, 576, 638, 646, 754, 816, 917], "probabl": [93, 121, 348, 546, 753, 917], "n_row": [94, 95, 96, 100, 104, 106, 108, 109, 110, 161, 240, 568, 638], "accept": [94, 95, 96, 98, 100, 104, 136, 147, 189, 195, 217, 220, 240, 352, 406, 442, 496, 498, 499, 501, 512, 534, 546, 567, 574, 599, 606, 616, 620, 638], "start": [94, 95, 96, 100, 104, 106, 108, 109, 110, 147, 148, 164, 194, 213, 218, 240, 284, 296, 319, 321, 322, 324, 329, 331, 335, 336, 338, 339, 342, 343, 344, 345, 347, 352, 367, 440, 446, 450, 465, 469, 499, 505, 512, 514, 538, 546, 574, 575, 593, 605, 618, 638, 680, 691, 716, 718, 719, 721, 722, 728, 730, 733, 735, 736, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 772, 848, 858, 873, 877, 917], "stop": [94, 95, 96, 100, 104, 106, 108, 109, 110, 319, 321, 322, 324, 329, 331, 335, 336, 338, 339, 342, 343, 344, 345, 347, 716, 718, 719, 721, 722, 728, 730, 733, 735, 736, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751], "textio": 95, "new_column": [95, 96, 99], "comment_char": [95, 96, 106], "quote_char": [95, 96, 106], "skip_row": [95, 96, 106], "missing_utf8_is_empty_str": [95, 96, 106], "ignore_error": [95, 96, 106], "n_thread": [95, 96], "8192": 95, "csvencod": [95, 96, 106], "low_memori": [95, 96, 104, 106, 109, 110], "storage_opt": [95, 98, 100, 104, 107, 108, 110], "skip_rows_after_head": [95, 96, 106], "row_count_nam": [95, 96, 100, 104, 106, 108, 109, 110], "row_count_offset": [95, 96, 100, 104, 106, 108, 109, 110], "sample_s": [95, 96], "eol_char": [95, 96, 106], "By": [95, 96, 99, 106, 163, 240, 460, 520, 581, 638, 851, 868, 898, 906, 917], "we": [95, 96, 99, 106, 163, 240, 271, 460, 520, 538, 581, 585, 638, 647, 667, 868, 917], "handler": [95, 96, 99], "g": [95, 96, 98, 99, 100, 104, 107, 108, 110, 211, 240, 252, 352, 434, 512, 546, 596, 638, 834, 898, 917], "via": [95, 96, 99, 106, 108, 109, 110, 160, 186, 240, 252, 546], "builtin": [95, 96, 99], "stringio": [95, 96], "fsspec": [95, 96, 100, 104, 107, 108, 110, 112], "remot": [95, 96, 100, 104], "first": [95, 96, 99, 106, 109, 125, 146, 148, 151, 163, 165, 172, 176, 177, 198, 208, 209, 213, 225, 240, 261, 263, 264, 271, 274, 275, 311, 334, 338, 364, 370, 383, 390, 430, 452, 454, 455, 461, 462, 498, 505, 514, 518, 546, 561, 575, 577, 581, 584, 592, 611, 617, 625, 638, 656, 659, 667, 670, 671, 685, 708, 710, 738, 742, 769, 777, 793, 797, 833, 860, 862, 863, 869, 870, 917], "dataset": [95, 96, 106, 111, 380, 546, 555, 585, 638, 791, 917], "autogener": [95, 96, 106], "column_x": [95, 96, 106], "enumer": [95, 96, 106, 161, 240], "everi": [95, 96, 106, 148, 199, 202, 213, 240, 265, 266, 270, 272, 274, 275, 284, 287, 306, 307, 308, 309, 310, 311, 338, 343, 354, 451, 481, 505, 506, 546, 568, 575, 610, 638, 661, 662, 666, 668, 670, 671, 680, 683, 704, 705, 706, 707, 708, 742, 747, 759, 859, 890, 917], "shorter": [95, 96], "remain": [95, 96, 106, 135, 240, 252, 467, 468, 546, 585, 638, 754, 875, 876, 917], "comment": [95, 96, 106], "instanc": [95, 96, 106, 117, 118, 137, 142, 240, 289, 297, 397, 419, 420, 421, 422, 423, 425, 426, 427, 505, 514, 546, 585, 618, 638, 646, 692, 917], "special": [95, 96, 106, 647, 917], "handl": [95, 96, 106, 111, 270, 312, 474, 546, 666, 711, 882, 917], "escap": [95, 96, 106], "dure": [95, 96, 106, 122, 137, 240, 646, 917], "equal": [95, 96, 106, 113, 114, 120, 143, 148, 163, 170, 240, 418, 419, 420, 421, 422, 423, 425, 426, 427, 456, 457, 463, 474, 495, 546, 575, 581, 590, 638, 821, 822, 823, 824, 825, 826, 828, 829, 830, 834, 864, 865, 871, 882, 917], "would": [95, 96, 106, 261, 264, 274, 396, 412, 496, 546, 585, 638, 656, 659, 670, 815, 898, 917], "prefer": [95, 96, 98, 106, 125, 137, 160, 185, 186, 222, 240, 252, 418, 546, 622, 638, 646, 821, 917], "treat": [95, 96, 106, 446, 461, 462, 854, 869, 870], "befor": [95, 106, 122, 137, 148, 163, 210, 240, 309, 310, 311, 390, 407, 418, 419, 420, 421, 422, 423, 425, 426, 427, 474, 478, 546, 575, 578, 581, 612, 638, 646, 706, 707, 708, 797, 810, 821, 822, 823, 824, 825, 826, 828, 829, 830, 882, 887, 917], "10000": [95, 161, 240, 474], "check": [95, 96, 106, 113, 114, 143, 157, 159, 240, 249, 250, 268, 292, 295, 296, 367, 371, 446, 450, 469, 546, 585, 638, 644, 645, 664, 687, 690, 691, 773, 775, 778, 779, 785, 786, 787, 789, 790, 834, 854, 858, 877, 917], "might": [95, 96, 106, 252, 396, 487, 546, 899, 917], "issu": [95, 96, 99, 106, 309, 310, 478, 546, 706, 707, 887, 917], "alwai": [95, 125, 222, 240, 396, 585, 622, 638], "physic": [95, 96, 163, 240, 298, 484, 546, 558, 580, 581, 638, 694, 900, 917], "cpu": [95, 96], "your": [95, 96, 113, 114, 160, 189, 217, 220, 240, 252, 546, 561, 577, 584, 585, 599, 616, 620, 638], "system": [95, 96], "wrongli": 95, "done": [95, 96, 106, 111, 146, 163, 240, 251, 297, 457, 463, 546, 581, 638, 692, 865, 871, 917], "buffer": [95, 96, 135, 160, 240, 754, 917], "modifi": [95, 96, 106, 122, 153, 160, 215, 240, 262, 337, 346, 546, 741, 750, 818, 880, 881, 917], "lossi": [95, 96, 106], "decod": [95, 96], "im": [95, 96], "usag": [95, 96, 106, 117, 118, 193, 240, 842, 917], "expens": [95, 96, 104, 106, 109, 110, 160, 185, 186, 208, 209, 240, 252, 546, 611, 638, 646, 917], "nativ": [95, 100, 104, 125, 160, 186, 202, 222, 240, 252, 546, 622], "parser": 95, "even": 95, "possibl": [95, 125, 160, 186, 222, 240, 252, 387, 396, 468, 488, 546, 622, 876, 917], "regard": [95, 502, 532], "sens": [95, 100, 104, 108, 110, 148, 149, 170, 213, 240, 575, 576, 590, 638], "particular": [95, 100, 104, 108, 110, 135, 240, 754, 917], "storag": [95, 98, 100, 104, 107, 108, 110], "skip": [95, 96, 99, 104, 106, 110, 211, 240, 647, 917], "offset": [95, 96, 100, 104, 106, 108, 109, 110, 148, 149, 194, 213, 218, 240, 284, 334, 338, 343, 440, 465, 471, 546, 575, 576, 605, 618, 638, 680, 738, 742, 747, 848, 873, 879, 917], "row_count": [95, 96, 100, 104, 106, 108, 109, 110], "sampl": [95, 96, 222, 240, 439, 546, 622, 847, 917], "estim": [95, 96, 135, 240, 350, 351, 380, 546, 754, 756, 757, 791, 917], "alloc": [95, 96, 135, 180, 240, 754, 917], "need": [95, 96, 99, 113, 114, 148, 149, 193, 204, 240, 289, 390, 434, 456, 546, 575, 576, 638, 841, 864, 917], "scan_csv": [95, 96, 603, 604, 638], "lazili": [95, 96, 106, 107, 108, 109, 110, 390, 546], "glob": [95, 96, 106, 108, 109, 110], "pattern": [95, 96, 106, 108, 109, 110, 160, 240, 395, 446, 447, 452, 453, 461, 462, 835, 836, 854, 855, 860, 861, 869, 870, 917], "store": [95, 104, 137, 160, 186, 240, 646, 917], "continu": [95, 104, 439, 546, 847, 917], "benchmark": [95, 104], "50000": 96, "batchedcsvread": [96, 555], "batch": [96, 109, 585, 638], "upon": 96, "creation": 96, "gather": 96, "next_batch": 96, "call": [96, 117, 118, 147, 164, 239, 240, 252, 307, 310, 546, 556, 574, 637, 638, 647, 917], "big": 96, "interest": 96, "seen_group": 96, "big_fil": 96, "while": [96, 98, 99, 107, 117, 118, 160, 169, 208, 240, 589, 638], "df_current_batch": 96, "concat": [96, 500, 696, 803, 917], "partition_df": 96, "partition_bi": [96, 161, 240], "as_dict": [96, 175, 240], "fh": 96, "write_csv": [96, 106, 240], "els": 96, "partition_on": 97, "partition_rang": 97, "partition_num": 97, "dbreadengin": 97, "connectorx": [97, 112], "raw": 97, "partit": [97, 98, 104, 107, 111, 161, 175, 240], "backend": [97, 98, 107], "transfer": 97, "document": [97, 99, 455, 471, 863, 879], "redshift": 97, "mysql": 97, "mariadb": 97, "clickhous": 97, "oracl": 97, "bigqueri": 97, "pleas": [97, 107], "doc": [97, 129, 240], "github": 97, "com": [97, 349, 350, 351, 452, 546, 755, 756, 757, 860, 917], "sfu": 97, "db": 97, "connector": 97, "destin": 97, "sqlite": 97, "develop": [97, 117, 118], "flight_sql": 97, "further": [97, 899, 917], "wide": [97, 146, 169, 211, 240, 589, 638], "adopt": 97, "significantli": 97, "better": [97, 125, 222, 240, 252, 489, 546, 622, 835, 836, 917], "driver": 97, "cpp": 97, "partition_col": 97, "explicitli": [97, 116, 117, 390, 534, 546], "table_uri": [98, 107], "delta_table_opt": [98, 107], "lake": [98, 107, 555], "root": [98, 107, 379, 389, 398, 409, 443, 477, 545, 546, 850, 917], "filesystem": [98, 107], "absolut": [98, 107, 113, 114, 185, 240, 246, 349, 350, 351, 546, 642, 755, 756, 757, 917], "But": [98, 107], "gc": [98, 107], "azur": [98, 107], "thu": [98, 106, 107, 137, 240, 502, 532, 646, 917], "deltalak": [98, 107], "cloud": [98, 107, 111], "configur": [98, 107], "authent": [98, 107], "keyword": [98, 104, 107, 129, 176, 185, 189, 217, 220, 240, 531, 534, 546, 592, 599, 616, 620, 638, 917], "table_path": [98, 107], "avoid": 98, "year": [98, 107, 148, 149, 163, 213, 240, 324, 334, 335, 338, 343, 344, 419, 420, 421, 422, 423, 425, 426, 427, 508, 509, 546, 575, 576, 581, 638, 724, 738, 739, 742, 747, 748], "2021": [98, 107, 130, 146, 148, 213, 240, 471, 520, 575, 638, 724, 787, 879, 917], "aw": [98, 107], "bucket": [98, 107, 338, 343, 742, 747], "aws_access_key_id": [98, 107], "the_aws_access_key_id": [98, 107], "aws_secret_access_kei": [98, 107], "the_aws_secret_access_kei": [98, 107], "googl": [98, 107], "service_account": [98, 107], "service_account_json_absolute_path": [98, 107], "az": [98, 107], "adl": [98, 107], "abf": [98, 107], "azure_storage_account_nam": [98, 107], "azure_storage_account_kei": [98, 107], "without_fil": [98, 107], "track": [98, 107, 125, 240], "sheet_id": 99, "sheet_nam": 99, "xlsx2csv_option": 99, "read_csv_opt": 99, "xlsx2csv": [99, 112], "read_csv": [99, 106], "skip_empty_lin": 99, "my": [99, 107, 111], "datasheet": 99, "excel_fil": 99, "correct": [99, 350, 351, 380, 424, 439, 546, 585, 638, 756, 757, 791, 827, 847, 917], "look": [99, 289, 292, 687], "fix": [99, 116, 117, 346, 419, 420, 421, 422, 423, 425, 426, 427, 546, 750], "whole": [99, 441, 442, 452, 546, 638, 860], "With": 99, "1000": [99, 135, 240, 325, 326, 474, 729], "spreadsheet": [99, 177, 240], "xl": 99, "xlsm": 99, "xlsb": 99, "odf": 99, "od": [99, 470, 878], "odt": 99, "memory_map": [100, 104, 108], "v2": [100, 108], "greatli": [100, 108], "repeat": [100, 108, 413, 415, 546], "o": [100, 108, 311, 451, 485, 546, 708, 859, 901, 917], "page": [100, 104, 108, 110, 240, 546, 555, 604, 638, 917], "give": [100, 104, 108, 109, 110, 169, 240, 321, 380, 415, 546, 555, 589, 638, 721, 791, 917], "That": [100, 585, 638], "filenam": 100, "my_fil": 100, "write_ipc": [100, 240], "read_ndjson": 102, "parallelstrategi": [104, 110], "use_statist": [104, 110], "awar": [104, 160, 186, 202, 240, 471, 879], "stabl": [104, 129, 187, 240, 589, 638], "row_group": [104, 110], "read_tabl": 104, "with_column_nam": 106, "push": [106, 108, 109, 110, 111], "down": [106, 108, 109, 110, 111, 361, 546, 765, 917], "therebi": [106, 108, 109, 110], "potenti": [106, 108, 109, 110], "overhead": [106, 108, 109, 110], "updat": [106, 240, 638], "realloc": [106, 108, 109, 137, 240, 646, 917], "my_long_fil": 106, "doesn": [106, 348, 546, 753, 907, 917], "thing": [106, 492, 513], "less": [106, 163, 240, 457, 463, 468, 474, 581, 638, 865, 871, 876, 882], "limit": [106, 139, 240, 291, 300, 301, 302, 357, 362, 546, 570, 577, 604, 638, 698, 699, 700, 762, 917], "breezah": 106, "languag": [106, 148, 149, 163, 213, 240, 334, 338, 343, 419, 420, 421, 422, 423, 425, 426, 427, 546, 575, 576, 581, 638, 738, 742, 747], "terribl": 106, "mydf": 106, "lambda": [106, 125, 142, 176, 222, 240, 252, 289, 349, 350, 351, 388, 389, 418, 494, 505, 506, 507, 514, 521, 529, 535, 546, 585, 592, 622, 638, 647, 685, 755, 756, 757, 917], "raw_filesystem": 107, "adjust": [107, 349, 350, 351, 439, 546, 755, 756, 757, 847, 917], "subtreefilesystem": 107, "reli": 107, "mention": 107, "ensur": [107, 117, 118, 120, 147, 175, 185, 240, 367, 489, 546, 574, 585, 638, 898, 905, 917], "gcsf": 107, "pyfilesystem": 107, "fsspechandl": 107, "gcsfilesystem": 107, "token": 107, "pa_f": 107, "adlf": 107, "azureblobfilesystem": 107, "account_nam": 107, "account_kei": 107, "allow_pyarrow_filt": 111, "lead": [111, 240, 431, 458, 470, 474, 480, 489, 502, 522, 525, 532, 546, 585, 622, 638, 837, 866, 878, 882, 917], "comparison": 111, "dset": 111, "folder": 111, "1970": 111, "out": [112, 149, 240, 274, 288, 293, 369, 372, 446, 448, 546, 576, 603, 604, 638, 670, 684, 688, 854, 856], "stdout": [112, 146, 240], "14": [112, 125, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 240, 324, 366, 546, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 742], "platform": 112, "linux": 112, "microsoft": 112, "standard": [112, 196, 240, 324, 350, 425, 439, 444, 455, 533, 546, 607, 638, 724, 756, 847, 851, 863, 917], "wsl2": 112, "x86_64": 112, "glibc2": 112, "main": 112, "jul": [112, 471, 879], "56": [112, 482, 546], "gcc": 112, "20210110": 112, "23": [112, 148, 149, 240, 317, 322, 338, 509, 575, 576, 638, 717, 722], "check_dtyp": [113, 114], "check_exact": [113, 114], "rtol": [113, 114], "1e": [113, 114], "atol": [113, 114], "nans_compare_equ": [113, 114], "check_column_ord": 113, "check_row_ord": 113, "assertionerror": [113, 114], "compar": [113, 114, 143, 240, 493, 834, 917], "exactli": [113, 114, 117, 118, 467, 468, 842, 875, 876, 917], "toler": [113, 114, 163, 240, 581, 638], "inexact": [113, 114], "assert": [113, 114, 116, 117, 118, 149, 240, 555, 576, 638, 767, 917], "irrespect": 113, "unsort": 113, "check_nam": 114, "s1": [114, 142, 240, 899, 908, 917], "searchstrategi": [115, 117, 118], "null_prob": [115, 117, 118], "percentag": [115, 117, 118, 407, 546, 810, 917], "chanc": [115, 117, 118], "flag": [115, 431, 546, 566, 585, 638, 837, 917], "hypothesi": [115, 116, 117, 118, 924], "sampled_from": 115, "unique_small_int": 115, "ccy": 115, "gbp": 115, "eur": [115, 130, 146, 240], "jpy": 115, "min_col": [116, 117], "max_col": [116, 117], "suitabl": [116, 430, 546, 833, 917], "standalon": [116, 117], "itself": [116, 583, 638], "mincol": 116, "exact": [116, 117, 118, 193, 240, 471, 879], "especi": 116, "punctuat": 116, "test_special_char_colname_init": 116, "z": [116, 117, 135, 156, 158, 162, 169, 240, 267, 298, 363, 415, 471, 546, 580, 589, 605, 638, 694, 762, 879, 917], "test_unique_xyz": 116, "assert_someth": 116, "min_siz": [117, 118], "max_siz": [117, 118], "include_col": 117, "allow_infin": [117, 118], "allowed_dtyp": [117, 118], "excluded_dtyp": [117, 118], "describ": [117, 146, 240, 917], "desir": 117, "ignor": [117, 118, 167, 197, 240, 270, 312, 337, 349, 350, 351, 403, 404, 546, 666, 711, 741, 755, 756, 757, 806, 807, 917], "n_chunk": [117, 118, 240, 917], "randomis": 117, "onto": 117, "independ": [117, 118], "either": [117, 149, 164, 167, 175, 185, 197, 240, 576, 583, 638], "pct": 117, "preced": 117, "disallow": [117, 118], "exclud": [117, 118, 307, 310, 367, 499, 532, 546, 772, 787, 917], "deploi": [117, 118], "characterist": [117, 118], "directli": [117, 118, 349, 350, 351, 546, 638, 755, 756, 757, 917], "concret": [117, 118], "test_repr": [117, 118], "isinst": [117, 118, 240], "repr": [117, 118], "known": [117, 622], "df_strategi": 117, "15836": 117, "1755e": 117, "38": 117, "575050513": 117, "constructor": 118, "max_data_s": 118, "distinct": [118, 175, 240, 290, 412, 510, 546, 686, 815, 917], "54666": 118, "6414": 118, "63290": 118, "pool": 119, "toggl": [120, 471, 879], "scope": 122, "lifetim": 122, "initi": [122, 505, 514], "whatev": 122, "were": 122, "enter": 122, "set_verbos": 122, "do_various_th": 122, "restor": 122, "nan_as_nul": 124, "_pyarrowdatafram": 124, "nullabl": 124, "extens": [124, 205, 240, 899, 917], "propag": [124, 167, 197, 240, 403, 404, 546, 806, 807, 917], "return_dtyp": [125, 240, 252, 388, 494, 521, 546, 647, 917], "inference_s": [125, 240], "256": [125, 240, 810, 917], "user": [125, 176, 222, 240, 252, 431, 494, 546, 592, 622, 638, 647, 837, 917], "udf": [125, 176, 222, 240, 252, 494, 546, 592, 622, 638, 647, 917], "logic": [125, 222, 240, 484, 546, 573, 580, 595, 619, 622, 638, 900, 917], "almost": [125, 222, 240, 622], "_significantly_": [125, 222, 240, 622], "intens": [125, 222, 240, 622], "becaus": [125, 135, 148, 164, 211, 222, 240, 271, 575, 622, 638, 647, 667, 754, 917], "forc": [125, 163, 222, 240, 580, 581, 622, 638], "materi": [125, 222, 240, 593, 622, 638], "parallelis": [125, 222, 240, 622], "optimis": [125, 222, 240, 622, 638, 835, 836, 917], "wherev": [125, 222, 240, 252, 546, 622], "strongli": [125, 185, 222, 240, 252, 546, 622], "achiev": [125, 222, 240, 252, 546, 622], "best": [125, 222, 240, 252, 546, 622], "tri": [125, 240], "arbitrarili": [125, 240], "rearrang": [125, 240], "preserv": [125, 205, 240, 436, 546, 844, 899, 917], "syntax": [125, 173, 240, 602, 638, 917], "column_1": [125, 208, 240], "scalar": [125, 159, 240, 430, 494, 546, 790, 833, 917], "ident": [126, 127, 240, 559, 560, 638, 697, 701, 917], "cheap": [126, 127, 240, 559, 560, 638, 646, 697, 701, 917], "deepcopi": [126, 127, 240, 559, 560, 638, 697, 701, 917], "13": [126, 127, 138, 139, 145, 149, 154, 164, 172, 217, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 240, 418, 420, 500, 505, 514, 537, 546, 559, 560, 569, 570, 576, 583, 616, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 638, 647, 742, 747, 748, 917], "clear": [127, 240, 560, 638, 701, 917], "properti": [128, 134, 152, 188, 190, 216, 240, 555, 562, 565, 598, 615, 638], "appl": [128, 153, 162, 181, 183, 201, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 240, 409, 417, 450, 469, 477, 546, 580, 596, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 638, 858, 877], "banana": [128, 201, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 240, 409, 417, 477, 546, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633], "pearson": [129, 240, 380, 439, 502, 527, 546, 791, 847, 917], "correl": [129, 240, 502, 527, 532], "coeffici": [129, 240, 439, 546, 847, 917], "corrcoef": [129, 240], "summari": [130, 240, 710, 917], "glimps": [130, 151, 240], "usd": [130, 146, 240], "2020": [130, 146, 149, 240, 318, 320, 323, 325, 326, 328, 330, 333, 337, 340, 341, 471, 576, 638, 718, 720, 723, 729, 731, 734, 737, 741, 744, 879], "null_count": [130, 133, 240, 311, 546, 708, 710, 917], "266667": [130, 240], "666667": [130, 167, 214, 228, 240, 349, 546, 614, 628, 638], "std": [130, 240, 418, 546, 638, 710, 828, 917], "101514": [130, 240], "707107": [130, 240, 350, 546, 756, 917], "57735": [130, 240], "median": [130, 177, 240, 421, 546, 617, 638, 824, 917], "more_column": [131, 136, 210, 240, 352, 512, 546, 563, 567, 612, 638], "Or": [131, 147, 148, 149, 163, 195, 213, 220, 240, 406, 442, 499, 538, 546, 563, 574, 575, 576, 581, 606, 620, 638], "subset": [133, 173, 209, 240, 564, 611, 638], "snippet": [133, 240, 564, 638], "is_nul": [133, 240, 546, 564, 638, 917], "sizeunit": [135, 240, 754, 917], "heap": [135, 240, 754, 917], "its": [135, 240, 317, 338, 343, 717, 742, 747, 754, 917], "bitmap": [135, 240, 754, 917], "therefor": [135, 240, 289, 754, 917], "structarrai": [135, 240, 754, 917], "constant": [135, 149, 240, 355, 546, 576, 638, 754, 760, 917], "unchang": [135, 240, 252, 484, 546, 585, 622, 638, 754, 900, 917], "visibl": [135, 240, 754, 917], "capac": [135, 193, 240, 754, 842, 917], "ffi": [135, 240, 754, 917], "kb": [135, 240, 754, 917], "mb": [135, 240, 754, 917], "gb": [135, 240, 754, 917], "tb": [135, 240, 754, 917], "scale": [135, 240, 754, 917], "revers": [135, 240, 285, 306, 307, 308, 309, 310, 389, 409, 477, 546, 638, 704, 705, 706, 707, 917], "1_000_000": [135, 240, 754, 917], "25888898": [135, 240], "689577102661133": [135, 240], "long": [136, 169, 211, 240, 567, 589, 638], "letter": [136, 225, 234, 240, 352, 512, 546, 567, 625, 634, 638], "faster": [137, 211, 240, 252, 418, 459, 487, 546, 603, 604, 638, 646, 647, 821, 867, 917], "onlin": [137, 240, 646, 917], "rerun": [137, 240, 646, 917], "latter": [137, 240, 646, 917], "fill_valu": [138, 192, 211, 240, 356, 433, 546, 569, 601, 638, 761, 840, 917], "Not": [138, 240, 373, 375, 390, 546, 569, 638], "To": [138, 240, 314, 315, 357, 522, 525, 535, 546, 569, 638], "fillnullstrategi": [139, 240, 357, 546, 570, 638, 762, 917], "matches_supertyp": [139, 240, 570, 638], "forward": [139, 163, 240, 357, 362, 546, 570, 581, 638, 762, 917], "consecut": [139, 240, 291, 357, 362, 445, 546, 570, 638, 762, 853, 917], "supertyp": [139, 240, 251, 546, 570, 638], "fill_nan": [139, 240, 546, 638, 917], "OR": [140, 240, 493, 571, 638], "reduct": [142, 240], "supercast": [142, 240], "similar": [142, 163, 240, 406, 546, 581, 638], "parent": [142, 240], "rule": [142, 240, 341, 745], "arithmet": [142, 240], "zip_with": [142, 240, 917], "foo11": [142, 240], "bar22": [142, 240], "null_equ": [143, 240, 834, 917], "retriev": [144, 240, 265, 266, 475, 661, 662, 883], "return_as_str": [146, 240], "preview": [146, 240], "nice": [146, 240], "few": [146, 240], "rather": [146, 163, 240, 474, 581, 638, 882], "head": [146, 165, 198, 240, 251, 383, 546, 584, 638, 793, 917], "tail": [146, 151, 240, 251, 439, 546, 638, 847, 917], "intoexpr": [147, 148, 149, 189, 195, 217, 220, 240, 406, 442, 496, 498, 501, 505, 514, 531, 534, 546, 574, 575, 576, 599, 606, 620, 638], "more_bi": [147, 175, 195, 240, 442, 546, 574, 606, 638], "maintain_ord": [147, 175, 177, 209, 213, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 240, 247, 252, 480, 486, 503, 546, 561, 566, 568, 574, 593, 602, 603, 604, 611, 621, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 638, 902, 917], "consist": [147, 175, 240, 471, 574, 638, 879], "agg": [147, 148, 149, 240, 247, 252, 358, 360, 441, 442, 480, 491, 503, 546, 561, 566, 568, 574, 575, 576, 593, 602, 638], "anoth": [147, 240, 288, 311, 316, 546, 574, 617, 638, 647, 684, 708, 716, 834, 917], "index_column": [148, 149, 240, 575, 576, 638], "truncat": [148, 240, 575, 593, 638], "include_boundari": [148, 240, 575, 638], "start_bi": [148, 240, 575, 638], "startbi": [148, 240, 575, 638], "dynamicgroupbi": [148, 240], "normal": [148, 240, 348, 380, 439, 546, 575, 638, 753, 791, 847, 917], "groupbi": [148, 149, 173, 240, 247, 252, 271, 311, 358, 360, 406, 441, 442, 480, 491, 494, 503, 546, 561, 566, 568, 575, 576, 593, 602, 638, 667, 708, 917], "member": [148, 240, 575, 638, 779, 917], "seen": [148, 240, 291, 362, 546, 575, 638], "roll": [148, 149, 240, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 500, 546, 575, 576, 638, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 917], "slot": [148, 240, 270, 311, 312, 546, 575, 638, 666, 708, 711, 917], "1n": [148, 149, 163, 213, 240, 334, 338, 343, 419, 420, 421, 422, 423, 425, 426, 427, 546, 575, 576, 581, 638, 738, 742, 747], "nanosecond": [148, 149, 163, 213, 240, 334, 338, 339, 343, 419, 420, 421, 422, 423, 425, 426, 427, 510, 546, 575, 576, 581, 638, 738, 742, 743, 747], "1u": [148, 149, 163, 213, 240, 334, 338, 343, 419, 420, 421, 422, 423, 425, 426, 427, 546, 575, 576, 581, 638, 738, 742, 747], "microsecond": [148, 149, 163, 213, 240, 334, 338, 339, 343, 419, 420, 421, 422, 423, 425, 426, 427, 509, 510, 546, 575, 576, 581, 593, 638, 738, 742, 747], "1m": [148, 149, 163, 213, 240, 325, 326, 328, 333, 334, 338, 340, 343, 419, 420, 421, 422, 423, 425, 426, 427, 546, 575, 576, 581, 638, 729, 731, 737, 738, 742, 744, 747], "millisecond": [148, 149, 163, 213, 240, 334, 338, 343, 419, 420, 421, 422, 423, 425, 426, 427, 510, 546, 575, 576, 581, 638, 738, 742, 747], "1h": [148, 149, 163, 213, 240, 334, 338, 343, 419, 420, 421, 422, 423, 425, 426, 427, 546, 575, 576, 581, 638, 722, 738, 742, 747], "1w": [148, 149, 163, 213, 240, 334, 338, 343, 419, 420, 421, 422, 423, 425, 426, 427, 546, 575, 576, 581, 638, 738, 742, 747], "week": [148, 149, 163, 213, 240, 334, 338, 343, 345, 419, 420, 421, 422, 423, 425, 426, 427, 510, 546, 575, 576, 581, 638, 738, 742, 747, 749], "month": [148, 149, 163, 213, 240, 319, 334, 338, 343, 419, 420, 421, 422, 423, 425, 426, 427, 508, 509, 546, 575, 576, 581, 638, 719, 738, 742, 747], "1y": [148, 149, 163, 213, 240, 334, 338, 343, 419, 420, 421, 422, 423, 425, 426, 427, 546, 575, 576, 581, 638, 738, 742, 747, 751], "1i": [148, 149, 163, 213, 240, 334, 419, 420, 421, 422, 423, 425, 426, 427, 546, 575, 576, 581, 638, 738], "10i": [148, 149, 240, 575, 576, 638], "ascend": [148, 149, 240, 575, 576, 638], "often": [148, 149, 240, 269, 415, 546, 575, 576, 638, 665], "dynam": [148, 240, 419, 420, 421, 422, 423, 425, 426, 427, 546, 575, 638], "matter": [148, 149, 160, 186, 202, 240, 575, 576, 638], "neg": [148, 151, 191, 192, 194, 198, 240, 283, 284, 432, 433, 440, 465, 546, 575, 600, 601, 605, 618, 638, 679, 680, 839, 840, 848, 873, 917], "_lower_bound": [148, 240, 575, 638], "_upper_bound": [148, 240, 575, 638], "impact": [148, 240, 575, 638], "harder": [148, 240, 575, 638], "side": [148, 149, 240, 367, 419, 420, 421, 422, 423, 425, 426, 427, 430, 546, 575, 576, 638, 772, 833, 917], "inclus": [148, 149, 240, 367, 419, 420, 421, 422, 423, 425, 426, 427, 466, 467, 546, 575, 576, 638, 772, 874, 875, 917], "datapoint": [148, 240, 575, 638], "mondai": [148, 240, 345, 575, 638, 749], "date_rang": [148, 213, 240, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 575, 638, 716, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751], "30m": [148, 240, 338, 343, 575, 638, 742, 747], "time_min": [148, 240, 575, 638], "time_max": [148, 240, 575, 638], "boundari": [148, 240, 300, 301, 302, 546, 575, 638, 698, 699, 700, 917], "time_count": [148, 240, 575, 638], "_lower_boundari": [148, 240, 575, 638], "_upper_boundari": [148, 240, 575, 638], "lower_bound": [148, 240, 546, 575, 638, 904, 917], "upper_bound": [148, 240, 289, 546, 575, 638, 796, 917], "time_agg_list": [148, 240, 575, 638], "idx": [148, 161, 240, 289, 575, 638, 685, 836, 917], "arang": [148, 211, 222, 240, 575, 622, 638], "2i": [148, 240, 575, 638], "3i": [148, 240, 575, 638], "a_agg_list": [148, 240, 575, 638], "rollinggroupbi": [149, 240], "dynamic_groupbi": [149, 240, 576, 638], "groupby_dynam": [149, 240, 576, 638], "45": [149, 240, 317, 338, 343, 447, 453, 576, 638, 717, 742, 747, 855, 861], "48": [149, 240, 576, 638], "18": [149, 240, 310, 338, 343, 346, 366, 379, 546, 576, 593, 638, 750], "19": [149, 163, 240, 338, 576, 581, 638, 742, 747], "43": [149, 240, 310, 546, 576, 638], "strptime": [149, 240, 341, 576, 638, 745], "2d": [149, 204, 240, 576, 638, 719], "sum_a": [149, 240, 576, 638], "min_a": [149, 240, 576, 638], "max_a": [149, 240, 576, 638], "to_list": [149, 240, 289, 576, 638, 685, 917], "seed": [150, 187, 240, 363, 429, 435, 546, 768, 832, 843, 917], "seed_1": [150, 240, 363, 546, 768, 917], "seed_2": [150, 240, 363, 546, 768, 917], "seed_3": [150, 240, 363, 546, 768, 917], "hash": [150, 240, 546, 917], "u64": [150, 240, 363, 414, 546, 593, 638, 768, 917], "10783150408545073287": [150, 240], "1438741209321515184": [150, 240], "10047419486152048166": [150, 240], "2047317070637311557": [150, 240], "last": [151, 163, 177, 195, 198, 209, 234, 240, 261, 264, 274, 287, 311, 319, 335, 344, 441, 468, 479, 536, 546, 581, 606, 609, 611, 634, 638, 656, 659, 670, 683, 708, 719, 739, 748, 876, 888, 917], "_except_": [151, 198, 240], "ab": [151, 198, 217, 240, 475, 476, 522, 525, 546, 616, 638, 917], "grown": [153, 240], "baz": [154, 155, 177, 210, 240, 466, 468, 579, 612, 638, 876], "intermedi": [155, 240, 579, 638, 771, 917], "linear": [155, 179, 232, 240, 267, 366, 393, 411, 423, 500, 501, 528, 546, 579, 594, 632, 638, 663, 771, 814, 826, 917], "mask": [156, 158, 240, 268, 292, 293, 368, 370, 378, 446, 448, 546, 664, 687, 688, 763, 772, 774, 777, 788, 811, 812, 835, 854, 856, 908, 917], "visual": [156, 158, 240], "buffer_s": [160, 240], "veri": [160, 208, 240, 252, 546, 560, 638, 701, 917], "fit": [160, 193, 211, 240, 434, 546, 841, 842, 917], "speedup": [160, 240], "signific": [160, 240, 252, 546], "4x": [160, 240], "disabl": [160, 240], "materialis": [160, 161, 185, 186, 240], "iter_row": [161, 185, 186, 240], "17_500": [161, 240], "klmnoopqrstuvwxyz": [161, 240], "__name__": [161, 240], "7500": [161, 240], "recordbatch": [161, 240], "15_000": [161, 240], "record_batch": [161, 240], "to_arrow": [161, 240, 917], "to_batch": [161, 240], "date32": [161, 240], "large_str": [161, 200, 205, 240], "15000": [161, 240], "2500": [161, 240], "left_on": [162, 163, 240, 580, 581, 638], "right_on": [162, 163, 240, 580, 581, 638], "joinstrategi": [162, 240, 580, 638], "suffix": [162, 163, 189, 217, 220, 240, 295, 373, 375, 376, 377, 406, 417, 450, 546, 580, 581, 599, 616, 617, 620, 638, 690, 858], "_right": [162, 163, 240, 580, 581, 638], "outer": [162, 240, 580, 638], "semi": [162, 240, 580, 638], "anti": [162, 240, 580, 638, 835, 836, 917], "cross": [162, 240, 580, 638], "join_asof": [162, 240, 580, 638], "stringcach": [162, 240, 555], "other_df": [162, 240, 580, 638], "by_left": [163, 240, 581, 638], "by_right": [163, 240, 581, 638], "asofjoinstrategi": [163, 240, 581, 638], "allow_parallel": [163, 240, 580, 581, 638], "force_parallel": [163, 240, 580, 581, 638], "asof": [163, 240, 581, 638], "asof_join": [163, 240], "search": [163, 240, 581, 638], "greater": [163, 240, 439, 468, 546, 581, 638, 847, 876, 917], "distanc": [163, 240, 581, 638], "plan": [163, 164, 240, 558, 566, 573, 580, 581, 595, 602, 619, 638], "gdp": [163, 240, 581, 638], "2016": [163, 240, 581, 638], "2017": [163, 240, 581, 638], "2018": [163, 240, 581, 638], "2019": [163, 240, 581, 638], "record": [163, 240, 581, 638], "jan": [163, 240, 581, 638], "1st": [163, 240, 581, 638], "4164": [163, 240, 581, 638], "4411": [163, 240, 581, 638], "4566": [163, 240, 581, 638], "4696": [163, 240, 581, 638], "popul": [163, 240, 581, 638], "12th": [163, 240, 581, 638], "82": [163, 240, 581, 638], "66": [163, 240, 581, 638, 826, 917], "83": [163, 240, 581, 638], "52": [163, 217, 240, 428, 546, 581, 616, 638], "request": [164, 240], "small": [164, 240, 338, 568, 638], "describe_plan": [164, 240, 638], "unoptim": [164, 240, 638], "describe_optimized_plan": [164, 240, 638], "show_graph": [164, 240, 638], "un": [164, 240], "graphviz": [164, 240, 602, 638], "advis": [164, 240], "axi": [166, 167, 169, 171, 197, 240, 589, 638], "null_strategi": [167, 197, 240], "nullstrategi": [167, 197, 240], "spam": [167, 240], "id_var": [169, 240, 589, 638], "value_var": [169, 240, 589, 638], "variable_nam": [169, 240, 589, 638], "value_nam": [169, 240, 589, 638], "unpivot": [169, 240, 589, 638], "leav": [169, 240, 589, 638], "identifi": [169, 175, 209, 240, 589, 611, 638], "massag": [169, 240, 589, 638], "measur": [169, 240, 589, 638], "merg": [170, 240, 590, 638], "caller": [170, 240, 289, 585, 590, 622, 638], "respons": [170, 240, 590, 638], "One": [173, 177, 240, 917], "what": [173, 240, 898, 907, 917], "struct": [173, 189, 207, 210, 217, 240, 289, 390, 454, 467, 468, 489, 505, 506, 507, 521, 546, 599, 612, 616, 638, 685, 862, 875, 876], "pack": [173, 240], "expr_unique_subset": [173, 240], "df_nuniqu": [173, 240], "df_agg_nuniqu": [173, 240], "simpl": [173, 240], "func": [176, 240, 592, 638], "offer": [176, 240, 546, 592, 638], "recommend": [176, 240], "fulli": [176, 187, 240], "advantag": [176, 240], "cast_str_to_int": [176, 240, 592, 638], "col_nam": [176, 240, 592, 638], "tdf": [176, 240, 592, 638], "aggregate_funct": [177, 240], "pivotagg": [177, 240], "sort_column": [177, 240], "predefin": [177, 240], "predict": [177, 180, 213, 240], "transpos": [177, 240], "discoveri": [177, 240], "interpol": [179, 232, 240, 357, 393, 411, 423, 528, 546, 594, 632, 638, 814, 826, 917], "rollinginterpolationmethod": [179, 232, 240, 411, 423, 528, 546, 594, 632, 638, 814, 826, 917], "midpoint": [179, 232, 240, 411, 423, 528, 546, 594, 632, 638, 814, 826, 917], "old": [181, 240, 596, 638], "new_col": [182, 240], "by_pred": [185, 240], "accord": [185, 240, 390, 546, 724], "never": [185, 240], "mutual": [185, 240], "exclus": [185, 240], "addition": [185, 240], "clariti": [185, 240], "anyth": [185, 240], "toomanyrowsreturn": [185, 240, 555], "norowsreturn": [185, 240, 555], "inherit": [185, 240], "rowsexcept": [185, 240, 555], "frac": [187, 240, 349, 350, 351, 429, 439, 485, 546, 755, 756, 757, 832, 847, 901, 917], "with_replac": [187, 240, 429, 546, 832, 917], "shuffl": [187, 222, 240, 429, 546, 622, 832, 917], "neither": [187, 240], "nor": [187, 240], "modul": [187, 240, 429, 435, 545, 546, 832, 843, 917], "more_expr": [189, 217, 240, 406, 498, 531, 546, 599, 616, 638], "named_expr": [189, 217, 240, 531, 534, 599, 616, 638], "threshold": [189, 240, 599, 638], "set_auto_structifi": [189, 217, 240, 599, 616, 638], "is_odd": [189, 240, 599, 638], "_is_odd": [189, 240, 599, 638], "shift_and_fil": [191, 240, 546, 638, 917], "shift": [192, 240, 270, 312, 407, 433, 500, 546, 601, 638, 666, 711, 810, 840, 917], "shrink": [193, 240, 434, 546, 841, 842, 917], "hold": [193, 240], "nulls_last": [195, 240, 261, 264, 441, 546, 606, 638, 656, 659, 917], "ddof": [196, 214, 240, 444, 490, 502, 527, 532, 533, 537, 546, 607, 614, 638, 851, 906, 917], "deviat": [196, 240, 350, 425, 444, 533, 546, 607, 638, 756, 851, 917], "degre": [196, 214, 240, 444, 490, 502, 527, 532, 546, 851, 906, 917], "freedom": [196, 214, 240, 444, 490, 502, 527, 532, 546, 851, 906, 917], "816497": [196, 240], "21": [197, 240, 516], "16a": [197, 240], "27b": [197, 240], "38c": [197, 240], "nth": [199, 240, 468, 481, 546, 610, 638, 876, 890, 917], "mostli": [200, 240, 358, 546], "categoricaltyp": [200, 240], "as_seri": [201, 240], "fruit": [201, 240, 409, 417, 450, 469, 477, 546, 858, 877], "car": [201, 240, 409, 417, 477, 546], "beetl": [201, 240, 409, 417, 477, 546], "audi": [201, 240, 409, 417, 477, 546], "28": [201, 240, 346, 750], "300": [201, 240, 822, 823, 825, 917], "re": [204, 240], "ll": [204, 240], "numpy_arrai": [204, 240], "use_pyarrow_extension_arrai": [205, 240, 899, 917], "trigger": [205, 240, 899, 917], "sent": [205, 240, 898, 899, 917], "pandas_df1": [205, 240], "pandas_df2": [205, 240], "pandas_df2_pa": [205, 240], "na": [205, 240, 899, 917], "four": [207, 240], "five": [207, 240], "include_head": [208, 240], "header_nam": [208, 240], "column_nam": [208, 240], "perhap": [208, 240], "column_2": [208, 240], "name_gener": [208, 240, 289, 685], "base_nam": [208, 240], "my_column_": [208, 240], "my_column_0": [208, 240], "my_column_1": [208, 240], "my_column_2": [208, 240], "uniquekeepstrategi": [209, 240, 611, 638], "decompos": [210, 240, 612, 638], "t_a": [210, 240, 612, 638], "t_b": [210, 240, 612, 638], "t_c": [210, 240, 612, 638], "t_d": [210, 240, 612, 638], "womp": [210, 240, 612, 638], "t_": [210, 240, 612, 638], "t_struct": [210, 240, 612, 638], "step": [211, 240, 495], "unstackdirect": [211, 240], "much": [211, 240, 288, 311, 546, 684, 708, 917], "pivot": [211, 240], "phase": [211, 240], "subject": [211, 240], "ascii_uppercas": [211, 240], "col1": [211, 240, 638], "col2": [211, 240, 638], "h": [211, 240, 341, 434, 471, 546, 879], "col1_0": [211, 240], "col1_1": [211, 240], "col1_2": [211, 240], "col2_0": [211, 240], "col2_1": [211, 240], "col2_2": [211, 240], "syntact": [212, 240, 507, 512, 513, 517, 528, 531, 535, 613, 638, 850, 917], "sugar": [212, 240, 507, 512, 513, 517, 528, 531, 535, 613, 638, 850, 917], "coalesc": [212, 240, 613, 638], "400": [212, 240, 613, 638, 822, 823, 825, 917], "600": [212, 240, 613, 638], "700": [212, 240, 613, 638], "new_df": [212, 240, 613, 638], "time_column": [213, 240], "frequenc": [213, 240], "forward_fil": [213, 240, 307, 310, 546], "06": [213, 240, 317, 324, 336, 337, 347, 742, 749], "varianc": [214, 240, 351, 380, 427, 490, 537, 546, 614, 638, 757, 791, 830, 906, 917], "grow": [215, 240], "is_not": [217, 240, 546, 616, 638], "not_c": [217, 240, 616, 638], "diff": [217, 240, 320, 323, 326, 328, 330, 333, 340, 546, 616, 638, 720, 723, 729, 731, 734, 737, 744, 917], "_diff": [217, 240, 616, 638], "row_nr": [218, 240, 390, 546, 618, 638, 836, 917], "more_agg": [220, 620], "named_agg": [220, 620], "_sum": [220, 620], "_mean_squar": [220, 620], "b_sum": [220, 620], "c_mean_squar": [220, 620], "17": [220, 428, 516, 546, 620, 702, 742, 917], "sub": [222, 295, 296, 450, 469, 690, 691, 858, 877], "triangl": [222, 622], "group_df": [222, 622], "nr": [225, 234, 625, 634], "maxim": [227, 259, 546, 627, 654, 917], "833333": [228, 628], "minim": [230, 260, 266, 434, 546, 630, 655, 662, 801, 841, 917], "overview": [240, 546, 555, 638, 917], "public": [240, 546, 555, 638, 917], "frameinittyp": [240, 638], "variou": [240, 546, 638, 917], "entri": [240, 638], "prevent": [240, 309, 310, 379, 478, 546, 638, 706, 707, 887, 917], "come": [240, 380, 546, 556, 637, 638, 791, 917], "behavior": [240, 252, 288, 494, 522, 525, 546, 684], "mydatafram": 240, "notic": [240, 638, 917], "df4": 240, "df5": 240, "df6": 240, "corr": [240, 527, 532], "drop_in_plac": 240, "drop_nul": [240, 314, 546, 638, 917], "estimated_s": [240, 917], "explod": [240, 360, 416, 546, 638, 819, 917], "find_idx_by_nam": 240, "fold": [240, 397, 498, 505, 506, 529, 535], "frame_equ": [240, 338, 343], "get_column": [240, 535], "groupby_rol": [240, 419, 420, 421, 422, 423, 425, 426, 427, 546, 575, 638], "hash_row": 240, "hstack": 240, "insert_at_idx": 240, "is_dupl": [240, 546, 917], "is_empti": [240, 917], "is_uniqu": [240, 546, 917], "iter_slic": 240, "melt": [240, 638], "merge_sort": [240, 638], "n_uniqu": [240, 546, 917], "pipe": [240, 546, 638], "quantil": [240, 423, 546, 638, 826, 917], "replace_at_idx": 240, "shrink_to_fit": [240, 917], "take_everi": [240, 546, 638, 917], "to_dict": 240, "to_numpi": [240, 388, 546, 917], "to_panda": [240, 917], "to_struct": 240, "unnest": [240, 467, 468, 476, 638, 875, 876], "unstack": 240, "upsampl": 240, "write_avro": 240, "write_databas": 240, "write_excel": 240, "write_json": [240, 595, 638], "write_parquet": 240, "94": [247, 546], "confus": [249, 373, 375, 546], "tt": [249, 546], "tf": [249, 250, 546], "ff": [249, 250, 546], "upcast": [251, 546], "skip_nul": [252, 546, 647, 917], "pass_nam": [252, 546], "applystrategi": [252, 546], "thread_loc": [252, 546], "assum": [252, 546, 585, 622, 638], "considd": [252, 546], "code": [252, 431, 546, 583, 638, 837, 917], "amount": [252, 546], "releas": [252, 546], "gil": [252, 546], "discourag": [252, 546], "loop": [252, 546], "a_times_2": [252, 546], "invers": [253, 254, 255, 256, 257, 258, 546, 648, 649, 650, 651, 652, 653, 917], "cosin": [253, 254, 303, 304, 388, 546, 648, 649, 702, 703, 917], "570796": [253, 255, 546, 648, 650, 917], "hyperbol": [254, 256, 258, 304, 438, 483, 546, 649, 651, 653, 703, 846, 892, 917], "sine": [255, 256, 388, 437, 438, 546, 650, 651, 845, 846, 917], "881374": [256, 546, 651, 917], "tangent": [257, 258, 482, 483, 546, 652, 653, 891, 892, 917], "785398": [257, 546, 652, 917], "arg_wher": [262, 546], "arg_sort": [264, 546, 659, 917], "favour": [264, 354, 546, 659, 759, 917], "sublist": [265, 266, 268, 270, 273, 274, 275, 276, 277, 284, 287, 288, 661, 662, 664, 666, 669, 670, 671, 672, 673, 680, 683, 684, 685, 779, 917], "membership": [268, 664], "listcol": 269, "number_of_two": 269, "null_behavior": [270, 312, 546, 666, 711, 917], "nullbehavior": [270, 312, 546, 666, 711, 917], "th": [270, 312, 439, 546, 666, 711, 847, 917], "against": [271, 638, 667, 923], "blindli": [271, 667], "worth": [271, 667], "enough": [271, 439, 546, 667, 847, 917], "concat_list": [271, 511, 667], "rank": [271, 502, 511, 532, 546, 667, 917], "exprnamespac": 272, "reshap": [272, 546, 668, 917], "flat": [272, 416, 546, 668, 819, 917], "taken": [284, 465, 480, 546, 680, 873], "null_on_oob": [288, 684], "cheaper": [288, 684], "n_field_strategi": [289, 685], "tostructstrategi": [289, 685], "first_non_nul": [289, 685], "max_width": [289, 685], "field_0": [289, 685], "field_1": [289, 685], "field_n": [289, 685], "know": [289, 459, 867, 898, 907, 917], "incorrectli": 289, "downstream": [289, 431, 546, 837, 917], "advic": 289, "col_name_": [289, 685], "col_name_0": [289, 685], "col_name_1": [289, 685], "col_name_2": [289, 685], "substr": [292, 295, 296, 446, 450, 461, 462, 466, 467, 468, 469, 687, 690, 691, 854, 858, 869, 870, 874, 875, 876, 877], "transferencod": [293, 294, 448, 449, 688, 689, 856, 857], "strict": [293, 297, 446, 448, 460, 471, 546, 688, 692, 834, 854, 856, 868, 879, 917], "hex": [293, 294, 448, 449, 460, 688, 689, 856, 857, 868], "base64": [293, 294, 448, 449, 688, 689, 856, 857], "prefix": [296, 469, 474, 546, 691, 877, 882], "due": [297, 546, 692, 917], "overflow": [297, 309, 310, 460, 478, 546, 692, 706, 707, 868, 887, 917], "categoricalord": [298, 694], "lexic": [298, 694], "k": [298, 380, 485, 546, 694, 791, 901, 917], "min_val": [300, 302, 546, 698, 700, 917], "max_val": [300, 301, 546, 698, 699, 917], "foo_clip": [300, 301, 302, 546], "clip": [301, 302, 546, 699, 700, 917], "543081": [304, 546, 703, 917], "cumul": [306, 307, 308, 309, 310, 505, 506, 507, 546, 704, 705, 706, 707, 917], "a_revers": [306, 307, 308, 309, 310, 389, 417, 477, 546], "value_cummax": [307, 546], "value_cummax_all_fil": [307, 546], "uint16": [309, 310, 478, 546, 706, 707, 887, 917], "value_cumsum": [310, 546], "value_cumsum_all_fil": [310, 546], "min_period": [311, 349, 350, 351, 418, 419, 420, 421, 422, 423, 425, 426, 427, 546, 708, 755, 756, 757, 821, 822, 823, 824, 825, 826, 828, 829, 830, 917], "slide": [311, 546, 708, 917], "realli": [311, 546, 708, 917], "complex": [311, 485, 546, 708, 901, 917], "visit": [311, 546, 708, 917], "44": [313, 546], "drop_nan": [315, 546, 917], "tu": [316, 317, 321, 342, 346, 716, 717, 721, 741, 746, 750], "lose": [316, 716], "2001": [316, 319, 321, 322, 324, 329, 331, 334, 335, 336, 338, 339, 342, 343, 344, 345, 346, 347, 471, 716, 719, 721, 722, 725, 726, 727, 728, 730, 732, 733, 735, 736, 738, 739, 740, 742, 743, 745, 746, 747, 748, 749, 750, 751, 879], "tu_m": [316, 716], "tu_n": [316, 716], "tm": [317, 717], "naiv": [317, 717], "compon": [317, 339, 471, 510, 717, 743], "resolv": 317, "59": [317, 329, 339, 509, 717, 733, 743], "456000": [317, 717], "101000": 317, "456": [317, 717, 896, 917], "101": [317, 460, 868], "d1": 317, "d2": 317, "d3": 317, "utc": [318, 337, 471, 718, 741, 879], "tz": [318, 337, 718, 741], "europ": [318, 337, 718, 741], "london": [318, 337, 718, 741], "gmt": [318, 337, 718, 741], "bst": [318, 337, 718, 741], "extract": [319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 339, 340, 344, 345, 347, 453, 454, 455, 546, 719, 720, 722, 723, 724, 728, 729, 730, 731, 733, 734, 735, 736, 737, 739, 740, 743, 744, 748, 749, 751, 861, 862, 863], "weekdai": [319, 335], "day_of_month": [319, 335, 345], "ordinal_dai": [319, 345], "day_of_year": [319, 335, 345], "days_diff": 320, "epochtimeunit": [321, 516, 721], "unix": [321, 516, 721], "epoch_n": [321, 721], "epoch_": [321, 721], "978307200000000": [321, 342, 721, 746], "978307200": [321, 721], "978393600000000": [321, 342, 721, 746], "978393600": [321, 721], "978480000000000": [321, 342, 721, 746], "978480000": [321, 721], "hours_diff": 323, "iso": [324, 344, 345, 724, 748, 749], "correspond": [324, 412, 546, 724, 815, 917], "2006": [324, 334, 738], "180": [324, 336, 347], "2002": [324, 334, 336, 347, 738, 751], "2004": [324, 334, 738], "2005": [324, 334, 738], "1001": [325, 326, 328, 333], "002": [325, 326, 328, 333, 510, 729, 731, 737], "2000": [325, 334, 738], "003": [325, 326, 328, 333], "3000": 325, "997": [325, 326, 328, 333], "997000": 325, "998": [325, 326, 328, 333], "998000": 325, "999": [325, 326, 328, 333], "999000": 325, "microseconds_diff": 326, "milliseconds_diff": 328, "minutes_diff": 330, "1440": [330, 734], "nanoseconds_diff": 333, "1000000": [333, 474, 737], "leap": [334, 738], "minu": [334, 738], "dictat": [334, 738], "date_plus_1i": [334, 738], "1y2mo": [334, 738], "date_min": 334, "1998": [334, 738], "1999": [334, 738], "2003": [334, 516, 738], "ordin": [335, 412, 546, 739, 815, 917], "366": [335, 739], "convert_time_zon": [337, 741], "timestamp": [337, 516, 741], "unset": [337, 741], "london_timezon": 337, "amsterdam": 337, "london_to_amsterdam": 337, "cet": 337, "cest": 337, "half": [338, 349, 350, 351, 546, 742, 755, 756, 757, 917], "225": [338, 343], "to_fram": [338, 343, 471, 835, 836, 875, 876, 879, 917], "10m": [338, 343, 742, 747], "milli": [339, 743], "micro": [339, 743], "456789": 339, "654321": 339, "111110": 339, "765431": 339, "sec": 339, "11111": 339, "seconds_diff": 340, "timestamp_n": [342, 746], "timestamp_m": 342, "978307200000": 342, "978393600000": 342, "978480000000": 342, "53": [344, 748], "sundai": [345, 749], "incorrect": [346, 431, 546, 622, 750, 837, 917], "tu_u": [346, 750], "32971": [346, 750], "32974": [346, 750], "32976": [346, 750], "718281828459045": [348, 385, 546, 753, 794, 917], "pk": [348, 546, 753, 917], "459148": [348, 546], "754888": [348, 546], "span": [349, 350, 351, 546, 755, 756, 757, 917], "half_lif": [349, 350, 351, 546, 755, 756, 757, 917], "ignore_nul": [349, 350, 351, 546, 755, 756, 757, 907, 917], "exponenti": [349, 350, 351, 353, 546, 755, 756, 757, 758, 917], "weight": [349, 350, 351, 418, 419, 420, 421, 422, 423, 425, 426, 427, 439, 546, 755, 756, 757, 821, 822, 823, 824, 825, 826, 828, 829, 830, 847, 917], "decai": [349, 350, 351, 546, 755, 756, 757, 917], "term": [349, 350, 351, 456, 459, 546, 755, 756, 757, 864, 867, 917], "mass": [349, 350, 351, 546, 755, 756, 757, 917], "gamma": [349, 350, 351, 546, 755, 756, 757, 917], "foral": [349, 350, 351, 546, 755, 756, 757, 917], "geq": [349, 350, 351, 546, 755, 756, 757, 917], "theta": [349, 350, 351, 546, 755, 756, 757, 917], "life": [349, 350, 351, 546, 755, 756, 757, 917], "exp": [349, 350, 351, 546, 755, 756, 757, 917], "ln": [349, 350, 351, 546, 755, 756, 757, 917], "smooth": [349, 350, 351, 546, 755, 756, 757, 917], "factor": [349, 350, 351, 484, 546, 755, 756, 757, 900, 917], "leq": [349, 350, 351, 546, 755, 756, 757, 917], "begin": [349, 350, 351, 452, 546, 755, 756, 757, 860, 917], "imbal": [349, 350, 351, 546, 755, 756, 757, 917], "ew": [349, 350, 351, 546, 755, 756, 757, 917], "w_i": [349, 350, 351, 546, 755, 756, 757, 917], "recurs": [349, 350, 351, 546, 755, 756, 757, 917], "y_0": [349, 350, 351, 546, 755, 756, 757, 917], "x_0": [349, 350, 351, 546, 755, 756, 757, 917], "y_t": [349, 350, 351, 546, 755, 756, 757, 917], "y_": [349, 350, 351, 546, 755, 756, 757, 917], "x_t": [349, 350, 351, 546, 755, 756, 757, 917], "observ": [349, 350, 351, 546, 755, 756, 757, 917], "x_2": [349, 350, 351, 546, 755, 756, 757, 917], "428571": [349, 546], "bia": [350, 351, 380, 424, 439, 546, 756, 757, 791, 827, 847, 917], "unbias": [350, 351, 546, 756, 757, 917], "963624": [350, 546, 756, 917], "928571": [351, 546, 757, 917], "wildcard": [352, 492, 499, 505, 506, 514, 529, 546], "regex": [352, 395, 446, 447, 450, 452, 453, 461, 462, 469, 512, 522, 525, 535, 546, 854, 855, 858, 860, 861, 869, 870, 877], "aa": [352, 512, 546], "ba": [352, 512, 546], "cc": [352, 512, 546], "718282": [353, 546], "389056": [353, 546], "54": [353, 546], "59815": [353, 546], "expand": [354, 394, 395, 415, 546, 759, 917], "arr": [354, 511, 539, 546, 759, 898, 909, 917], "exprlistnamespac": [354, 360, 416, 546], "exprstringnamespac": [354, 546], "pythonliter": [355, 546, 616, 638, 760, 917], "extrem": [355, 546, 760, 917], "group_col": [358, 491, 546], "g1": [358, 491, 546], "g2": [358, 491, 546], "lt": [358, 491, 546, 917], "gte": [358, 491, 546], "9774092659964970114": [363, 546], "13614470193936745724": [363, 546], "1101441246220388612": [363, 546], "11638928888656214026": [363, 546], "13382926553367784577": [363, 546], "cumsum": [365, 546, 578, 638, 917], "interpolationmethod": [366, 546, 771, 917], "regrid": [366, 546], "grid": [366, 546], "df_original_grid": [366, 546], "grid_point": [366, 546], "df_new_grid": [366, 546], "conflat": [367, 546], "finit": [369, 502, 532, 546, 776, 917], "primit": [371, 546, 898, 917], "optional_memb": [371, 546, 779, 917], "infinit": [372, 546, 780, 917], "_isnan": [373, 546], "b_isnan": [373, 546], "negat": [374, 546], "_is_not_nan": [375, 546], "b_is_not_nan": [375, 546], "_not_nul": [376, 546], "a_not_nul": [376, 546], "b_not_nul": [376, 546], "_isnul": [377, 546], "a_isnul": [377, 546], "b_isnul": [377, 546], "undo": [379, 399, 546], "duplicateerror": [379, 546, 555], "occurr": [379, 546], "333333": [379, 427, 546, 810, 830, 917], "fisher": [380, 439, 546, 791, 847, 917], "fourth": [380, 546, 791, 917], "central": [380, 439, 546, 791, 847, 917], "subtract": [380, 546, 791, 917], "distribut": [380, 439, 546, 791, 847, 917], "elimin": [380, 546, 791, 917], "bias": [380, 439, 546, 791, 847, 917], "scipi": [380, 439, 546, 791, 847, 917], "stat": [380, 439, 546, 791, 847, 917], "153061": [380, 546], "logarithm": [385, 386, 546, 794, 795, 917], "584963": [385, 546], "30103": [386, 546], "60206": [386, 546], "lowest": [387, 546], "9223372036854775808": [387, 546], "agg_list": [388, 546], "elementwis": [388, 418, 419, 420, 421, 422, 423, 425, 426, 427, 492, 493, 546, 821, 822, 823, 824, 825, 826, 828, 829, 830, 917], "third": [388, 546], "parti": [388, 546], "book": [388, 546], "argmax": [388, 546], "_revers": [389, 417, 477, 546], "b_revers": [389, 417, 477, 546], "remap": [390, 546, 797, 917], "lookup": [390, 546, 797, 917], "country_code_dict": [390, 546], "ca": [390, 546], "canada": [390, 546], "de": [390, 546], "germani": [390, 546], "fr": [390, 546], "franc": [390, 546], "country_cod": [390, 546], "unknown": [390, 520, 546], "rest": [390, 546], "computeerror": [396, 460, 555, 868], "keep_nam": [399, 546], "poison": [403, 404, 546, 806, 807, 917], "nanmax": [403, 404, 546, 806, 807, 917], "wherea": [403, 404, 546, 577, 584, 638, 806, 807, 917], "outcom": [406, 546], "_max": [406, 546], "c_max": [406, 546], "_min": [406, 546], "c_min": [406, 546], "recent": [407, 546, 810, 917], "percent": [407, 546, 810, 917], "090909": [407, 546], "expon": [408, 546], "power": [408, 546], "reverse_": [409, 546], "reverse_a": [409, 546], "reverse_fruit": [409, 546], "reverse_b": [409, 546], "reverse_car": [409, 546], "rankmethod": [412, 546, 815, 917], "ti": [412, 546, 815, 917], "appropri": [412, 546, 815, 917], "competit": [412, 546, 815, 917], "highest": [412, 488, 502, 532, 546, 638, 815, 917], "64bit": [414, 546, 817, 917], "safe": [414, 546, 817, 898, 917], "coerc": [415, 546], "dim": [416, 546, 819, 917], "fruits_revers": [417, 477, 546], "cars_revers": [417, 477, 546], "window_s": [418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 546, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 917], "rolling_min": [418, 546, 821, 917], "rolling_max": [418, 546, 821, 917], "rolling_mean": [418, 546, 821, 917], "rolling_sum": [418, 546, 821, 917], "multipli": [418, 419, 420, 421, 422, 423, 425, 426, 427, 546, 821, 822, 823, 824, 825, 826, 828, 829, 830, 917], "358899": [418, 546], "041452": [418, 546], "567764": [418, 546], "travers": [419, 420, 422, 425, 426, 427, 546, 822, 823, 825, 828, 829, 830, 917], "vector": [419, 420, 422, 425, 426, 427, 546, 822, 823, 825, 828, 829, 830, 917], "5h": [419, 420, 421, 422, 423, 425, 426, 427, 546], "33": [423, 428, 499, 546, 826, 917], "skew": [424, 546, 827, 917], "527525": [425, 546, 828, 917], "digit": [428, 474, 546, 831, 855, 882, 917], "searchsortedsid": [430, 546, 833, 917], "maintain": [430, 486, 546, 603, 604, 638, 833, 902, 917], "leftmost": [430, 546, 833, 917], "rightmost": [430, 546, 833, 917], "six": [430, 546], "extrema": [434, 546, 841, 917], "112": [434, 546], "129": [434, 546], "i8": [434, 546, 711, 820, 904, 917], "8589934592": [434, 546], "1073741824": [434, 546], "content": [435, 489, 546, 843, 917], "175201": [438, 546, 846, 917], "about": [439, 546, 847, 917], "unimod": [439, 546, 847, 917], "skewtest": [439, 546, 847, 917], "speak": [439, 546, 847, 917], "g_1": [439, 546, 847, 917], "m_3": [439, 546, 847, 917], "m_2": [439, 546, 847, 917], "m_i": [439, 546, 847, 917], "sum_": [439, 546, 847, 917], "texttt": [439, 546, 847, 917], "k_3": [439, 546, 847, 917], "k_2": [439, 546, 847, 917], "sqrt": [439, 546, 847, 917], "343622": [439, 546], "value1": [442, 546], "value2": [442, 546], "414214": [443, 546, 850, 917], "ends_with": [446, 469, 877], "crab": [446, 854], "dog": [446, 472, 473, 501, 854], "rab": [446, 854], "success": [447, 453, 855, 861], "overlap": [447, 453, 855, 861], "captur": [447, 452, 453, 855, 860, 861], "123": [447, 453, 462, 855, 861, 870, 896, 917], "bla": [447, 453, 855, 861], "asd": [447, 453, 855, 861], "678": [447, 453, 855, 861], "910t": [447, 453, 855, 861], "r": [447, 451, 452, 453, 461, 546, 855, 859, 860, 861, 869], "count_digit": 447, "666f6f": [449, 857], "626172": [449, 857], "mango": [450, 469, 858, 877], "go": [450, 858], "has_suffix": 450, "group_index": [452, 860], "vote": [452, 860], "ballon_dor": [452, 860], "candid": [452, 860], "messi": [452, 860], "ref": [452, 860], "candidat": [452, 860], "jorginho": [452, 860], "ronaldo": [452, 860], "extracted_nr": 453, "910": [453, 861], "json_path_match": [454, 862], "jsonpath": [454, 455, 862, 863], "json_path": [455, 863], "regardless": [455, 863], "json_val": [455, 863], "n_char": [456, 864], "caf\u00e9": [456, 459, 864, 867], "345": [456, 459, 864, 867], "\u6771\u4eac": [456, 459, 864, 867], "nchar": [456, 459], "fillchar": [457, 463, 865, 871], "justifi": [457, 463, 865, 871], "pad": [457, 463, 474, 865, 871, 882], "cow": [457, 463, 865, 871], "monkei": [457, 463, 865, 871], "hippopotamu": [457, 463, 865, 871], "strip": [458, 464, 866, 872], "whitespac": [458, 464, 470, 866, 872, 878], "tworld": [458, 470, 866, 878], "wod": [458, 464, 866, 872], "rld": [458, 866], "text": [459, 461, 462, 867], "radix": [460, 868], "parseerror": [460, 868], "becom": [460, 868], "defult": [460, 868], "silent": [460, 868], "110": [460, 868], "010": [460, 868], "fa1e": [460, 868], "ff00": [460, 868], "cafe": [460, 868], "64030": [460, 868], "65280": [460, 868], "51966": [460, 868], "replace_al": [461, 869], "123abc": [461, 869], "abc456": [461, 869], "abcabc": [462, 870], "123a123": [462, 870], "bc": [462, 535, 870], "trail": [464, 470, 872, 878], "worl": [464, 470, 872, 878], "subslic": [465, 873], "pear": [465, 873], "papaya": [465, 873], "dragonfruit": [465, 873], "s_slice": 465, "ear": [465, 873], "aya": [465, 873], "uit": [465, 873], "ya": [465, 873], "onf": [465, 873], "a_1": [467, 875, 895, 917], "d_4": [467, 875], "rename_field": [467, 468, 875, 876], "first_part": [467, 468, 875, 876], "second_part": [467, 468, 875, 876], "remaind": [468, 876], "app": [469, 877], "has_prefix": 469, "polarstemporaltyp": [471, 879], "tz_awar": [471, 879], "strftime": [471, 879], "anywher": [471, 879], "3f": 471, "00z": [471, 879], "sun": [471, 879], "34": [471, 879], "lowercas": [472, 880], "variant": [472, 473], "uppercas": [473, 881], "100000": 474, "0010": 474, "0001": 474, "00000": 474, "00001": 474, "cd": [475, 476], "struct_col": [475, 476], "www": 476, "xxx": 476, "yyi": 476, "zzz": 476, "obvious": 476, "referenc": 476, "structfieldnotfounderror": [476, 555], "761594": [483, 546, 892, 917], "replic": [484, 546, 900, 917], "vals_phys": [484, 546], "largest": [485, 546, 901, 917], "smallest": [485, 546, 901, 917], "bottom_k": [485, 546], "value_count": [487, 546, 917], "9223372036854775807": [488, 546], "multithread": [489, 546], "columnwis": [492, 493], "AND": 492, "bitwis": [492, 493], "returns_scalar": 494, "product_a": 494, "49": 494, "Be": 495, "more_nam": 499, "hamburg": 499, "lag": 500, "mimic": 500, "a_lag_": 500, "a_rol": 500, "plai": 501, "swim": 501, "walk": 501, "full_sent": 501, "correlationmethod": 502, "propagate_nan": [502, 532], "spearman": [502, 532], "larger": [502, 532, 603, 604, 638], "544705": [502, 527], "covari": 504, "acc": [505, 506, 514, 529], "include_init": 505, "accumul": [505, 506, 514, 529], "fn": [505, 506, 514, 529], "new_valu": [505, 506, 514, 529], "simpli": [505, 514], "cumreduc": 505, "cumfold": 507, "999999": 509, "add_week": 510, "add_dai": 510, "add_second": 510, "add_millisecond": 510, "add_hour": 510, "add_millisec": 510, "ond": 510, "eval": 511, "mathemat": 511, "a_b_doubl": 511, "fstring": 515, "placehold": 515, "hello_": 515, "_world": 515, "foo_": 515, "_bar_": 515, "foo_a_bar_1": 515, "foo_b_bar_2": 515, "foo_c_bar_3": 515, "epoch": [516, 741], "timestep": 516, "1666683077": 516, "1666683099": 516, "39": 516, "12345": [516, 695, 765, 831, 917], "12346": 516, "agg_group": [517, 546], "allow_object": 520, "valueexcept": 520, "test_func": 521, "selector": [522, 525, 535], "favor": [527, 532], "605551": 533, "605551275463989": 533, "my_struct": 534, "q": 534, "isn": 538, "thens": 538, "chain": 538, "sometim": 545, "arcco": [546, 917], "arccosh": [546, 917], "arcsin": [546, 917], "arcsinh": [546, 917], "arctan": [546, 917], "arctanh": [546, 917], "arg_max": [546, 917], "arg_min": [546, 917], "arg_uniqu": [546, 917], "argsort": [546, 917], "backward_fil": 546, "clip_max": [546, 917], "clip_min": [546, 917], "co": [546, 917], "cosh": [546, 917], "cumcount": 546, "cummax": [546, 917], "cummin": [546, 917], "cumprod": [546, 917], "cumulative_ev": [546, 917], "entropi": [546, 917], "ewm_mean": [546, 917], "ewm_std": [546, 917], "ewm_var": [546, 917], "extend_const": [546, 917], "flatten": 546, "inspect": [546, 638], "is_between": [546, 917], "is_finit": [546, 917], "is_first": [546, 917], "is_in": [546, 917], "is_infinit": [546, 917], "is_nan": [546, 917], "is_not_nan": [546, 917], "is_not_nul": [546, 917], "kurtosi": [546, 917], "log10": [546, 917], "map_alia": 546, "map_dict": [546, 917], "nan_max": [546, 917], "nan_min": [546, 917], "pct_chang": [546, 917], "extract_numb": 546, "pow": 546, "reinterpret": [546, 917], "repeat_bi": 546, "rolling_appli": [546, 917], "rolling_median": [546, 917], "rolling_quantil": [546, 917], "rolling_skew": [546, 917], "rolling_std": [546, 917], "rolling_var": [546, 917], "search_sort": [546, 917], "set_sort": [546, 917], "shrink_dtyp": [546, 917], "sin": [546, 917], "sinh": [546, 917], "sort_bi": 546, "tan": [546, 917], "tanh": [546, 917], "to_phys": [546, 917], "top_k": [546, 917], "unique_count": [546, 917], "expos": 555, "registr": 555, "miscellan": 555, "arrowerror": 555, "columnnotfounderror": 555, "invalidoperationerror": 555, "nodataerror": 555, "panicexcept": 555, "schemaerror": 555, "schemafieldnotfounderror": 555, "shapeerror": 555, "build_info": 555, "show_vers": 555, "sqlcontext": [555, 923], "hit": [558, 638], "node": [558, 578, 585, 589, 593, 596, 638], "huge": [561, 638], "saver": [561, 638], "purpos": [568, 638], "influenc": [568, 585, 638], "read_json": [573, 619, 638], "lazygroupbi": [574, 575, 576, 638], "validate_output_schema": [585, 638], "streamabl": [585, 589, 638], "past": [585, 638], "paramount": [585, 638], "hard": [585, 638], "bug": [585, 622, 638], "elig": [585, 638], "ot": [585, 638], "exectut": [585, 638], "invari": [585, 638], "upheld": [585, 638], "prune": [585, 638], "show_plot": [593, 638], "truncate_nod": [593, 638], "figsiz": [593, 602, 638], "gantt": [593, 638], "matplotlib": [593, 602, 638], "plot": [593, 602, 638], "groupby_partit": [593, 638], "470": [593, 638], "475": [593, 638], "1964": [593, 638], "from_json": [595, 638], "swap": [596, 638], "output_path": [602, 638], "raw_output": [602, 638], "figur": [602, 638], "persist": [603, 604, 638], "ram": [603, 604, 638], "slightli": [603, 604, 638], "my_larger_than_ram_fil": [603, 604, 638], "data_pagesize_limit": [604, 638], "290994": [607, 638], "118034": [607, 638], "433013": [607, 638], "1875": [614, 638], "polarsexprtyp": [616, 638], "extern": [617, 638], "df_a": [617, 638], "df_other": [617, 638], "afoo": [617, 638], "cfoo": [617, 638], "train_df": [617, 638], "feature_0": [617, 638], "feature_1": [617, 638], "test_df": [617, 638], "_train": [617, 638], "feature_0_train": [617, 638], "dataframescan": [619, 638], "output_schema": [619, 638], "initialis": 638, "ldf2": 638, "ldf3": 638, "ldf4": 638, "ldf5": 638, "ldf6": 638, "explain": 638, "profil": 638, "sink_ipc": 638, "sink_parquet": 638, "with_context": 638, "sr": [643, 917], "new_aliased_sr": [643, 917], "append_chunk": [646, 917], "super": [646, 917], "141593": [648, 917], "292432": [649, 917], "549306": [653, 917], "listnamespac": [660, 759, 819, 917], "catnamespac": 693, "56789": [695, 765, 831, 917], "901234": [695, 765, 831, 917], "pi": [702, 845, 891, 917], "1232e": [702, 917], "quick": [710, 917], "series_num": [710, 917], "581139": [710, 917], "series_str": [710, 917], "datetimenamespac": 715, "500m": [728, 730, 736, 743], "500000": 728, "2m": 733, "500000000": 736, "date_minus_1y_2mon": 738, "1583020800": 741, "1585699200": 741, "1588291200": 741, "nyc": 741, "edt": 741, "1583038800": 741, "1585717200": 741, "1588309200": 741, "165": [742, 747], "series_equ": [742, 747, 917], "timestamp_u": 746, "978307200000000000": 746, "978393600000000000": 746, "978480000000000000": 746, "005": [753, 917], "06293300616044681": [753, 917], "65": [753, 917], "8568409950394724": [753, 917], "4000000": [754, 917], "814697265625": [754, 917], "stringnamespac": [759, 852, 917], "bitmask": [767, 917], "swiftli": [767, 917], "10734580197236529959": [768, 917], "3022416320763508302": [768, 917], "13756996518000038261": [768, 917], "fall": [772, 917], "2147483648": [796, 917], "iso3166": [797, 917], "tur": [797, 917], "jpn": [797, 917], "nld": [797, 917], "country_lookup": [797, 917], "japan": [797, 917], "t\u00fcrkiy": [797, 917], "netherland": [797, 917], "unrecognis": [797, 917], "unspecifi": [797, 917], "country_nam": [797, 917], "166667": [810, 917], "142857": [810, 917], "512": [810, 917], "peak": [811, 812, 917], "nanstd": [821, 917], "858612": [821, 917], "200": [822, 823, 825, 917], "150": [823, 917], "250": [823, 917], "350": [823, 917], "450": [823, 917], "381802": [827, 917], "dev": [828, 917], "57": [831, 917], "frequent": [835, 836, 917], "mutat": [836, 917], "2246e": [845, 891, 917], "divisor": [851, 906, 917], "6331e16": [891, 917], "lib": [894, 917], "int64arrai": [894, 917], "a_2": [895, 917], "a_3": [895, 917], "zero_copy_onli": [898, 917], "writabl": [898, 917], "complet": [898, 917], "view": [898, 917], "presenc": [898, 917], "immut": [898, 917], "127": [904, 917], "seriesview": [907, 917], "arraylik": 917, "dtype_if_empti": 917, "position": 917, "scenario": 917, "through": 917, "chunk_length": 917, "cut": 917, "eq": 917, "ge": 917, "get_chunk": 917, "gt": 917, "has_valid": 917, "is_boolean": 917, "is_float": 917, "is_numer": 917, "is_sort": 917, "is_tempor": 917, "is_utf8": 917, "le": 917, "ne": 917, "new_from_index": 917, "peak_max": 917, "peak_min": 917, "set_at_idx": 917}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [33, 0, 1, "", "DataType"], [34, 0, 1, "", "Date"], [35, 0, 1, "", "Datetime"], [36, 0, 1, "", "Duration"], [37, 0, 1, "", "Float32"], [38, 0, 1, "", "Float64"], [39, 0, 1, "", "Int16"], [40, 0, 1, "", "Int32"], [41, 0, 1, "", "Int64"], [42, 0, 1, "", "Int8"], [43, 0, 1, "", "List"], [44, 0, 1, "", "Null"], [45, 0, 1, "", "Object"], [923, 0, 1, "", "SQLContext"], [49, 0, 1, "", "StringCache"], [50, 0, 1, "", "Struct"], [51, 0, 1, "", "Time"], [52, 0, 1, "", "UInt16"], [53, 0, 1, "", "UInt32"], [54, 0, 1, "", "UInt64"], [55, 0, 1, "", "UInt8"], [56, 0, 1, "", "Unknown"], [57, 0, 1, "", "Utf8"], [58, 4, 1, "", "align_frames"], [492, 4, 1, "", "all"], [493, 4, 1, "", "any"], [494, 4, 1, "", "apply"], [495, 4, 1, "", "arange"], [496, 4, 1, "", "arg_sort_by"], [63, 4, 1, "", "arg_where"], [497, 4, 1, "", "avg"], [64, 4, 1, "", "build_info"], [498, 4, 1, "", "coalesce"], [499, 4, 1, "", "col"], [65, 4, 1, "", "collect_all"], [66, 4, 1, "", "concat"], [500, 4, 1, "", "concat_list"], [501, 4, 1, "", "concat_str"], [502, 4, 1, "", "corr"], [503, 4, 1, "", "count"], [504, 4, 1, "", "cov"], [505, 4, 1, "", "cumfold"], [506, 4, 1, "", "cumreduce"], [507, 4, 1, "", "cumsum"], [67, 4, 1, "", "cut"], [508, 4, 1, "", "date"], [68, 4, 1, "", "date_range"], [509, 4, 1, "", "datetime"], [510, 4, 1, "", "duration"], [511, 4, 1, "", "element"], [512, 4, 1, "", "exclude"], [513, 4, 1, "", "first"], [514, 4, 1, "", "fold"], [515, 4, 1, "", "format"], [83, 4, 1, "", "from_arrow"], [84, 4, 1, "", "from_dataframe"], [85, 4, 1, "", "from_dict"], [86, 4, 1, "", "from_dicts"], [516, 4, 1, "", "from_epoch"], [87, 4, 1, "", "from_numpy"], [88, 4, 1, "", "from_pandas"], [89, 4, 1, "", "from_records"], [90, 4, 1, "", "get_dummies"], [91, 4, 1, "", "get_idx_type"], [517, 4, 1, "", "groups"], [518, 4, 1, "", "head"], [519, 4, 1, "", "list"], [520, 4, 1, "", "lit"], [521, 4, 1, "", "map"], [522, 4, 1, "", "max"], [523, 4, 1, "", "mean"], [524, 4, 1, "", "median"], [525, 4, 1, "", "min"], [526, 4, 1, "", "n_unique"], [93, 4, 1, "", "ones"], [527, 4, 1, "", "pearson_corr"], [528, 4, 1, "", "quantile"], [94, 4, 1, "", "read_avro"], [95, 4, 1, "", "read_csv"], [96, 4, 1, "", "read_csv_batched"], [97, 4, 1, "", "read_database"], [98, 4, 1, "", "read_delta"], [99, 4, 1, "", "read_excel"], [100, 4, 1, "", "read_ipc"], [101, 4, 1, "", "read_ipc_schema"], [102, 4, 1, "", "read_json"], [103, 4, 1, "", "read_ndjson"], [104, 4, 1, "", "read_parquet"], [105, 4, 1, "", "read_parquet_schema"], [529, 4, 1, "", "reduce"], [530, 4, 1, "", "repeat"], [106, 4, 1, "", "scan_csv"], [107, 4, 1, "", "scan_delta"], [108, 4, 1, "", "scan_ipc"], [109, 4, 1, "", "scan_ndjson"], [110, 4, 1, "", "scan_parquet"], [111, 4, 1, "", "scan_pyarrow_dataset"], [531, 4, 1, "", "select"], [112, 4, 1, "", "show_versions"], [532, 4, 1, "", "spearman_rank_corr"], [533, 4, 1, "", "std"], [534, 4, 1, "", "struct"], [535, 4, 1, "", "sum"], [536, 4, 1, "", "tail"], [119, 4, 1, "", "threadpool_size"], [120, 4, 1, "", "toggle_string_cache"], [537, 4, 1, "", "var"], [538, 4, 1, "", "when"], [121, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "activate_decimals"], [6, 1, 1, "", "load"], [7, 1, 1, "", "restore_defaults"], [8, 1, 1, "", "save"], [9, 1, 1, "", "set_ascii_tables"], [10, 1, 1, "", "set_fmt_float"], [11, 1, 1, "", "set_fmt_str_lengths"], [12, 1, 1, "", "set_tbl_cell_alignment"], [13, 1, 1, "", "set_tbl_cols"], [14, 1, 1, "", "set_tbl_column_data_type_inline"], [15, 1, 1, "", "set_tbl_dataframe_shape_below"], [16, 1, 1, "", "set_tbl_formatting"], [17, 1, 1, "", "set_tbl_hide_column_data_types"], [18, 1, 1, "", "set_tbl_hide_column_names"], [19, 1, 1, "", "set_tbl_hide_dataframe_shape"], [20, 1, 1, "", "set_tbl_hide_dtype_separator"], [21, 1, 1, "", "set_tbl_rows"], [22, 1, 1, "", "set_tbl_width_chars"], [23, 1, 1, "", "set_verbose"], [24, 1, 1, "", "state"]], "polars.DataFrame": [[124, 1, 1, "", "__dataframe__"], [125, 1, 1, "", "apply"], [126, 1, 1, "", "clear"], [127, 1, 1, "", "clone"], [128, 2, 1, "", "columns"], [129, 1, 1, "", "corr"], [130, 1, 1, "", "describe"], [131, 1, 1, "", "drop"], [132, 1, 1, "", "drop_in_place"], [133, 1, 1, "", "drop_nulls"], [134, 2, 1, "", "dtypes"], [135, 1, 1, "", "estimated_size"], [136, 1, 1, "", "explode"], [137, 1, 1, "", "extend"], [138, 1, 1, "", "fill_nan"], [139, 1, 1, "", "fill_null"], [140, 1, 1, "", "filter"], [141, 1, 1, "", "find_idx_by_name"], [142, 1, 1, "", "fold"], [143, 1, 1, "", "frame_equal"], [144, 1, 1, "", "get_column"], [145, 1, 1, "", "get_columns"], [146, 1, 1, "", "glimpse"], [147, 1, 1, "", "groupby"], [148, 1, 1, "", "groupby_dynamic"], [149, 1, 1, "", "groupby_rolling"], [150, 1, 1, "", "hash_rows"], [151, 1, 1, "", "head"], [152, 2, 1, "", "height"], [153, 1, 1, "", "hstack"], [154, 1, 1, "", "insert_at_idx"], [155, 1, 1, "", "interpolate"], [156, 1, 1, "", "is_duplicated"], [157, 1, 1, "", "is_empty"], [158, 1, 1, "", "is_unique"], [159, 1, 1, "", "item"], [160, 1, 1, "", "iter_rows"], [161, 1, 1, "", "iter_slices"], [162, 1, 1, "", "join"], [163, 1, 1, "", "join_asof"], [164, 1, 1, "", "lazy"], [165, 1, 1, "", "limit"], [166, 1, 1, "", "max"], [167, 1, 1, "", "mean"], [168, 1, 1, "", "median"], [169, 1, 1, "", "melt"], [170, 1, 1, "", "merge_sorted"], [171, 1, 1, "", "min"], [172, 1, 1, "", "n_chunks"], [173, 1, 1, "", "n_unique"], [174, 1, 1, "", "null_count"], [175, 1, 1, "", "partition_by"], [176, 1, 1, "", "pipe"], [177, 1, 1, "", "pivot"], [178, 1, 1, "", "product"], [179, 1, 1, "", "quantile"], [180, 1, 1, "", "rechunk"], [181, 1, 1, "", "rename"], [182, 1, 1, "", "replace"], [183, 1, 1, "", "replace_at_idx"], [184, 1, 1, "", "reverse"], [185, 1, 1, "", "row"], [186, 1, 1, "", "rows"], [187, 1, 1, "", "sample"], [188, 2, 1, "", "schema"], [189, 1, 1, "", "select"], [190, 2, 1, "", "shape"], [191, 1, 1, "", "shift"], [192, 1, 1, "", "shift_and_fill"], [193, 1, 1, "", "shrink_to_fit"], [194, 1, 1, "", "slice"], [195, 1, 1, "", "sort"], [196, 1, 1, "", "std"], [197, 1, 1, "", "sum"], [198, 1, 1, "", "tail"], [199, 1, 1, "", "take_every"], [200, 1, 1, "", "to_arrow"], [201, 1, 1, "", "to_dict"], [202, 1, 1, "", "to_dicts"], [203, 1, 1, "", "to_dummies"], [204, 1, 1, "", "to_numpy"], [205, 1, 1, "", "to_pandas"], [206, 1, 1, "", "to_series"], [207, 1, 1, "", "to_struct"], [208, 1, 1, "", "transpose"], [209, 1, 1, "", "unique"], [210, 1, 1, "", "unnest"], [211, 1, 1, "", "unstack"], [212, 1, 1, "", "update"], [213, 1, 1, "", "upsample"], [214, 1, 1, "", "var"], [215, 1, 1, "", "vstack"], [216, 2, 1, "", "width"], [217, 1, 1, "", "with_columns"], [218, 1, 1, "", "with_row_count"], [25, 1, 1, "", "write_avro"], [26, 1, 1, "", "write_csv"], [27, 1, 1, "", "write_database"], [28, 1, 1, "", "write_excel"], [29, 1, 1, "", "write_ipc"], [30, 1, 1, "", "write_json"], [31, 1, 1, "", "write_ndjson"], [32, 1, 1, "", "write_parquet"]], "polars.DataType": [[33, 1, 1, "", "__init__"]], "polars.Date": [[34, 1, 1, "", "__init__"]], "polars.Datetime": [[35, 1, 1, "", "__init__"]], "polars.Duration": [[36, 1, 1, "", "__init__"]], "polars.Expr": [[246, 1, 1, "", "abs"], [247, 1, 1, "", "agg_groups"], [248, 1, 1, "", "alias"], [249, 1, 1, "", "all"], [250, 1, 1, "", "any"], [251, 1, 1, "", "append"], [252, 1, 1, "", "apply"], [253, 1, 1, "", "arccos"], [254, 1, 1, "", "arccosh"], [255, 1, 1, "", "arcsin"], [256, 1, 1, "", "arcsinh"], [257, 1, 1, "", "arctan"], [258, 1, 1, "", "arctanh"], [259, 1, 1, "", "arg_max"], [260, 1, 1, "", "arg_min"], [261, 1, 1, "", "arg_sort"], [262, 1, 1, "", "arg_true"], [263, 1, 1, "", "arg_unique"], [264, 1, 1, "", "argsort"], [291, 1, 1, "", "backward_fill"], [297, 1, 1, "", "cast"], [299, 1, 1, "", "ceil"], [300, 1, 1, "", "clip"], [301, 1, 1, "", "clip_max"], [302, 1, 1, "", "clip_min"], [303, 1, 1, "", "cos"], [304, 1, 1, "", "cosh"], [305, 1, 1, "", "count"], [306, 1, 1, "", "cumcount"], [307, 1, 1, "", "cummax"], [308, 1, 1, "", "cummin"], [309, 1, 1, "", "cumprod"], [310, 1, 1, "", "cumsum"], [311, 1, 1, "", "cumulative_eval"], [312, 1, 1, "", "diff"], [313, 1, 1, "", "dot"], [314, 1, 1, "", "drop_nans"], [315, 1, 1, "", "drop_nulls"], [348, 1, 1, "", "entropy"], [349, 1, 1, "", "ewm_mean"], [350, 1, 1, "", "ewm_std"], [351, 1, 1, "", "ewm_var"], [352, 1, 1, "", "exclude"], [353, 1, 1, "", "exp"], [354, 1, 1, "", "explode"], [355, 1, 1, "", "extend_constant"], [356, 1, 1, "", "fill_nan"], [357, 1, 1, "", "fill_null"], [358, 1, 1, "", "filter"], [359, 1, 1, "", "first"], [360, 1, 1, "", "flatten"], [361, 1, 1, "", "floor"], [362, 1, 1, "", "forward_fill"], [363, 1, 1, "", "hash"], [364, 1, 1, "", "head"], [365, 1, 1, "", "inspect"], [366, 1, 1, "", "interpolate"], [367, 1, 1, "", "is_between"], [368, 1, 1, "", "is_duplicated"], [369, 1, 1, "", "is_finite"], [370, 1, 1, "", "is_first"], [371, 1, 1, "", "is_in"], [372, 1, 1, "", "is_infinite"], [373, 1, 1, "", "is_nan"], [374, 1, 1, "", "is_not"], [375, 1, 1, "", "is_not_nan"], [376, 1, 1, "", "is_not_null"], [377, 1, 1, "", "is_null"], [378, 1, 1, "", "is_unique"], [379, 1, 1, "", "keep_name"], [380, 1, 1, "", "kurtosis"], [381, 1, 1, "", "last"], [382, 1, 1, "", "len"], [383, 1, 1, "", "limit"], [384, 1, 1, "", "list"], [385, 1, 1, "", "log"], [386, 1, 1, "", "log10"], [387, 1, 1, "", "lower_bound"], [388, 1, 1, "", "map"], [389, 1, 1, "", "map_alias"], [390, 1, 1, "", "map_dict"], [391, 1, 1, "", "max"], [392, 1, 1, "", "mean"], [393, 1, 1, "", "median"], [400, 1, 1, "", "min"], [401, 1, 1, "", "mode"], [402, 1, 1, "", "n_unique"], [403, 1, 1, "", "nan_max"], [404, 1, 1, "", "nan_min"], [405, 1, 1, "", "null_count"], [406, 1, 1, "", "over"], [407, 1, 1, "", "pct_change"], [408, 1, 1, "", "pow"], [409, 1, 1, "", "prefix"], [410, 1, 1, "", "product"], [411, 1, 1, "", "quantile"], [412, 1, 1, "", "rank"], [413, 1, 1, "", "rechunk"], [414, 1, 1, "", "reinterpret"], [415, 1, 1, "", "repeat_by"], [416, 1, 1, "", "reshape"], [417, 1, 1, "", "reverse"], [418, 1, 1, "", "rolling_apply"], [419, 1, 1, "", "rolling_max"], [420, 1, 1, "", "rolling_mean"], [421, 1, 1, "", "rolling_median"], [422, 1, 1, "", "rolling_min"], [423, 1, 1, "", "rolling_quantile"], [424, 1, 1, "", "rolling_skew"], [425, 1, 1, "", "rolling_std"], [426, 1, 1, "", "rolling_sum"], [427, 1, 1, "", "rolling_var"], [428, 1, 1, "", "round"], [429, 1, 1, "", "sample"], [430, 1, 1, "", "search_sorted"], [431, 1, 1, "", "set_sorted"], [432, 1, 1, "", "shift"], [433, 1, 1, "", "shift_and_fill"], [434, 1, 1, "", "shrink_dtype"], [435, 1, 1, "", "shuffle"], [436, 1, 1, "", "sign"], [437, 1, 1, "", "sin"], [438, 1, 1, "", "sinh"], [439, 1, 1, "", "skew"], [440, 1, 1, "", "slice"], [441, 1, 1, "", "sort"], [442, 1, 1, "", "sort_by"], [443, 1, 1, "", "sqrt"], [444, 1, 1, "", "std"], [477, 1, 1, "", "suffix"], [478, 1, 1, "", "sum"], [479, 1, 1, "", "tail"], [480, 1, 1, "", "take"], [481, 1, 1, "", "take_every"], [482, 1, 1, "", "tan"], [483, 1, 1, "", "tanh"], [484, 1, 1, "", "to_physical"], [485, 1, 1, "", "top_k"], [486, 1, 1, "", "unique"], [487, 1, 1, "", "unique_counts"], [488, 1, 1, "", "upper_bound"], [489, 1, 1, "", "value_counts"], [490, 1, 1, "", "var"], [491, 1, 1, "", "where"]], "polars.Expr.arr": [[265, 1, 1, "", "arg_max"], [266, 1, 1, "", "arg_min"], [267, 1, 1, "", "concat"], [268, 1, 1, "", "contains"], [269, 1, 1, "", "count_match"], [270, 1, 1, "", "diff"], [271, 1, 1, "", "eval"], [272, 1, 1, "", "explode"], [273, 1, 1, "", "first"], [274, 1, 1, "", "get"], [275, 1, 1, "", "head"], [276, 1, 1, "", "join"], [277, 1, 1, "", "last"], [278, 1, 1, "", "lengths"], [279, 1, 1, "", "max"], [280, 1, 1, "", "mean"], [281, 1, 1, "", "min"], [282, 1, 1, "", "reverse"], [283, 1, 1, "", "shift"], [284, 1, 1, "", "slice"], [285, 1, 1, "", "sort"], [286, 1, 1, "", "sum"], [287, 1, 1, "", "tail"], [288, 1, 1, "", "take"], [289, 1, 1, "", "to_struct"], [290, 1, 1, "", "unique"]], "polars.Expr.bin": [[292, 1, 1, "", "contains"], [293, 1, 1, "", "decode"], [294, 1, 1, "", "encode"], [295, 1, 1, "", "ends_with"], [296, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[298, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[316, 1, 1, "", "cast_time_unit"], [317, 1, 1, "", "combine"], [318, 1, 1, "", "convert_time_zone"], [319, 1, 1, "", "day"], [320, 1, 1, "", "days"], [321, 1, 1, "", "epoch"], [322, 1, 1, "", "hour"], [323, 1, 1, "", "hours"], [324, 1, 1, "", "iso_year"], [325, 1, 1, "", "microsecond"], [326, 1, 1, "", "microseconds"], [327, 1, 1, "", "millisecond"], [328, 1, 1, "", "milliseconds"], [329, 1, 1, "", "minute"], [330, 1, 1, "", "minutes"], [331, 1, 1, "", "month"], [332, 1, 1, "", "nanosecond"], [333, 1, 1, "", "nanoseconds"], [334, 1, 1, "", "offset_by"], [335, 1, 1, "", "ordinal_day"], [336, 1, 1, "", "quarter"], [337, 1, 1, "", "replace_time_zone"], [338, 1, 1, "", "round"], [339, 1, 1, "", "second"], [340, 1, 1, "", "seconds"], [341, 1, 1, "", "strftime"], [342, 1, 1, "", "timestamp"], [343, 1, 1, "", "truncate"], [344, 1, 1, "", "week"], [345, 1, 1, "", "weekday"], [346, 1, 1, "", "with_time_unit"], [347, 1, 1, "", "year"]], "polars.Expr.meta": [[394, 1, 1, "", "has_multiple_outputs"], [395, 1, 1, "", "is_regex_projection"], [396, 1, 1, "", "output_name"], [397, 1, 1, "", "pop"], [398, 1, 1, "", "root_names"], [399, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[445, 1, 1, "", "concat"], [446, 1, 1, "", "contains"], [447, 1, 1, "", "count_match"], [448, 1, 1, "", "decode"], [449, 1, 1, "", "encode"], [450, 1, 1, "", "ends_with"], [451, 1, 1, "", "explode"], [452, 1, 1, "", "extract"], [453, 1, 1, "", "extract_all"], [454, 1, 1, "", "json_extract"], [455, 1, 1, "", "json_path_match"], [456, 1, 1, "", "lengths"], [457, 1, 1, "", "ljust"], [458, 1, 1, "", "lstrip"], [459, 1, 1, "", "n_chars"], [460, 1, 1, "", "parse_int"], [461, 1, 1, "", "replace"], [462, 1, 1, "", "replace_all"], [463, 1, 1, "", "rjust"], [464, 1, 1, "", "rstrip"], [465, 1, 1, "", "slice"], [466, 1, 1, "", "split"], [467, 1, 1, "", "split_exact"], [468, 1, 1, "", "splitn"], [469, 1, 1, "", "starts_with"], [470, 1, 1, "", "strip"], [471, 1, 1, "", "strptime"], [472, 1, 1, "", "to_lowercase"], [473, 1, 1, "", "to_uppercase"], [474, 1, 1, "", "zfill"]], "polars.Expr.struct": [[475, 1, 1, "", "field"], [476, 1, 1, "", "rename_fields"]], "polars.Float32": [[37, 1, 1, "", "__init__"]], "polars.Float64": [[38, 1, 1, "", "__init__"]], "polars.Int16": [[39, 1, 1, "", "__init__"]], "polars.Int32": [[40, 1, 1, "", "__init__"]], "polars.Int64": [[41, 1, 1, "", "__init__"]], "polars.Int8": [[42, 1, 1, "", "__init__"]], "polars.LazyFrame": [[558, 1, 1, "", "cache"], [559, 1, 1, "", "clear"], [560, 1, 1, "", "clone"], [561, 1, 1, "", "collect"], [562, 2, 1, "", "columns"], [563, 1, 1, "", "drop"], [564, 1, 1, "", "drop_nulls"], [565, 2, 1, "", "dtypes"], [566, 1, 1, "", "explain"], [567, 1, 1, "", "explode"], [568, 1, 1, "", "fetch"], [569, 1, 1, "", "fill_nan"], [570, 1, 1, "", "fill_null"], [571, 1, 1, "", "filter"], [572, 1, 1, "", "first"], [573, 1, 1, "", "from_json"], [574, 1, 1, "", "groupby"], [575, 1, 1, "", "groupby_dynamic"], [576, 1, 1, "", "groupby_rolling"], [577, 1, 1, "", "head"], [578, 1, 1, "", "inspect"], [579, 1, 1, "", "interpolate"], [580, 1, 1, "", "join"], [581, 1, 1, "", "join_asof"], [582, 1, 1, "", "last"], [583, 1, 1, "", "lazy"], [584, 1, 1, "", "limit"], [585, 1, 1, "", "map"], [586, 1, 1, "", "max"], [587, 1, 1, "", "mean"], [588, 1, 1, "", "median"], [589, 1, 1, "", "melt"], [590, 1, 1, "", "merge_sorted"], [591, 1, 1, "", "min"], [592, 1, 1, "", "pipe"], [593, 1, 1, "", "profile"], [594, 1, 1, "", "quantile"], [595, 1, 1, "", "read_json"], [596, 1, 1, "", "rename"], [597, 1, 1, "", "reverse"], [598, 2, 1, "", "schema"], [599, 1, 1, "", "select"], [600, 1, 1, "", "shift"], [601, 1, 1, "", "shift_and_fill"], [602, 1, 1, "", "show_graph"], [603, 1, 1, "", "sink_ipc"], [604, 1, 1, "", "sink_parquet"], [605, 1, 1, "", "slice"], [606, 1, 1, "", "sort"], [607, 1, 1, "", "std"], [608, 1, 1, "", "sum"], [609, 1, 1, "", "tail"], [610, 1, 1, "", "take_every"], [611, 1, 1, "", "unique"], [612, 1, 1, "", "unnest"], [613, 1, 1, "", "update"], [614, 1, 1, "", "var"], [615, 2, 1, "", "width"], [616, 1, 1, "", "with_columns"], [617, 1, 1, "", "with_context"], [618, 1, 1, "", "with_row_count"], [619, 1, 1, "", "write_json"]], "polars.List": [[43, 1, 1, "", "__init__"]], "polars.Null": [[44, 1, 1, "", "__init__"]], "polars.Object": [[45, 1, 1, "", "__init__"]], "polars.SQLContext": [[46, 1, 1, "", "execute"], [47, 1, 1, "", "query"], [48, 1, 1, "", "register"]], "polars.Series": [[642, 1, 1, "", "abs"], [643, 1, 1, "", "alias"], [644, 1, 1, "", "all"], [645, 1, 1, "", "any"], [646, 1, 1, "", "append"], [647, 1, 1, "", "apply"], [648, 1, 1, "", "arccos"], [649, 1, 1, "", "arccosh"], [650, 1, 1, "", "arcsin"], [651, 1, 1, "", "arcsinh"], [652, 1, 1, "", "arctan"], [653, 1, 1, "", "arctanh"], [654, 1, 1, "", "arg_max"], [655, 1, 1, "", "arg_min"], [656, 1, 1, "", "arg_sort"], [657, 1, 1, "", "arg_true"], [658, 1, 1, "", "arg_unique"], [659, 1, 1, "", "argsort"], [660, 3, 1, "", "arr"], [692, 1, 1, "", "cast"], [693, 3, 1, "", "cat"], [695, 1, 1, "", "ceil"], [696, 1, 1, "", "chunk_lengths"], [697, 1, 1, "", "clear"], [698, 1, 1, "", "clip"], [699, 1, 1, "", "clip_max"], [700, 1, 1, "", "clip_min"], [701, 1, 1, "", "clone"], [702, 1, 1, "", "cos"], [703, 1, 1, "", "cosh"], [704, 1, 1, "", "cummax"], [705, 1, 1, "", "cummin"], [706, 1, 1, "", "cumprod"], [707, 1, 1, "", "cumsum"], [708, 1, 1, "", "cumulative_eval"], [709, 1, 1, "", "cut"], [710, 1, 1, "", "describe"], [711, 1, 1, "", "diff"], [712, 1, 1, "", "dot"], [713, 1, 1, "", "drop_nans"], [714, 1, 1, "", "drop_nulls"], [715, 3, 1, "", "dt"], [752, 3, 1, "", "dtype"], [753, 1, 1, "", "entropy"], [754, 1, 1, "", "estimated_size"], [755, 1, 1, "", "ewm_mean"], [756, 1, 1, "", "ewm_std"], [757, 1, 1, "", "ewm_var"], [758, 1, 1, "", "exp"], [759, 1, 1, "", "explode"], [760, 1, 1, "", "extend_constant"], [761, 1, 1, "", "fill_nan"], [762, 1, 1, "", "fill_null"], [763, 1, 1, "", "filter"], [764, 3, 1, "", "flags"], [765, 1, 1, "", "floor"], [766, 1, 1, "", "get_chunks"], [767, 1, 1, "", "has_validity"], [768, 1, 1, "", "hash"], [769, 1, 1, "", "head"], [770, 3, 1, "", "inner_dtype"], [771, 1, 1, "", "interpolate"], [772, 1, 1, "", "is_between"], [773, 1, 1, "", "is_boolean"], [774, 1, 1, "", "is_duplicated"], [775, 1, 1, "", "is_empty"], [776, 1, 1, "", "is_finite"], [777, 1, 1, "", "is_first"], [778, 1, 1, "", "is_float"], [779, 1, 1, "", "is_in"], [780, 1, 1, "", "is_infinite"], [781, 1, 1, "", "is_nan"], [782, 1, 1, "", "is_not_nan"], [783, 1, 1, "", "is_not_null"], [784, 1, 1, "", "is_null"], [785, 1, 1, "", "is_numeric"], [786, 1, 1, "", "is_sorted"], [787, 1, 1, "", "is_temporal"], [788, 1, 1, "", "is_unique"], [789, 1, 1, "", "is_utf8"], [790, 1, 1, "", "item"], [791, 1, 1, "", "kurtosis"], [792, 1, 1, "", "len"], [793, 1, 1, "", "limit"], [794, 1, 1, "", "log"], [795, 1, 1, "", "log10"], [796, 1, 1, "", "lower_bound"], [797, 1, 1, "", "map_dict"], [798, 1, 1, "", "max"], [799, 1, 1, "", "mean"], [800, 1, 1, "", "median"], [801, 1, 1, "", "min"], [802, 1, 1, "", "mode"], [803, 1, 1, "", "n_chunks"], [804, 1, 1, "", "n_unique"], [805, 3, 1, "", "name"], [806, 1, 1, "", "nan_max"], [807, 1, 1, "", "nan_min"], [808, 1, 1, "", "new_from_index"], [809, 1, 1, "", "null_count"], [810, 1, 1, "", "pct_change"], [811, 1, 1, "", "peak_max"], [812, 1, 1, "", "peak_min"], [813, 1, 1, "", "product"], [814, 1, 1, "", "quantile"], [815, 1, 1, "", "rank"], [816, 1, 1, "", "rechunk"], [817, 1, 1, "", "reinterpret"], [818, 1, 1, "", "rename"], [819, 1, 1, "", "reshape"], [820, 1, 1, "", "reverse"], [821, 1, 1, "", "rolling_apply"], [822, 1, 1, "", "rolling_max"], [823, 1, 1, "", "rolling_mean"], [824, 1, 1, "", "rolling_median"], [825, 1, 1, "", "rolling_min"], [826, 1, 1, "", "rolling_quantile"], [827, 1, 1, "", "rolling_skew"], [828, 1, 1, "", "rolling_std"], [829, 1, 1, "", "rolling_sum"], [830, 1, 1, "", "rolling_var"], [831, 1, 1, "", "round"], [832, 1, 1, "", "sample"], [833, 1, 1, "", "search_sorted"], [834, 1, 1, "", "series_equal"], [835, 1, 1, "", "set"], [836, 1, 1, "", "set_at_idx"], [837, 1, 1, "", "set_sorted"], [838, 3, 1, "", "shape"], [839, 1, 1, "", "shift"], [840, 1, 1, "", "shift_and_fill"], [841, 1, 1, "", "shrink_dtype"], [842, 1, 1, "", "shrink_to_fit"], [843, 1, 1, "", "shuffle"], [844, 1, 1, "", "sign"], [845, 1, 1, "", "sin"], [846, 1, 1, "", "sinh"], [847, 1, 1, "", "skew"], [848, 1, 1, "", "slice"], [849, 1, 1, "", "sort"], [850, 1, 1, "", "sqrt"], [851, 1, 1, "", "std"], [852, 3, 1, "", "str"], [887, 1, 1, "", "sum"], [888, 1, 1, "", "tail"], [889, 1, 1, "", "take"], [890, 1, 1, "", "take_every"], [891, 1, 1, "", "tan"], [892, 1, 1, "", "tanh"], [893, 3, 1, "", "time_unit"], [894, 1, 1, "", "to_arrow"], [895, 1, 1, "", "to_dummies"], [896, 1, 1, "", "to_frame"], [897, 1, 1, "", "to_list"], [898, 1, 1, "", "to_numpy"], [899, 1, 1, "", "to_pandas"], [900, 1, 1, "", "to_physical"], [901, 1, 1, "", "top_k"], [902, 1, 1, "", "unique"], [903, 1, 1, "", "unique_counts"], [904, 1, 1, "", "upper_bound"], [905, 1, 1, "", "value_counts"], [906, 1, 1, "", "var"], [907, 1, 1, "", "view"], [908, 1, 1, "", "zip_with"]], "polars.Series.arr": [[661, 1, 1, "", "arg_max"], [662, 1, 1, "", "arg_min"], [663, 1, 1, "", "concat"], [664, 1, 1, "", "contains"], [665, 1, 1, "", "count_match"], [666, 1, 1, "", "diff"], [667, 1, 1, "", "eval"], [668, 1, 1, "", "explode"], [669, 1, 1, "", "first"], [670, 1, 1, "", "get"], [671, 1, 1, "", "head"], [672, 1, 1, "", "join"], [673, 1, 1, "", "last"], [674, 1, 1, "", "lengths"], [675, 1, 1, "", "max"], [676, 1, 1, "", "mean"], [677, 1, 1, "", "min"], [678, 1, 1, "", "reverse"], [679, 1, 1, "", "shift"], [680, 1, 1, "", "slice"], [681, 1, 1, "", "sort"], [682, 1, 1, "", "sum"], [683, 1, 1, "", "tail"], [684, 1, 1, "", "take"], [685, 1, 1, "", "to_struct"], [686, 1, 1, "", "unique"]], "polars.Series.bin": [[687, 1, 1, "", "contains"], [688, 1, 1, "", "decode"], [689, 1, 1, "", "encode"], [690, 1, 1, "", "ends_with"], [691, 1, 1, "", "starts_with"]], "polars.Series.cat": [[694, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[716, 1, 1, "", "cast_time_unit"], [717, 1, 1, "", "combine"], [718, 1, 1, "", "convert_time_zone"], [719, 1, 1, "", "day"], [720, 1, 1, "", "days"], [721, 1, 1, "", "epoch"], [722, 1, 1, "", "hour"], [723, 1, 1, "", "hours"], [724, 1, 1, "", "iso_year"], [725, 1, 1, "", "max"], [726, 1, 1, "", "mean"], [727, 1, 1, "", "median"], [728, 1, 1, "", "microsecond"], [729, 1, 1, "", "microseconds"], [730, 1, 1, "", "millisecond"], [731, 1, 1, "", "milliseconds"], [732, 1, 1, "", "min"], [733, 1, 1, "", "minute"], [734, 1, 1, "", "minutes"], [735, 1, 1, "", "month"], [736, 1, 1, "", "nanosecond"], [737, 1, 1, "", "nanoseconds"], [738, 1, 1, "", "offset_by"], [739, 1, 1, "", "ordinal_day"], [740, 1, 1, "", "quarter"], [741, 1, 1, "", "replace_time_zone"], [742, 1, 1, "", "round"], [743, 1, 1, "", "second"], [744, 1, 1, "", "seconds"], [745, 1, 1, "", "strftime"], [746, 1, 1, "", "timestamp"], [747, 1, 1, "", "truncate"], [748, 1, 1, "", "week"], [749, 1, 1, "", "weekday"], [750, 1, 1, "", "with_time_unit"], [751, 1, 1, "", "year"]], "polars.Series.str": [[853, 1, 1, "", "concat"], [854, 1, 1, "", "contains"], [855, 1, 1, "", "count_match"], [856, 1, 1, "", "decode"], [857, 1, 1, "", "encode"], [858, 1, 1, "", "ends_with"], [859, 1, 1, "", "explode"], [860, 1, 1, "", "extract"], [861, 1, 1, "", "extract_all"], [862, 1, 1, "", "json_extract"], [863, 1, 1, "", "json_path_match"], [864, 1, 1, "", "lengths"], [865, 1, 1, "", "ljust"], [866, 1, 1, "", "lstrip"], [867, 1, 1, "", "n_chars"], [868, 1, 1, "", "parse_int"], [869, 1, 1, "", "replace"], [870, 1, 1, "", "replace_all"], [871, 1, 1, "", "rjust"], [872, 1, 1, "", "rstrip"], [873, 1, 1, "", "slice"], [874, 1, 1, "", "split"], [875, 1, 1, "", "split_exact"], [876, 1, 1, "", "splitn"], [877, 1, 1, "", "starts_with"], [878, 1, 1, "", "strip"], [879, 1, 1, "", "strptime"], [880, 1, 1, "", "to_lowercase"], [881, 1, 1, "", "to_uppercase"], [882, 1, 1, "", "zfill"]], "polars.Series.struct": [[883, 1, 1, "", "field"], [884, 3, 1, "", "fields"], [885, 1, 1, "", "rename_fields"], [886, 1, 1, "", "unnest"]], "polars.StringCache": [[49, 1, 1, "", "__init__"]], "polars.Struct": [[50, 1, 1, "", "__init__"]], "polars.Time": [[51, 1, 1, "", "__init__"]], "polars.UInt16": [[52, 1, 1, "", "__init__"]], "polars.UInt32": [[53, 1, 1, "", "__init__"]], "polars.UInt64": [[54, 1, 1, "", "__init__"]], "polars.UInt8": [[55, 1, 1, "", "__init__"]], "polars.Unknown": [[56, 1, 1, "", "__init__"]], "polars.Utf8": [[57, 1, 1, "", "__init__"]], "polars.api": [[59, 4, 1, "", "register_dataframe_namespace"], [60, 4, 1, "", "register_expr_namespace"], [61, 4, 1, "", "register_lazyframe_namespace"], [62, 4, 1, "", "register_series_namespace"]], "polars.exceptions": [[69, 5, 1, "", "ArrowError"], [70, 5, 1, "", "ColumnNotFoundError"], [71, 5, 1, "", "ComputeError"], [72, 5, 1, "", "DuplicateError"], [73, 5, 1, "", "InvalidOperationError"], [74, 5, 1, "", "NoDataError"], [75, 5, 1, "", "NoRowsReturned"], [76, 5, 1, "", "PanicException"], [77, 5, 1, "", "RowsException"], [78, 5, 1, "", "SchemaError"], [79, 5, 1, "", "SchemaFieldNotFoundError"], [80, 5, 1, "", "ShapeError"], [81, 5, 1, "", "StructFieldNotFoundError"], [82, 5, 1, "", "TooManyRowsReturned"]], "polars.internals.batched.BatchedCsvReader": [[92, 1, 1, "", "next_batches"]], "polars.internals.dataframe.groupby.GroupBy": [[219, 1, 1, "", "__iter__"], [220, 1, 1, "", "agg"], [221, 1, 1, "", "all"], [222, 1, 1, "", "apply"], [223, 1, 1, "", "count"], [224, 1, 1, "", "first"], [225, 1, 1, "", "head"], [226, 1, 1, "", "last"], [227, 1, 1, "", "max"], [228, 1, 1, "", "mean"], [229, 1, 1, "", "median"], [230, 1, 1, "", "min"], [231, 1, 1, "", "n_unique"], [232, 1, 1, "", "quantile"], [233, 1, 1, "", "sum"], [234, 1, 1, "", "tail"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[620, 1, 1, "", "agg"], [621, 1, 1, "", "all"], [622, 1, 1, "", "apply"], [623, 1, 1, "", "count"], [624, 1, 1, "", "first"], [625, 1, 1, "", "head"], [626, 1, 1, "", "last"], [627, 1, 1, "", "max"], [628, 1, 1, "", "mean"], [629, 1, 1, "", "median"], [630, 1, 1, "", "min"], [631, 1, 1, "", "n_unique"], [632, 1, 1, "", "quantile"], [633, 1, 1, "", "sum"], [634, 1, 1, "", "tail"]], "polars.testing": [[113, 4, 1, "", "assert_frame_equal"], [114, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[115, 0, 1, "", "column"], [116, 4, 1, "", "columns"], [117, 4, 1, "", "dataframes"], [118, 4, 1, "", "series"]], "polars.testing.parametric.column": [[115, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 137], "api": [1, 59, 60, 61, 62, 555], "provid": 1, "new": 1, "function": [1, 243, 545, 554], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908], "binari": [2, 540, 911], "boolean": [3, 541, 912], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 122], "activate_decim": 5, "load": [6, 122], "restore_default": 7, "save": [8, 122], "set_ascii_t": 9, "set_fmt_float": 10, "set_fmt_str_length": 11, "set_tbl_cell_align": 12, "set_tbl_col": 13, "set_tbl_column_data_type_inlin": 14, "set_tbl_dataframe_shape_below": 15, "set_tbl_format": 16, "set_tbl_hide_column_data_typ": 17, "set_tbl_hide_column_nam": 18, "set_tbl_hide_dataframe_shap": 19, "set_tbl_hide_dtype_separ": 20, "set_tbl_row": 21, "set_tbl_width_char": 22, "set_verbos": 23, "state": [24, 122], "datafram": [25, 26, 27, 28, 29, 30, 31, 32, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240], "write_avro": 25, "write_csv": 26, "write_databas": 27, "write_excel": 28, "write_ipc": 29, "write_json": [30, 619], "write_ndjson": 31, "write_parquet": 32, "datatyp": 33, "date": [34, 243, 508], "datetim": [35, 509], "durat": [36, 510], "float32": 37, "float64": 38, "int16": 39, "int32": 40, "int64": 41, "int8": 42, "list": [43, 384, 519], "null": 44, "object": 45, "sqlcontext": [46, 47, 48], "execut": 46, "queri": 47, "regist": 48, "stringcach": [49, 554], "struct": [50, 475, 476, 534, 551, 883, 884, 885, 886, 921], "time": [51, 243], "uint16": 52, "uint32": 53, "uint64": 54, "uint8": 55, "unknown": 56, "utf8": 57, "align_fram": 58, "register_dataframe_namespac": 59, "register_expr_namespac": 60, "register_lazyframe_namespac": 61, "register_series_namespac": 62, "arg_wher": 63, "build_info": 64, "collect_al": 65, "concat": [66, 267, 445, 663, 853], "cut": [67, 709], "date_rang": 68, "except": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 244], "arrowerror": 69, "columnnotfounderror": 70, "computeerror": 71, "duplicateerror": 72, "invalidoperationerror": 73, "nodataerror": 74, "norowsreturn": 75, "panicexcept": 76, "rowsexcept": 77, "schemaerror": 78, "schemafieldnotfounderror": 79, "shapeerror": 80, "structfieldnotfounderror": 81, "toomanyrowsreturn": 82, "from_arrow": 83, "from_datafram": 84, "from_dict": [85, 86], "from_numpi": 87, "from_panda": 88, "from_record": 89, "get_dummi": 90, "get_idx_typ": 91, "intern": [92, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634], "batch": 92, "batchedcsvread": [92, 556], "next_batch": 92, "ones": 93, "read_avro": 94, "read_csv": 95, "read_csv_batch": 96, "read_databas": 97, "read_delta": 98, "read_excel": 99, "read_ipc": 100, "read_ipc_schema": 101, "read_json": [102, 595], "read_ndjson": 103, "read_parquet": 104, "read_parquet_schema": 105, "scan_csv": 106, "scan_delta": 107, "scan_ipc": 108, "scan_ndjson": 109, "scan_parquet": 110, "scan_pyarrow_dataset": 111, "show_vers": 112, "test": [113, 114, 115, 116, 117, 118, 924], "assert_frame_equ": 113, "assert_series_equ": 114, "parametr": [115, 116, 117, 118], "column": [115, 116, 128, 543, 562], "seri": [118, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 917], "threadpool_s": 119, "toggle_string_cach": 120, "zero": 121, "option": 122, "current": 122, "us": 122, "context": 122, "manag": 122, "aggreg": [123, 245, 557, 641], "__dataframe__": 124, "appli": [125, 222, 252, 494, 622, 647], "clear": [126, 559, 697], "clone": [127, 560, 701], "corr": [129, 502], "describ": [130, 710], "drop": [131, 563], "drop_in_plac": 132, "drop_nul": [133, 315, 564, 714], "dtype": [134, 565, 752], "estimated_s": [135, 754], "explod": [136, 272, 354, 451, 567, 668, 759, 859], "fill_nan": [138, 356, 569, 761], "fill_nul": [139, 357, 570, 762], "filter": [140, 358, 571, 763], "find_idx_by_nam": 141, "fold": [142, 514], "frame_equ": 143, "get_column": [144, 145], "glimps": 146, "groupbi": [147, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 574, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 637], "groupby_dynam": [148, 575], "groupby_rol": [149, 576], "hash_row": 150, "head": [151, 225, 275, 364, 518, 577, 625, 671, 769], "height": 152, "hstack": 153, "insert_at_idx": 154, "interpol": [155, 366, 579, 771], "is_dupl": [156, 368, 774], "is_empti": [157, 775], "is_uniqu": [158, 378, 788], "item": [159, 790], "iter_row": 160, "iter_slic": 161, "join": [162, 276, 580, 672], "join_asof": [163, 581], "lazi": [164, 554, 583], "limit": [165, 383, 584, 793], "max": [166, 227, 279, 391, 522, 586, 627, 675, 725, 798], "mean": [167, 228, 280, 392, 523, 587, 628, 676, 726, 799], "median": [168, 229, 393, 524, 588, 629, 727, 800], "melt": [169, 589], "merge_sort": [170, 590], "min": [171, 230, 281, 400, 525, 591, 630, 677, 732, 801], "n_chunk": [172, 803], "n_uniqu": [173, 231, 402, 526, 631, 804], "null_count": [174, 405, 809], "partition_bi": 175, "pipe": [176, 592], "pivot": 177, "product": [178, 410, 813], "quantil": [179, 232, 411, 528, 594, 632, 814], "rechunk": [180, 413, 816], "renam": [181, 596, 818], "replac": [182, 461, 869], "replace_at_idx": 183, "revers": [184, 282, 417, 597, 678, 820], "row": [185, 186], "sampl": [187, 429, 832], "schema": [188, 598], "select": [189, 242, 531, 549, 599, 640, 919], "shape": [190, 838], "shift": [191, 283, 432, 600, 679, 839], "shift_and_fil": [192, 433, 601, 840], "shrink_to_fit": [193, 842], "slice": [194, 284, 440, 465, 605, 680, 848, 873], "sort": [195, 285, 441, 606, 681, 849], "std": [196, 444, 533, 607, 851], "sum": [197, 233, 286, 478, 535, 608, 633, 682, 887], "tail": [198, 234, 287, 479, 536, 609, 634, 683, 888], "take_everi": [199, 481, 610, 890], "to_arrow": [200, 894], "to_dict": [201, 202], "to_dummi": [203, 895], "to_numpi": [204, 898], "to_panda": [205, 899], "to_seri": 206, "to_struct": [207, 289, 685], "transpos": 208, "uniqu": [209, 290, 486, 611, 686, 902], "unnest": [210, 612, 886], "unstack": 211, "updat": [212, 613], "upsampl": 213, "var": [214, 490, 537, 614, 906], "vstack": 215, "width": [216, 615], "with_column": [217, 616], "with_row_count": [218, 618], "__iter__": 219, "agg": [220, 620], "all": [221, 249, 492, 621, 644], "count": [223, 305, 503, 623], "first": [224, 273, 359, 513, 572, 624, 669], "last": [226, 277, 381, 582, 626, 673], "attribut": [235, 635, 910], "comput": [236, 544, 914], "descript": [237, 636, 915], "export": [238, 916], "miscellan": [241, 548, 554, 639, 918], "manipul": [242, 549, 640, 919], "data": 243, "type": 243, "numer": 243, "nest": 243, "other": 243, "expr": [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491], "ab": [246, 642], "agg_group": 247, "alia": [248, 643], "ani": [250, 493, 645], "append": [251, 646], "arcco": [253, 648], "arccosh": [254, 649], "arcsin": [255, 650], "arcsinh": [256, 651], "arctan": [257, 652], "arctanh": [258, 653], "arg_max": [259, 265, 654, 661], "arg_min": [260, 266, 655, 662], "arg_sort": [261, 656], "arg_tru": [262, 657], "arg_uniqu": [263, 658], "argsort": [264, 659], "arr": [265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686], "contain": [268, 292, 446, 664, 687, 854], "count_match": [269, 447, 665, 855], "diff": [270, 312, 666, 711], "eval": [271, 667], "get": [274, 670], "length": [278, 456, 674, 864], "take": [288, 480, 684, 889], "backward_fil": 291, "bin": [292, 293, 294, 295, 296, 687, 688, 689, 690, 691], "decod": [293, 448, 688, 856], "encod": [294, 449, 689, 857], "ends_with": [295, 450, 690, 858], "starts_with": [296, 469, 691, 877], "cast": [297, 692], "cat": [298, 693, 694], "set_ord": [298, 694], "ceil": [299, 695], "clip": [300, 698], "clip_max": [301, 699], "clip_min": [302, 700], "co": [303, 702], "cosh": [304, 703], "cumcount": 306, "cummax": [307, 704], "cummin": [308, 705], "cumprod": [309, 706], "cumsum": [310, 507, 707], "cumulative_ev": [311, 708], "dot": [313, 712], "drop_nan": [314, 713], "dt": [316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751], "cast_time_unit": [316, 716], "combin": [317, 717], "convert_time_zon": [318, 718], "dai": [319, 320, 719, 720], "epoch": [321, 721], "hour": [322, 323, 722, 723], "iso_year": [324, 724], "microsecond": [325, 326, 728, 729], "millisecond": [327, 328, 730, 731], "minut": [329, 330, 733, 734], "month": [331, 735], "nanosecond": [332, 333, 736, 737], "offset_bi": [334, 738], "ordinal_dai": [335, 739], "quarter": [336, 740], "replace_time_zon": [337, 741], "round": [338, 428, 742, 831], "second": [339, 340, 743, 744], "strftime": [341, 745], "timestamp": [342, 746], "truncat": [343, 747], "week": [344, 748], "weekdai": [345, 749], "with_time_unit": [346, 750], "year": [347, 751], "entropi": [348, 753], "ewm_mean": [349, 755], "ewm_std": [350, 756], "ewm_var": [351, 757], "exclud": [352, 512], "exp": [353, 758], "extend_const": [355, 760], "flatten": 360, "floor": [361, 765], "forward_fil": 362, "hash": [363, 768], "inspect": [365, 578], "is_between": [367, 772], "is_finit": [369, 776], "is_first": [370, 777], "is_in": [371, 779], "is_infinit": [372, 780], "is_nan": [373, 781], "is_not": 374, "is_not_nan": [375, 782], "is_not_nul": [376, 783], "is_nul": [377, 784], "keep_nam": 379, "kurtosi": [380, 791], "len": [382, 792], "log": [385, 794], "log10": [386, 795], "lower_bound": [387, 796], "map": [388, 521, 585], "map_alia": 389, "map_dict": [390, 797], "meta": [394, 395, 396, 397, 398, 399, 547], "has_multiple_output": 394, "is_regex_project": 395, "output_nam": 396, "pop": 397, "root_nam": 398, "undo_alias": 399, "mode": [401, 802], "nan_max": [403, 806], "nan_min": [404, 807], "over": 406, "pct_chang": [407, 810], "pow": 408, "prefix": 409, "rank": [412, 815], "reinterpret": [414, 817], "repeat_bi": 415, "reshap": [416, 819], "rolling_appli": [418, 821], "rolling_max": [419, 822], "rolling_mean": [420, 823], "rolling_median": [421, 824], "rolling_min": [422, 825], "rolling_quantil": [423, 826], "rolling_skew": [424, 827], "rolling_std": [425, 828], "rolling_sum": [426, 829], "rolling_var": [427, 830], "search_sort": [430, 833], "set_sort": [431, 837], "shrink_dtyp": [434, 841], "shuffl": [435, 843], "sign": [436, 844], "sin": [437, 845], "sinh": [438, 846], "skew": [439, 847], "sort_bi": 442, "sqrt": [443, 850], "str": [445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882], "extract": [452, 860], "extract_al": [453, 861], "json_extract": [454, 862], "json_path_match": [455, 863], "ljust": [457, 865], "lstrip": [458, 866], "n_char": [459, 867], "parse_int": [460, 868], "replace_al": [462, 870], "rjust": [463, 871], "rstrip": [464, 872], "split": [466, 874], "split_exact": [467, 875], "splitn": [468, 876], "strip": [470, 878], "strptime": [471, 879], "to_lowercas": [472, 880], "to_uppercas": [473, 881], "zfill": [474, 882], "field": [475, 883, 884], "rename_field": [476, 885], "suffix": 477, "tan": [482, 891], "tanh": [483, 892], "to_phys": [484, 900], "top_k": [485, 901], "unique_count": [487, 903], "upper_bound": [488, 904], "value_count": [489, 905], "where": 491, "arang": 495, "arg_sort_bi": 496, "avg": 497, "coalesc": 498, "col": 499, "concat_list": 500, "concat_str": 501, "cov": 504, "cumfold": 505, "cumreduc": 506, "element": 511, "format": 515, "from_epoch": 516, "group": 517, "lit": 520, "pearson_corr": 527, "reduc": 529, "repeat": 530, "spearman_rank_corr": 532, "when": 538, "arrai": [539, 909], "categori": [542, 913], "name": [543, 805], "express": 546, "string": [550, 920], "tempor": [552, 922], "window": 553, "convers": 554, "eager": 554, "parallel": 554, "refer": 555, "input": 556, "output": 556, "csv": 556, "feather": 556, "ipc": 556, "parquet": 556, "databas": 556, "json": 556, "avro": 556, "excel": 556, "delta": 556, "lake": 556, "dataset": 556, "lazyfram": [558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638], "cach": 558, "collect": 561, "explain": 566, "fetch": 568, "from_json": 573, "profil": 593, "show_graph": 602, "sink_ipc": 603, "sink_parquet": 604, "with_context": 617, "lazygroupbi": [620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634], "read": 639, "write": 639, "logic": 639, "plan": 639, "chunk_length": 696, "flag": 764, "get_chunk": 766, "has_valid": 767, "inner_dtyp": 770, "is_boolean": 773, "is_float": 778, "is_numer": 785, "is_sort": 786, "is_tempor": 787, "is_utf8": 789, "new_from_index": 808, "peak_max": 811, "peak_min": 812, "series_equ": 834, "set": 835, "set_at_idx": 836, "time_unit": 893, "to_fram": 896, "to_list": 897, "view": 907, "zip_with": 908, "sql": 923, "method": 923, "assert": 924, "properti": 924, "base": 924, "strategi": 924, "helper": 924, "util": 925}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.scan_ndjson": [[109, "polars-scan-ndjson"]], "polars.read_delta": [[98, "polars-read-delta"]], "polars.zeros": [[121, "polars-zeros"]], "polars.DataFrame.clear": [[126, "polars-dataframe-clear"]], "polars.exceptions.InvalidOperationError": [[73, "polars-exceptions-invalidoperationerror"]], "polars.DataFrame.estimated_size": [[135, "polars-dataframe-estimated-size"]], "polars.read_ipc_schema": [[101, "polars-read-ipc-schema"]], "polars.toggle_string_cache": [[120, "polars-toggle-string-cache"]], "polars.read_ndjson": [[103, "polars-read-ndjson"]], "polars.from_records": [[89, "polars-from-records"]], "polars.from_arrow": [[83, "polars-from-arrow"]], "polars.DataFrame.__dataframe__": [[124, "polars-dataframe-dataframe"]], "polars.testing.parametric.column": [[115, "polars-testing-parametric-column"]], "polars.testing.assert_frame_equal": [[113, "polars-testing-assert-frame-equal"]], "polars.read_avro": [[94, "polars-read-avro"]], "polars.date_range": [[68, "polars-date-range"]], "Config": [[122, "config"]], "Config options": [[122, "config-options"]], "Config load, save, and current state": [[122, "config-load-save-and-current-state"]], "Use as a context manager": [[122, "use-as-a-context-manager"]], "polars.exceptions.RowsException": [[77, "polars-exceptions-rowsexception"]], "polars.scan_ipc": [[108, "polars-scan-ipc"]], "polars.from_pandas": [[88, "polars-from-pandas"]], "polars.exceptions.SchemaError": [[78, "polars-exceptions-schemaerror"]], "polars.internals.batched.BatchedCsvReader.next_batches": [[92, "polars-internals-batched-batchedcsvreader-next-batches"]], "polars.read_parquet_schema": [[105, "polars-read-parquet-schema"]], "polars.read_json": [[102, "polars-read-json"]], "polars.exceptions.ArrowError": [[69, "polars-exceptions-arrowerror"]], "polars.exceptions.StructFieldNotFoundError": [[81, "polars-exceptions-structfieldnotfounderror"]], "polars.read_database": [[97, "polars-read-database"]], "polars.scan_pyarrow_dataset": [[111, "polars-scan-pyarrow-dataset"]], "polars.get_idx_type": [[91, "polars-get-idx-type"]], "polars.read_parquet": [[104, "polars-read-parquet"]], "polars.from_dicts": [[86, "polars-from-dicts"]], "polars.from_dataframe": [[84, "polars-from-dataframe"]], "polars.DataFrame.columns": [[128, "polars-dataframe-columns"]], "polars.exceptions.NoRowsReturned": [[75, "polars-exceptions-norowsreturned"]], "polars.DataFrame.drop": [[131, "polars-dataframe-drop"]], "polars.DataFrame.drop_nulls": [[133, "polars-dataframe-drop-nulls"]], "polars.testing.assert_series_equal": [[114, "polars-testing-assert-series-equal"]], "polars.read_excel": [[99, "polars-read-excel"]], "polars.exceptions.NoDataError": [[74, "polars-exceptions-nodataerror"]], "polars.scan_csv": [[106, "polars-scan-csv"]], "polars.testing.parametric.dataframes": [[117, "polars-testing-parametric-dataframes"]], "Aggregation": [[123, "aggregation"], [641, "aggregation"], [557, "aggregation"], [245, "aggregation"]], "polars.read_ipc": [[100, "polars-read-ipc"]], "polars.exceptions.ColumnNotFoundError": [[70, "polars-exceptions-columnnotfounderror"]], "polars.exceptions.DuplicateError": [[72, "polars-exceptions-duplicateerror"]], "polars.DataFrame.clone": [[127, "polars-dataframe-clone"]], "polars.exceptions.ComputeError": [[71, "polars-exceptions-computeerror"]], "polars.threadpool_size": [[119, "polars-threadpool-size"]], "polars.DataFrame.apply": [[125, "polars-dataframe-apply"]], "polars.exceptions.ShapeError": [[80, "polars-exceptions-shapeerror"]], "polars.exceptions.TooManyRowsReturned": [[82, "polars-exceptions-toomanyrowsreturned"]], "polars.from_numpy": [[87, "polars-from-numpy"]], "polars.ones": [[93, "polars-ones"]], "polars.read_csv_batched": [[96, "polars-read-csv-batched"]], "polars.get_dummies": [[90, "polars-get-dummies"]], "polars.DataFrame.describe": [[130, "polars-dataframe-describe"]], "polars.read_csv": [[95, "polars-read-csv"]], "polars.scan_delta": [[107, "polars-scan-delta"]], "polars.scan_parquet": [[110, "polars-scan-parquet"]], "polars.DataFrame.drop_in_place": [[132, "polars-dataframe-drop-in-place"]], "polars.exceptions.SchemaFieldNotFoundError": [[79, "polars-exceptions-schemafieldnotfounderror"]], "polars.show_versions": [[112, "polars-show-versions"]], "polars.testing.parametric.columns": [[116, "polars-testing-parametric-columns"]], "polars.DataFrame.corr": [[129, "polars-dataframe-corr"]], "polars.DataFrame.dtypes": [[134, "polars-dataframe-dtypes"]], "polars.testing.parametric.series": [[118, "polars-testing-parametric-series"]], "polars.from_dict": [[85, "polars-from-dict"]], "polars.exceptions.PanicException": [[76, "polars-exceptions-panicexception"]], "polars.Null": [[44, "polars-null"]], "polars.Struct": [[50, "polars-struct"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.Config.set_tbl_cell_alignment": [[12, "polars-config-set-tbl-cell-alignment"]], "polars.Int64": [[41, "polars-int64"]], "polars.Config.set_tbl_width_chars": [[22, "polars-config-set-tbl-width-chars"]], "polars.SQLContext.execute": [[46, "polars-sqlcontext-execute"]], "polars.Config.set_verbose": [[23, "polars-config-set-verbose"]], "polars.DataFrame.write_ipc": [[29, "polars-dataframe-write-ipc"]], "polars.Config.save": [[8, "polars-config-save"]], "polars.Float64": [[38, "polars-float64"]], "polars.SQLContext.register": [[48, "polars-sqlcontext-register"]], "polars.Config.set_ascii_tables": [[9, "polars-config-set-ascii-tables"]], "polars.UInt32": [[53, "polars-uint32"]], "polars.Date": [[34, "polars-date"]], "polars.Config.set_tbl_column_data_type_inline": [[14, "polars-config-set-tbl-column-data-type-inline"]], "polars.DataFrame.write_avro": [[25, "polars-dataframe-write-avro"]], "polars.api.register_dataframe_namespace": [[59, "polars-api-register-dataframe-namespace"]], "polars.concat": [[66, "polars-concat"]], "polars.Float32": [[37, "polars-float32"]], "polars.Config.set_tbl_hide_column_names": [[18, "polars-config-set-tbl-hide-column-names"]], "polars.DataFrame.write_csv": [[26, "polars-dataframe-write-csv"]], "polars.Config.set_tbl_cols": [[13, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_dataframe_shape_below": [[15, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.state": [[24, "polars-config-state"]], "polars.DataFrame.write_parquet": [[32, "polars-dataframe-write-parquet"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Config.set_tbl_hide_column_data_types": [[17, "polars-config-set-tbl-hide-column-data-types"]], "polars.DataType": [[33, "polars-datatype"]], "polars.arg_where": [[63, "polars-arg-where"]], "polars.Config.restore_defaults": [[7, "polars-config-restore-defaults"]], "polars.DataFrame.write_database": [[27, "polars-dataframe-write-database"]], "polars.Int8": [[42, "polars-int8"]], "polars.collect_all": [[65, "polars-collect-all"]], "polars.Config.load": [[6, "polars-config-load"]], "polars.SQLContext.query": [[47, "polars-sqlcontext-query"]], "polars.Utf8": [[57, "polars-utf8"]], "polars.Config.set_tbl_formatting": [[16, "polars-config-set-tbl-formatting"]], "polars.Duration": [[36, "polars-duration"]], "polars.StringCache": [[49, "polars-stringcache"]], "polars.List": [[43, "polars-list"]], "polars.api.register_series_namespace": [[62, "polars-api-register-series-namespace"]], "polars.Config.activate_decimals": [[5, "polars-config-activate-decimals"]], "polars.Time": [[51, "polars-time"]], "polars.Config.set_tbl_hide_dtype_separator": [[20, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Datetime": [[35, "polars-datetime"]], "polars.api.register_expr_namespace": [[60, "polars-api-register-expr-namespace"]], "polars.api.register_lazyframe_namespace": [[61, "polars-api-register-lazyframe-namespace"]], "polars.UInt16": [[52, "polars-uint16"]], "polars.Binary": [[2, "polars-binary"]], "polars.cut": [[67, "polars-cut"]], "polars.align_frames": [[58, "polars-align-frames"]], "polars.DataFrame.write_excel": [[28, "polars-dataframe-write-excel"]], "polars.Config.set_tbl_rows": [[21, "polars-config-set-tbl-rows"]], "polars.UInt8": [[55, "polars-uint8"]], "polars.Int32": [[40, "polars-int32"]], "polars.UInt64": [[54, "polars-uint64"]], "polars.Config.set_fmt_float": [[10, "polars-config-set-fmt-float"]], "polars.DataFrame.write_ndjson": [[31, "polars-dataframe-write-ndjson"]], "polars.Config.set_tbl_hide_dataframe_shape": [[19, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.DataFrame.write_json": [[30, "polars-dataframe-write-json"]], "polars.Int16": [[39, "polars-int16"]], "polars.Unknown": [[56, "polars-unknown"]], "polars.build_info": [[64, "polars-build-info"]], "polars.Config.set_fmt_str_lengths": [[11, "polars-config-set-fmt-str-lengths"]], "polars.Object": [[45, "polars-object"]], "polars.Series.rolling_median": [[824, "polars-series-rolling-median"]], "polars.Series.set_at_idx": [[836, "polars-series-set-at-idx"]], "polars.Series.rechunk": [[816, "polars-series-rechunk"]], "polars.Series.rolling_max": [[822, "polars-series-rolling-max"]], "polars.Series.str": [[852, "polars-series-str"]], "polars.Series.sample": [[832, "polars-series-sample"]], "polars.Series.rename": [[818, "polars-series-rename"]], "polars.Series.rolling_var": [[830, "polars-series-rolling-var"]], "polars.Series.sign": [[844, "polars-series-sign"]], "polars.Series.slice": [[848, "polars-series-slice"]], "polars.Series.str.json_extract": [[862, "polars-series-str-json-extract"]], "polars.Series.std": [[851, "polars-series-std"]], "polars.Series.rolling_apply": [[821, "polars-series-rolling-apply"]], "polars.Series.str.lengths": [[864, "polars-series-str-lengths"]], "polars.Series.str.n_chars": [[867, "polars-series-str-n-chars"]], "polars.Series.str.decode": [[856, "polars-series-str-decode"]], "polars.Series.str.replace": [[869, "polars-series-str-replace"]], "polars.Series.rolling_sum": [[829, "polars-series-rolling-sum"]], "polars.Series.str.parse_int": [[868, "polars-series-str-parse-int"]], "polars.Series.str.ends_with": [[858, "polars-series-str-ends-with"]], "polars.Series.str.strptime": [[879, "polars-series-str-strptime"]], "polars.Series.rolling_std": [[828, "polars-series-rolling-std"]], "polars.Series.str.extract": [[860, "polars-series-str-extract"]], "polars.Series.str.rstrip": [[872, "polars-series-str-rstrip"]], "polars.Series.round": [[831, "polars-series-round"]], "polars.Series.str.extract_all": [[861, "polars-series-str-extract-all"]], "polars.Series.str.encode": [[857, "polars-series-str-encode"]], "polars.Series.set_sorted": [[837, "polars-series-set-sorted"]], "polars.Series.str.concat": [[853, "polars-series-str-concat"]], "polars.Series.str.explode": [[859, "polars-series-str-explode"]], "polars.Series.str.to_uppercase": [[881, "polars-series-str-to-uppercase"]], "polars.Series.sort": [[849, "polars-series-sort"]], "polars.Series.shrink_dtype": [[841, "polars-series-shrink-dtype"]], "polars.Series.sinh": [[846, "polars-series-sinh"]], "polars.Series.str.contains": [[854, "polars-series-str-contains"]], "polars.Series.str.to_lowercase": [[880, "polars-series-str-to-lowercase"]], "polars.Series.rolling_mean": [[823, "polars-series-rolling-mean"]], "polars.Series.set": [[835, "polars-series-set"]], "polars.Series.shuffle": [[843, "polars-series-shuffle"]], "polars.Series.str.split_exact": [[875, "polars-series-str-split-exact"]], "polars.Series.rolling_skew": [[827, "polars-series-rolling-skew"]], "polars.Series.reshape": [[819, "polars-series-reshape"]], "polars.Series.skew": [[847, "polars-series-skew"]], "polars.Series.str.count_match": [[855, "polars-series-str-count-match"]], "polars.Series.str.replace_all": [[870, "polars-series-str-replace-all"]], "polars.Series.str.json_path_match": [[863, "polars-series-str-json-path-match"]], "polars.Series.str.split": [[874, "polars-series-str-split"]], "polars.Series.rolling_min": [[825, "polars-series-rolling-min"]], "polars.Series.str.lstrip": [[866, "polars-series-str-lstrip"]], "polars.Series.str.slice": [[873, "polars-series-str-slice"]], "polars.Series.reverse": [[820, "polars-series-reverse"]], "polars.Series.series_equal": [[834, "polars-series-series-equal"]], "polars.Series.shrink_to_fit": [[842, "polars-series-shrink-to-fit"]], "polars.Series.shift_and_fill": [[840, "polars-series-shift-and-fill"]], "polars.Series.str.zfill": [[882, "polars-series-str-zfill"]], "polars.Series.reinterpret": [[817, "polars-series-reinterpret"]], "polars.Series.search_sorted": [[833, "polars-series-search-sorted"]], "polars.Series.sqrt": [[850, "polars-series-sqrt"]], "polars.Series.rolling_quantile": [[826, "polars-series-rolling-quantile"]], "polars.Series.shift": [[839, "polars-series-shift"]], "polars.Series.shape": [[838, "polars-series-shape"]], "polars.Series.sin": [[845, "polars-series-sin"]], "polars.Series.str.ljust": [[865, "polars-series-str-ljust"]], "polars.Series.str.starts_with": [[877, "polars-series-str-starts-with"]], "polars.Series.str.splitn": [[876, "polars-series-str-splitn"]], "polars.Series.str.rjust": [[871, "polars-series-str-rjust"]], "polars.Series.str.strip": [[878, "polars-series-str-strip"]], "polars.Series.struct.field": [[883, "polars-series-struct-field"]], "polars.Series.name": [[805, "polars-series-name"]], "polars.Series.extend_constant": [[760, "polars-series-extend-constant"]], "polars.Series.is_duplicated": [[774, "polars-series-is-duplicated"]], "polars.Series.peak_min": [[812, "polars-series-peak-min"]], "polars.Series.limit": [[793, "polars-series-limit"]], "polars.Series.is_finite": [[776, "polars-series-is-finite"]], "polars.Series.is_numeric": [[785, "polars-series-is-numeric"]], "polars.Series.null_count": [[809, "polars-series-null-count"]], "polars.Series.lower_bound": [[796, "polars-series-lower-bound"]], "polars.Series.estimated_size": [[754, "polars-series-estimated-size"]], "polars.Series.dt.weekday": [[749, "polars-series-dt-weekday"]], "polars.Series.fill_nan": [[761, "polars-series-fill-nan"]], "polars.Series.exp": [[758, "polars-series-exp"]], "polars.Series.ewm_mean": [[755, "polars-series-ewm-mean"]], "polars.Series.hash": [[768, "polars-series-hash"]], "polars.Series.log10": [[795, "polars-series-log10"]], "polars.Series.is_not_nan": [[782, "polars-series-is-not-nan"]], "polars.Series.fill_null": [[762, "polars-series-fill-null"]], "polars.Series.map_dict": [[797, "polars-series-map-dict"]], "polars.Series.max": [[798, "polars-series-max"]], "polars.Series.is_temporal": [[787, "polars-series-is-temporal"]], "polars.Series.filter": [[763, "polars-series-filter"]], "polars.Series.flags": [[764, "polars-series-flags"]], "polars.Series.floor": [[765, "polars-series-floor"]], "polars.Series.is_unique": [[788, "polars-series-is-unique"]], "polars.Series.interpolate": [[771, "polars-series-interpolate"]], "polars.Series.dt.year": [[751, "polars-series-dt-year"]], "polars.Series.product": [[813, "polars-series-product"]], "polars.Series.inner_dtype": [[770, "polars-series-inner-dtype"]], "polars.Series.ewm_var": [[757, "polars-series-ewm-var"]], "polars.Series.pct_change": [[810, "polars-series-pct-change"]], "polars.Series.explode": [[759, "polars-series-explode"]], "polars.Series.is_boolean": [[773, "polars-series-is-boolean"]], "polars.Series.median": [[800, "polars-series-median"]], "polars.Series.kurtosis": [[791, "polars-series-kurtosis"]], "polars.Series.dt.with_time_unit": [[750, "polars-series-dt-with-time-unit"]], "polars.Series.is_infinite": [[780, "polars-series-is-infinite"]], "polars.Series.peak_max": [[811, "polars-series-peak-max"]], "polars.Series.quantile": [[814, "polars-series-quantile"]], "polars.Series.get_chunks": [[766, "polars-series-get-chunks"]], "polars.Series.log": [[794, "polars-series-log"]], "polars.Series.is_first": [[777, "polars-series-is-first"]], "polars.Series.is_not_null": [[783, "polars-series-is-not-null"]], "polars.Series.n_unique": [[804, "polars-series-n-unique"]], "polars.Series.item": [[790, "polars-series-item"]], "polars.Series.n_chunks": [[803, "polars-series-n-chunks"]], "polars.Series.ewm_std": [[756, "polars-series-ewm-std"]], "polars.Series.is_empty": [[775, "polars-series-is-empty"]], "polars.Series.entropy": [[753, "polars-series-entropy"]], "polars.Series.is_null": [[784, "polars-series-is-null"]], "polars.Series.head": [[769, "polars-series-head"]], "polars.Series.is_sorted": [[786, "polars-series-is-sorted"]], "polars.Series.new_from_index": [[808, "polars-series-new-from-index"]], "polars.Series.is_nan": [[781, "polars-series-is-nan"]], "polars.Series.mode": [[802, "polars-series-mode"]], "polars.Series.is_utf8": [[789, "polars-series-is-utf8"]], "polars.Series.nan_max": [[806, "polars-series-nan-max"]], "polars.Series.dtype": [[752, "polars-series-dtype"]], "polars.Series.is_float": [[778, "polars-series-is-float"]], "polars.Series.len": [[792, "polars-series-len"]], "polars.Series.nan_min": [[807, "polars-series-nan-min"]], "polars.Series.rank": [[815, "polars-series-rank"]], "polars.Series.min": [[801, "polars-series-min"]], "polars.Series.mean": [[799, "polars-series-mean"]], "polars.Series.has_validity": [[767, "polars-series-has-validity"]], "polars.Series.is_between": [[772, "polars-series-is-between"]], "polars.Series.is_in": [[779, "polars-series-is-in"]], "polars.Series.dt.week": [[748, "polars-series-dt-week"]], "polars.Series.clear": [[697, "polars-series-clear"]], "polars.Series.arr.take": [[684, "polars-series-arr-take"]], "polars.Series.dt.convert_time_zone": [[718, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.min": [[732, "polars-series-dt-min"]], "polars.Series.dt.offset_by": [[738, "polars-series-dt-offset-by"]], "polars.Series.arr.sum": [[682, "polars-series-arr-sum"]], "polars.Series.ceil": [[695, "polars-series-ceil"]], "polars.Series.cummin": [[705, "polars-series-cummin"]], "polars.Series.dt.mean": [[726, "polars-series-dt-mean"]], "polars.Series.arr.slice": [[680, "polars-series-arr-slice"]], "polars.Series.cos": [[702, "polars-series-cos"]], "polars.Series.arr.sort": [[681, "polars-series-arr-sort"]], "polars.Series.dt.millisecond": [[730, "polars-series-dt-millisecond"]], "polars.Series.dt.minutes": [[734, "polars-series-dt-minutes"]], "polars.Series.dt.nanosecond": [[736, "polars-series-dt-nanosecond"]], "polars.Series.dt.second": [[743, "polars-series-dt-second"]], "polars.Series.dt.nanoseconds": [[737, "polars-series-dt-nanoseconds"]], "polars.Series.clip_max": [[699, "polars-series-clip-max"]], "polars.Series.dt.hours": [[723, "polars-series-dt-hours"]], "polars.Series.dt.combine": [[717, "polars-series-dt-combine"]], "polars.Series.dt": [[715, "polars-series-dt"]], "polars.Series.bin.decode": [[688, "polars-series-bin-decode"]], "polars.Series.bin.encode": [[689, "polars-series-bin-encode"]], "polars.Series.dot": [[712, "polars-series-dot"]], "polars.Series.dt.iso_year": [[724, "polars-series-dt-iso-year"]], "polars.Series.cast": [[692, "polars-series-cast"]], "polars.Series.dt.quarter": [[740, "polars-series-dt-quarter"]], "polars.Series.dt.timestamp": [[746, "polars-series-dt-timestamp"]], "polars.Series.clip": [[698, "polars-series-clip"]], "polars.Series.clone": [[701, "polars-series-clone"]], "polars.Series.arr.tail": [[683, "polars-series-arr-tail"]], "polars.Series.cummax": [[704, "polars-series-cummax"]], "polars.Series.diff": [[711, "polars-series-diff"]], "polars.Series.dt.days": [[720, "polars-series-dt-days"]], "polars.Series.dt.microseconds": [[729, "polars-series-dt-microseconds"]], "polars.Series.dt.minute": [[733, "polars-series-dt-minute"]], "polars.Series.cumulative_eval": [[708, "polars-series-cumulative-eval"]], "polars.Series.cat.set_ordering": [[694, "polars-series-cat-set-ordering"]], "polars.Series.dt.cast_time_unit": [[716, "polars-series-dt-cast-time-unit"]], "polars.Series.bin.contains": [[687, "polars-series-bin-contains"]], "polars.Series.dt.round": [[742, "polars-series-dt-round"]], "polars.Series.bin.ends_with": [[690, "polars-series-bin-ends-with"]], "polars.Series.chunk_lengths": [[696, "polars-series-chunk-lengths"]], "polars.Series.drop_nulls": [[714, "polars-series-drop-nulls"]], "polars.Series.arr.to_struct": [[685, "polars-series-arr-to-struct"]], "polars.Series.clip_min": [[700, "polars-series-clip-min"]], "polars.Series.dt.hour": [[722, "polars-series-dt-hour"]], "polars.Series.cut": [[709, "polars-series-cut"]], "polars.Series.dt.median": [[727, "polars-series-dt-median"]], "polars.Series.dt.month": [[735, "polars-series-dt-month"]], "polars.Series.dt.strftime": [[745, "polars-series-dt-strftime"]], "polars.Series.dt.max": [[725, "polars-series-dt-max"]], "polars.Series.cosh": [[703, "polars-series-cosh"]], "polars.Series.describe": [[710, "polars-series-describe"]], "polars.Series.dt.day": [[719, "polars-series-dt-day"]], "polars.Series.dt.seconds": [[744, "polars-series-dt-seconds"]], "polars.Series.cat": [[693, "polars-series-cat"]], "polars.Series.drop_nans": [[713, "polars-series-drop-nans"]], "polars.Series.dt.microsecond": [[728, "polars-series-dt-microsecond"]], "polars.Series.dt.ordinal_day": [[739, "polars-series-dt-ordinal-day"]], "polars.Series.dt.epoch": [[721, "polars-series-dt-epoch"]], "polars.Series.arr.unique": [[686, "polars-series-arr-unique"]], "polars.Series.cumsum": [[707, "polars-series-cumsum"]], "polars.Series.dt.milliseconds": [[731, "polars-series-dt-milliseconds"]], "polars.Series.cumprod": [[706, "polars-series-cumprod"]], "polars.Series.dt.replace_time_zone": [[741, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.truncate": [[747, "polars-series-dt-truncate"]], "polars.Series.bin.starts_with": [[691, "polars-series-bin-starts-with"]], "polars.Series.unique_counts": [[903, "polars-series-unique-counts"]], "Manipulation/selection": [[919, "manipulation-selection"], [640, "manipulation-selection"], [549, "manipulation-selection"], [242, "manipulation-selection"]], "polars.Series.take_every": [[890, "polars-series-take-every"]], "polars.Series.time_unit": [[893, "polars-series-time-unit"]], "Testing": [[924, "testing"]], "Asserts": [[924, "asserts"]], "Property-based testing": [[924, "property-based-testing"]], "Strategies": [[924, "strategies"]], "Strategy helpers": [[924, "strategy-helpers"]], "polars.Series.view": [[907, "polars-series-view"]], "polars.Series.struct.unnest": [[886, "polars-series-struct-unnest"]], "polars.Series.take": [[889, "polars-series-take"]], "polars.Series.to_pandas": [[899, "polars-series-to-pandas"]], "Miscellaneous": [[918, "miscellaneous"], [639, "miscellaneous"], [554, "miscellaneous"], [548, "miscellaneous"], [241, "miscellaneous"]], "polars.Series.to_dummies": [[895, "polars-series-to-dummies"]], "polars.Series.upper_bound": [[904, "polars-series-upper-bound"]], "polars.Series.struct.fields": [[884, "polars-series-struct-fields"]], "SQL": [[923, "sql"]], "Methods": [[923, "methods"]], "polars.Series.unique": [[902, "polars-series-unique"]], "Array": [[909, "array"], [539, "array"]], "Computation": [[914, "computation"], [544, "computation"], [236, "computation"]], "polars.Series.tan": [[891, "polars-series-tan"]], "polars.Series.top_k": [[901, "polars-series-top-k"]], "polars.Series.zip_with": [[908, "polars-series-zip-with"]], "polars.Series.struct.rename_fields": [[885, "polars-series-struct-rename-fields"]], "Boolean": [[912, "boolean"], [541, "boolean"]], "polars.Series.to_frame": [[896, "polars-series-to-frame"]], "polars.Series.tanh": [[892, "polars-series-tanh"]], "polars.Series.to_numpy": [[898, "polars-series-to-numpy"]], "Series": [[917, "series"]], "Attributes": [[910, "attributes"], [635, "attributes"], [235, "attributes"]], "polars.Series.to_physical": [[900, "polars-series-to-physical"]], "polars.Series.value_counts": [[905, "polars-series-value-counts"]], "Strings": [[920, "strings"], [550, "strings"]], "Binary": [[911, "binary"], [540, "binary"]], "polars.Series.to_list": [[897, "polars-series-to-list"]], "Descriptive": [[915, "descriptive"], [636, "descriptive"], [237, "descriptive"]], "Categories": [[913, "categories"], [542, "categories"]], "polars.Series.var": [[906, "polars-series-var"]], "polars.Series.tail": [[888, "polars-series-tail"]], "Temporal": [[922, "temporal"], [552, "temporal"]], "polars.Series.sum": [[887, "polars-series-sum"]], "Utils": [[925, "utils"]], "Struct": [[921, "struct"], [551, "struct"]], "Export": [[916, "export"], [238, "export"]], "polars.Series.to_arrow": [[894, "polars-series-to-arrow"]], "polars.Series.arr.concat": [[663, "polars-series-arr-concat"]], "polars.Series.arctanh": [[653, "polars-series-arctanh"]], "polars.Series.arr.first": [[669, "polars-series-arr-first"]], "polars.Series.arg_unique": [[658, "polars-series-arg-unique"]], "polars.Series.arr.eval": [[667, "polars-series-arr-eval"]], "polars.Series.arg_min": [[655, "polars-series-arg-min"]], "polars.Series.alias": [[643, "polars-series-alias"]], "polars.internals.lazyframe.groupby.LazyGroupBy.n_unique": [[631, "polars-internals-lazyframe-groupby-lazygroupby-n-unique"]], "polars.Series.arctan": [[652, "polars-series-arctan"]], "polars.Series.apply": [[647, "polars-series-apply"]], "LazyFrame": [[638, "lazyframe"]], "polars.LazyFrame.with_context": [[617, "polars-lazyframe-with-context"]], "polars.internals.lazyframe.groupby.LazyGroupBy.count": [[623, "polars-internals-lazyframe-groupby-lazygroupby-count"]], "polars.internals.lazyframe.groupby.LazyGroupBy.min": [[630, "polars-internals-lazyframe-groupby-lazygroupby-min"]], "polars.Series.abs": [[642, "polars-series-abs"]], "polars.internals.lazyframe.groupby.LazyGroupBy.median": [[629, "polars-internals-lazyframe-groupby-lazygroupby-median"]], "polars.Series.arr.arg_max": [[661, "polars-series-arr-arg-max"]], "polars.internals.lazyframe.groupby.LazyGroupBy.agg": [[620, "polars-internals-lazyframe-groupby-lazygroupby-agg"]], "polars.internals.lazyframe.groupby.LazyGroupBy.quantile": [[632, "polars-internals-lazyframe-groupby-lazygroupby-quantile"]], "polars.internals.lazyframe.groupby.LazyGroupBy.head": [[625, "polars-internals-lazyframe-groupby-lazygroupby-head"]], "Read/write logical plan": [[639, "read-write-logical-plan"]], "polars.internals.lazyframe.groupby.LazyGroupBy.apply": [[622, "polars-internals-lazyframe-groupby-lazygroupby-apply"]], "polars.LazyFrame.var": [[614, "polars-lazyframe-var"]], "polars.LazyFrame.with_columns": [[616, "polars-lazyframe-with-columns"]], "GroupBy": [[637, "groupby"], [239, "groupby"]], "polars.Series.arr": [[660, "polars-series-arr"]], "polars.LazyFrame.width": [[615, "polars-lazyframe-width"]], "polars.Series.arr.get": [[670, "polars-series-arr-get"]], "polars.internals.lazyframe.groupby.LazyGroupBy.mean": [[628, "polars-internals-lazyframe-groupby-lazygroupby-mean"]], "polars.internals.lazyframe.groupby.LazyGroupBy.all": [[621, "polars-internals-lazyframe-groupby-lazygroupby-all"]], "polars.Series.append": [[646, "polars-series-append"]], "polars.Series.arr.count_match": [[665, "polars-series-arr-count-match"]], "polars.LazyFrame.unnest": [[612, "polars-lazyframe-unnest"]], "polars.internals.lazyframe.groupby.LazyGroupBy.sum": [[633, "polars-internals-lazyframe-groupby-lazygroupby-sum"]], "polars.Series.arcsin": [[650, "polars-series-arcsin"]], "polars.Series.arr.last": [[673, "polars-series-arr-last"]], "polars.Series.arccos": [[648, "polars-series-arccos"]], "polars.LazyFrame.update": [[613, "polars-lazyframe-update"]], "polars.Series.arr.explode": [[668, "polars-series-arr-explode"]], "polars.Series.arg_sort": [[656, "polars-series-arg-sort"]], "polars.Series.argsort": [[659, "polars-series-argsort"]], "polars.Series.arr.join": [[672, "polars-series-arr-join"]], "polars.LazyFrame.write_json": [[619, "polars-lazyframe-write-json"]], "polars.internals.lazyframe.groupby.LazyGroupBy.tail": [[634, "polars-internals-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.arr.head": [[671, "polars-series-arr-head"]], "polars.Series.arg_true": [[657, "polars-series-arg-true"]], "polars.Series.arr.contains": [[664, "polars-series-arr-contains"]], "polars.Series.arr.lengths": [[674, "polars-series-arr-lengths"]], "polars.Series.all": [[644, "polars-series-all"]], "polars.internals.lazyframe.groupby.LazyGroupBy.first": [[624, "polars-internals-lazyframe-groupby-lazygroupby-first"]], "polars.Series.arccosh": [[649, "polars-series-arccosh"]], "polars.Series.arr.arg_min": [[662, "polars-series-arr-arg-min"]], "polars.internals.lazyframe.groupby.LazyGroupBy.max": [[627, "polars-internals-lazyframe-groupby-lazygroupby-max"]], "polars.Series.arcsinh": [[651, "polars-series-arcsinh"]], "polars.LazyFrame.with_row_count": [[618, "polars-lazyframe-with-row-count"]], "polars.Series.arr.max": [[675, "polars-series-arr-max"]], "polars.internals.lazyframe.groupby.LazyGroupBy.last": [[626, "polars-internals-lazyframe-groupby-lazygroupby-last"]], "polars.Series.arr.diff": [[666, "polars-series-arr-diff"]], "polars.Series.arr.shift": [[679, "polars-series-arr-shift"]], "polars.Series.arg_max": [[654, "polars-series-arg-max"]], "polars.Series.arr.mean": [[676, "polars-series-arr-mean"]], "polars.Series.arr.min": [[677, "polars-series-arr-min"]], "polars.Series.any": [[645, "polars-series-any"]], "polars.Series.arr.reverse": [[678, "polars-series-arr-reverse"]], "polars.coalesce": [[498, "polars-coalesce"]], "polars.max": [[522, "polars-max"]], "polars.datetime": [[509, "polars-datetime"]], "polars.map": [[521, "polars-map"]], "polars.Expr.where": [[491, "polars-expr-where"]], "Columns / names": [[543, "columns-names"]], "polars.Expr.to_physical": [[484, "polars-expr-to-physical"]], "polars.min": [[525, "polars-min"]], "polars.when": [[538, "polars-when"]], "polars.Expr.unique": [[486, "polars-expr-unique"]], "polars.format": [[515, "polars-format"]], "polars.median": [[524, "polars-median"]], "polars.cumsum": [[507, "polars-cumsum"]], "polars.var": [[537, "polars-var"]], "polars.Expr.var": [[490, "polars-expr-var"]], "polars.corr": [[502, "polars-corr"]], "polars.Expr.struct.rename_fields": [[476, "polars-expr-struct-rename-fields"]], "polars.tail": [[536, "polars-tail"]], "polars.struct": [[534, "polars-struct"]], "polars.concat_list": [[500, "polars-concat-list"]], "polars.duration": [[510, "polars-duration"]], "polars.date": [[508, "polars-date"]], "polars.std": [[533, "polars-std"]], "polars.repeat": [[530, "polars-repeat"]], "polars.spearman_rank_corr": [[532, "polars-spearman-rank-corr"]], "polars.Expr.tanh": [[483, "polars-expr-tanh"]], "polars.col": [[499, "polars-col"]], "polars.Expr.suffix": [[477, "polars-expr-suffix"]], "polars.list": [[519, "polars-list"]], "polars.element": [[511, "polars-element"]], "polars.exclude": [[512, "polars-exclude"]], "polars.quantile": [[528, "polars-quantile"]], "polars.n_unique": [[526, "polars-n-unique"]], "polars.avg": [[497, "polars-avg"]], "polars.cumreduce": [[506, "polars-cumreduce"]], "polars.from_epoch": [[516, "polars-from-epoch"]], "polars.groups": [[517, "polars-groups"]], "polars.head": [[518, "polars-head"]], "polars.Expr.unique_counts": [[487, "polars-expr-unique-counts"]], "polars.Expr.tail": [[479, "polars-expr-tail"]], "polars.apply": [[494, "polars-apply"]], "polars.concat_str": [[501, "polars-concat-str"]], "polars.cov": [[504, "polars-cov"]], "polars.Expr.value_counts": [[489, "polars-expr-value-counts"]], "polars.sum": [[535, "polars-sum"]], "polars.arg_sort_by": [[496, "polars-arg-sort-by"]], "polars.all": [[492, "polars-all"]], "polars.fold": [[514, "polars-fold"]], "polars.mean": [[523, "polars-mean"]], "polars.reduce": [[529, "polars-reduce"]], "polars.lit": [[520, "polars-lit"]], "polars.first": [[513, "polars-first"]], "polars.Expr.top_k": [[485, "polars-expr-top-k"]], "polars.pearson_corr": [[527, "polars-pearson-corr"]], "polars.select": [[531, "polars-select"]], "polars.Expr.tan": [[482, "polars-expr-tan"]], "polars.cumfold": [[505, "polars-cumfold"]], "polars.any": [[493, "polars-any"]], "polars.Expr.upper_bound": [[488, "polars-expr-upper-bound"]], "polars.count": [[503, "polars-count"]], "polars.Expr.sum": [[478, "polars-expr-sum"]], "polars.Expr.take": [[480, "polars-expr-take"]], "polars.arange": [[495, "polars-arange"]], "polars.Expr.take_every": [[481, "polars-expr-take-every"]], "polars.Expr.sinh": [[438, "polars-expr-sinh"]], "polars.Expr.slice": [[440, "polars-expr-slice"]], "polars.Expr.struct.field": [[475, "polars-expr-struct-field"]], "polars.Expr.rolling_apply": [[418, "polars-expr-rolling-apply"]], "polars.Expr.str.splitn": [[468, "polars-expr-str-splitn"]], "polars.Expr.shrink_dtype": [[434, "polars-expr-shrink-dtype"]], "polars.Expr.str.concat": [[445, "polars-expr-str-concat"]], "polars.Expr.str.strip": [[470, "polars-expr-str-strip"]], "polars.Expr.rolling_skew": [[424, "polars-expr-rolling-skew"]], "polars.Expr.rolling_sum": [[426, "polars-expr-rolling-sum"]], "polars.Expr.str.slice": [[465, "polars-expr-str-slice"]], "polars.Expr.reinterpret": [[414, "polars-expr-reinterpret"]], "polars.Expr.rolling_min": [[422, "polars-expr-rolling-min"]], "polars.Expr.shift": [[432, "polars-expr-shift"]], "polars.Expr.str.encode": [[449, "polars-expr-str-encode"]], "polars.Expr.sample": [[429, "polars-expr-sample"]], "polars.Expr.str.json_path_match": [[455, "polars-expr-str-json-path-match"]], "polars.Expr.rolling_max": [[419, "polars-expr-rolling-max"]], "polars.Expr.str.extract": [[452, "polars-expr-str-extract"]], "polars.Expr.str.ljust": [[457, "polars-expr-str-ljust"]], "polars.Expr.str.explode": [[451, "polars-expr-str-explode"]], "polars.Expr.rechunk": [[413, "polars-expr-rechunk"]], "polars.Expr.skew": [[439, "polars-expr-skew"]], "polars.Expr.quantile": [[411, "polars-expr-quantile"]], "polars.Expr.str.parse_int": [[460, "polars-expr-str-parse-int"]], "polars.Expr.str.starts_with": [[469, "polars-expr-str-starts-with"]], "polars.Expr.rank": [[412, "polars-expr-rank"]], "polars.Expr.str.count_match": [[447, "polars-expr-str-count-match"]], "polars.Expr.shift_and_fill": [[433, "polars-expr-shift-and-fill"]], "polars.Expr.str.lengths": [[456, "polars-expr-str-lengths"]], "polars.Expr.str.strptime": [[471, "polars-expr-str-strptime"]], "polars.Expr.prefix": [[409, "polars-expr-prefix"]], "polars.Expr.sqrt": [[443, "polars-expr-sqrt"]], "polars.Expr.round": [[428, "polars-expr-round"]], "polars.Expr.str.decode": [[448, "polars-expr-str-decode"]], "polars.Expr.str.replace": [[461, "polars-expr-str-replace"]], "polars.Expr.str.to_uppercase": [[473, "polars-expr-str-to-uppercase"]], "polars.Expr.rolling_quantile": [[423, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_var": [[427, "polars-expr-rolling-var"]], "polars.Expr.str.rjust": [[463, "polars-expr-str-rjust"]], "polars.Expr.sort": [[441, "polars-expr-sort"]], "polars.Expr.rolling_mean": [[420, "polars-expr-rolling-mean"]], "polars.Expr.str.zfill": [[474, "polars-expr-str-zfill"]], "polars.Expr.sin": [[437, "polars-expr-sin"]], "polars.Expr.reshape": [[416, "polars-expr-reshape"]], "polars.Expr.str.extract_all": [[453, "polars-expr-str-extract-all"]], "polars.Expr.str.ends_with": [[450, "polars-expr-str-ends-with"]], "polars.Expr.rolling_std": [[425, "polars-expr-rolling-std"]], "polars.Expr.set_sorted": [[431, "polars-expr-set-sorted"]], "polars.Expr.shuffle": [[435, "polars-expr-shuffle"]], "polars.Expr.str.replace_all": [[462, "polars-expr-str-replace-all"]], "polars.Expr.pow": [[408, "polars-expr-pow"]], "polars.Expr.reverse": [[417, "polars-expr-reverse"]], "polars.Expr.str.contains": [[446, "polars-expr-str-contains"]], "polars.Expr.repeat_by": [[415, "polars-expr-repeat-by"]], "polars.Expr.str.split": [[466, "polars-expr-str-split"]], "polars.Expr.str.split_exact": [[467, "polars-expr-str-split-exact"]], "polars.Expr.sort_by": [[442, "polars-expr-sort-by"]], "polars.Expr.product": [[410, "polars-expr-product"]], "polars.Expr.str.lstrip": [[458, "polars-expr-str-lstrip"]], "polars.Expr.str.n_chars": [[459, "polars-expr-str-n-chars"]], "polars.Expr.rolling_median": [[421, "polars-expr-rolling-median"]], "polars.Expr.str.to_lowercase": [[472, "polars-expr-str-to-lowercase"]], "polars.Expr.std": [[444, "polars-expr-std"]], "polars.Expr.search_sorted": [[430, "polars-expr-search-sorted"]], "polars.Expr.str.json_extract": [[454, "polars-expr-str-json-extract"]], "polars.Expr.str.rstrip": [[464, "polars-expr-str-rstrip"]], "polars.Expr.sign": [[436, "polars-expr-sign"]], "polars.Expr.is_between": [[367, "polars-expr-is-between"]], "polars.Expr.ewm_var": [[351, "polars-expr-ewm-var"]], "polars.Expr.nan_min": [[404, "polars-expr-nan-min"]], "polars.Expr.max": [[391, "polars-expr-max"]], "polars.Expr.interpolate": [[366, "polars-expr-interpolate"]], "polars.Expr.is_first": [[370, "polars-expr-is-first"]], "polars.Expr.lower_bound": [[387, "polars-expr-lower-bound"]], "polars.Expr.meta.has_multiple_outputs": [[394, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.flatten": [[360, "polars-expr-flatten"]], "polars.Expr.dt.with_time_unit": [[346, "polars-expr-dt-with-time-unit"]], "polars.Expr.exp": [[353, "polars-expr-exp"]], "polars.Expr.filter": [[358, "polars-expr-filter"]], "polars.Expr.explode": [[354, "polars-expr-explode"]], "polars.Expr.fill_null": [[357, "polars-expr-fill-null"]], "polars.Expr.is_duplicated": [[368, "polars-expr-is-duplicated"]], "polars.Expr.len": [[382, "polars-expr-len"]], "polars.Expr.median": [[393, "polars-expr-median"]], "polars.Expr.meta.pop": [[397, "polars-expr-meta-pop"]], "polars.Expr.extend_constant": [[355, "polars-expr-extend-constant"]], "polars.Expr.dt.seconds": [[340, "polars-expr-dt-seconds"]], "polars.Expr.over": [[406, "polars-expr-over"]], "polars.Expr.log10": [[386, "polars-expr-log10"]], "polars.Expr.dt.year": [[347, "polars-expr-dt-year"]], "polars.Expr.meta.undo_aliases": [[399, "polars-expr-meta-undo-aliases"]], "polars.Expr.nan_max": [[403, "polars-expr-nan-max"]], "polars.Expr.pct_change": [[407, "polars-expr-pct-change"]], "polars.Expr.head": [[364, "polars-expr-head"]], "polars.Expr.is_finite": [[369, "polars-expr-is-finite"]], "polars.Expr.log": [[385, "polars-expr-log"]], "polars.Expr.is_unique": [[378, "polars-expr-is-unique"]], "polars.Expr.fill_nan": [[356, "polars-expr-fill-nan"]], "polars.Expr.min": [[400, "polars-expr-min"]], "polars.Expr.is_not_nan": [[375, "polars-expr-is-not-nan"]], "polars.Expr.is_in": [[371, "polars-expr-is-in"]], "polars.Expr.kurtosis": [[380, "polars-expr-kurtosis"]], "polars.Expr.mean": [[392, "polars-expr-mean"]], "polars.Expr.map_dict": [[390, "polars-expr-map-dict"]], "polars.Expr.meta.output_name": [[396, "polars-expr-meta-output-name"]], "polars.Expr.inspect": [[365, "polars-expr-inspect"]], "polars.Expr.meta.is_regex_projection": [[395, "polars-expr-meta-is-regex-projection"]], "polars.Expr.map": [[388, "polars-expr-map"]], "polars.Expr.is_not_null": [[376, "polars-expr-is-not-null"]], "polars.Expr.first": [[359, "polars-expr-first"]], "polars.Expr.keep_name": [[379, "polars-expr-keep-name"]], "polars.Expr.map_alias": [[389, "polars-expr-map-alias"]], "polars.Expr.mode": [[401, "polars-expr-mode"]], "polars.Expr.dt.truncate": [[343, "polars-expr-dt-truncate"]], "polars.Expr.dt.week": [[344, "polars-expr-dt-week"]], "polars.Expr.entropy": [[348, "polars-expr-entropy"]], "polars.Expr.meta.root_names": [[398, "polars-expr-meta-root-names"]], "polars.Expr.dt.weekday": [[345, "polars-expr-dt-weekday"]], "polars.Expr.ewm_mean": [[349, "polars-expr-ewm-mean"]], "polars.Expr.is_infinite": [[372, "polars-expr-is-infinite"]], "polars.Expr.list": [[384, "polars-expr-list"]], "polars.Expr.floor": [[361, "polars-expr-floor"]], "polars.Expr.null_count": [[405, "polars-expr-null-count"]], "polars.Expr.is_nan": [[373, "polars-expr-is-nan"]], "polars.Expr.dt.strftime": [[341, "polars-expr-dt-strftime"]], "polars.Expr.hash": [[363, "polars-expr-hash"]], "polars.Expr.exclude": [[352, "polars-expr-exclude"]], "polars.Expr.limit": [[383, "polars-expr-limit"]], "polars.Expr.dt.timestamp": [[342, "polars-expr-dt-timestamp"]], "polars.Expr.ewm_std": [[350, "polars-expr-ewm-std"]], "polars.Expr.n_unique": [[402, "polars-expr-n-unique"]], "polars.Expr.last": [[381, "polars-expr-last"]], "polars.Expr.is_not": [[374, "polars-expr-is-not"]], "polars.Expr.forward_fill": [[362, "polars-expr-forward-fill"]], "polars.Expr.is_null": [[377, "polars-expr-is-null"]], "polars.LazyFrame.cache": [[558, "polars-lazyframe-cache"]], "polars.LazyFrame.fill_null": [[570, "polars-lazyframe-fill-null"]], "Meta": [[547, "meta"]], "polars.LazyFrame.merge_sorted": [[590, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.mean": [[587, "polars-lazyframe-mean"]], "polars.LazyFrame.median": [[588, "polars-lazyframe-median"]], "polars.LazyFrame.shift_and_fill": [[601, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.dtypes": [[565, "polars-lazyframe-dtypes"]], "polars.LazyFrame.clone": [[560, "polars-lazyframe-clone"]], "polars.LazyFrame.fill_nan": [[569, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.interpolate": [[579, "polars-lazyframe-interpolate"]], "polars.LazyFrame.schema": [[598, "polars-lazyframe-schema"]], "polars.LazyFrame.shift": [[600, "polars-lazyframe-shift"]], "polars.LazyFrame.tail": [[609, "polars-lazyframe-tail"]], "polars.LazyFrame.profile": [[593, "polars-lazyframe-profile"]], "polars.LazyFrame.drop_nulls": [[564, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.join": [[580, "polars-lazyframe-join"]], "polars.LazyFrame.groupby": [[574, "polars-lazyframe-groupby"]], "polars.LazyFrame.map": [[585, "polars-lazyframe-map"]], "polars.LazyFrame.select": [[599, "polars-lazyframe-select"]], "polars.LazyFrame.sum": [[608, "polars-lazyframe-sum"]], "Expressions": [[546, "expressions"]], "polars.LazyFrame.std": [[607, "polars-lazyframe-std"]], "polars.LazyFrame.last": [[582, "polars-lazyframe-last"]], "polars.LazyFrame.sink_parquet": [[604, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.columns": [[562, "polars-lazyframe-columns"]], "polars.LazyFrame.clear": [[559, "polars-lazyframe-clear"]], "polars.LazyFrame.join_asof": [[581, "polars-lazyframe-join-asof"]], "polars.LazyFrame.rename": [[596, "polars-lazyframe-rename"]], "polars.LazyFrame.reverse": [[597, "polars-lazyframe-reverse"]], "polars.LazyFrame.read_json": [[595, "polars-lazyframe-read-json"]], "polars.LazyFrame.groupby_dynamic": [[575, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.explain": [[566, "polars-lazyframe-explain"]], "polars.LazyFrame.pipe": [[592, "polars-lazyframe-pipe"]], "polars.LazyFrame.groupby_rolling": [[576, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.inspect": [[578, "polars-lazyframe-inspect"]], "polars.LazyFrame.from_json": [[573, "polars-lazyframe-from-json"]], "Functions": [[554, "functions"], [545, "functions"], [243, "functions"]], "Conversion": [[554, "conversion"]], "Eager/Lazy functions": [[554, "eager-lazy-functions"]], "Parallelization": [[554, "parallelization"]], "StringCache": [[554, "stringcache"]], "polars.LazyFrame.max": [[586, "polars-lazyframe-max"]], "polars.LazyFrame.explode": [[567, "polars-lazyframe-explode"]], "polars.LazyFrame.melt": [[589, "polars-lazyframe-melt"]], "polars.LazyFrame.collect": [[561, "polars-lazyframe-collect"]], "polars.LazyFrame.slice": [[605, "polars-lazyframe-slice"]], "polars.LazyFrame.lazy": [[583, "polars-lazyframe-lazy"]], "polars.LazyFrame.sort": [[606, "polars-lazyframe-sort"]], "polars.LazyFrame.head": [[577, "polars-lazyframe-head"]], "polars.LazyFrame.sink_ipc": [[603, "polars-lazyframe-sink-ipc"]], "Input/output": [[556, "input-output"]], "CSV": [[556, "csv"]], "Feather/ IPC": [[556, "feather-ipc"]], "Parquet": [[556, "parquet"]], "Database": [[556, "database"]], "JSON": [[556, "json"]], "AVRO": [[556, "avro"]], "Excel": [[556, "excel"]], "Delta Lake": [[556, "delta-lake"]], "Datasets": [[556, "datasets"]], "BatchedCsvReader": [[556, "batchedcsvreader"]], "polars.LazyFrame.limit": [[584, "polars-lazyframe-limit"]], "polars.LazyFrame.drop": [[563, "polars-lazyframe-drop"]], "polars.LazyFrame.min": [[591, "polars-lazyframe-min"]], "Window": [[553, "window"]], "polars.LazyFrame.quantile": [[594, "polars-lazyframe-quantile"]], "polars.LazyFrame.unique": [[611, "polars-lazyframe-unique"]], "polars.LazyFrame.take_every": [[610, "polars-lazyframe-take-every"]], "polars.LazyFrame.filter": [[571, "polars-lazyframe-filter"]], "polars.LazyFrame.show_graph": [[602, "polars-lazyframe-show-graph"]], "API reference": [[555, "api-reference"]], "polars.LazyFrame.first": [[572, "polars-lazyframe-first"]], "polars.LazyFrame.fetch": [[568, "polars-lazyframe-fetch"]], "polars.Expr.cumsum": [[310, "polars-expr-cumsum"]], "polars.Expr.arr.mean": [[280, "polars-expr-arr-mean"]], "polars.Expr.diff": [[312, "polars-expr-diff"]], "polars.Expr.backward_fill": [[291, "polars-expr-backward-fill"]], "polars.Expr.dt.nanosecond": [[332, "polars-expr-dt-nanosecond"]], "polars.Expr.arr.shift": [[283, "polars-expr-arr-shift"]], "polars.Expr.dt.quarter": [[336, "polars-expr-dt-quarter"]], "polars.Expr.dt.convert_time_zone": [[318, "polars-expr-dt-convert-time-zone"]], "polars.Expr.arr.tail": [[287, "polars-expr-arr-tail"]], "polars.Expr.dt.days": [[320, "polars-expr-dt-days"]], "polars.Expr.arr.last": [[277, "polars-expr-arr-last"]], "polars.Expr.drop_nans": [[314, "polars-expr-drop-nans"]], "polars.Expr.dt.microsecond": [[325, "polars-expr-dt-microsecond"]], "polars.Expr.dt.nanoseconds": [[333, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.replace_time_zone": [[337, "polars-expr-dt-replace-time-zone"]], "polars.Expr.cos": [[303, "polars-expr-cos"]], "polars.Expr.clip_min": [[302, "polars-expr-clip-min"]], "polars.Expr.dt.milliseconds": [[328, "polars-expr-dt-milliseconds"]], "polars.Expr.cumulative_eval": [[311, "polars-expr-cumulative-eval"]], "polars.Expr.dt.second": [[339, "polars-expr-dt-second"]], "polars.Expr.dt.combine": [[317, "polars-expr-dt-combine"]], "polars.Expr.dt.month": [[331, "polars-expr-dt-month"]], "polars.Expr.cummax": [[307, "polars-expr-cummax"]], "polars.Expr.dt.minutes": [[330, "polars-expr-dt-minutes"]], "polars.Expr.cumcount": [[306, "polars-expr-cumcount"]], "polars.Expr.clip_max": [[301, "polars-expr-clip-max"]], "polars.Expr.arr.min": [[281, "polars-expr-arr-min"]], "polars.Expr.arr.join": [[276, "polars-expr-arr-join"]], "polars.Expr.arr.explode": [[272, "polars-expr-arr-explode"]], "polars.Expr.dt.iso_year": [[324, "polars-expr-dt-iso-year"]], "polars.Expr.arr.sort": [[285, "polars-expr-arr-sort"]], "polars.Expr.clip": [[300, "polars-expr-clip"]], "polars.Expr.dt.ordinal_day": [[335, "polars-expr-dt-ordinal-day"]], "polars.Expr.arr.take": [[288, "polars-expr-arr-take"]], "polars.Expr.bin.contains": [[292, "polars-expr-bin-contains"]], "polars.Expr.bin.encode": [[294, "polars-expr-bin-encode"]], "polars.Expr.dt.offset_by": [[334, "polars-expr-dt-offset-by"]], "polars.Expr.bin.decode": [[293, "polars-expr-bin-decode"]], "polars.Expr.cat.set_ordering": [[298, "polars-expr-cat-set-ordering"]], "polars.Expr.drop_nulls": [[315, "polars-expr-drop-nulls"]], "polars.Expr.dt.hour": [[322, "polars-expr-dt-hour"]], "polars.Expr.arr.lengths": [[278, "polars-expr-arr-lengths"]], "polars.Expr.bin.starts_with": [[296, "polars-expr-bin-starts-with"]], "polars.Expr.dot": [[313, "polars-expr-dot"]], "polars.Expr.count": [[305, "polars-expr-count"]], "polars.Expr.arr.first": [[273, "polars-expr-arr-first"]], "polars.Expr.ceil": [[299, "polars-expr-ceil"]], "polars.Expr.arr.head": [[275, "polars-expr-arr-head"]], "polars.Expr.arr.sum": [[286, "polars-expr-arr-sum"]], "polars.Expr.arr.max": [[279, "polars-expr-arr-max"]], "polars.Expr.arr.get": [[274, "polars-expr-arr-get"]], "polars.Expr.arr.to_struct": [[289, "polars-expr-arr-to-struct"]], "polars.Expr.arr.slice": [[284, "polars-expr-arr-slice"]], "polars.Expr.cumprod": [[309, "polars-expr-cumprod"]], "polars.Expr.cosh": [[304, "polars-expr-cosh"]], "polars.Expr.bin.ends_with": [[295, "polars-expr-bin-ends-with"]], "polars.Expr.dt.microseconds": [[326, "polars-expr-dt-microseconds"]], "polars.Expr.dt.round": [[338, "polars-expr-dt-round"]], "polars.Expr.dt.day": [[319, "polars-expr-dt-day"]], "polars.Expr.arr.reverse": [[282, "polars-expr-arr-reverse"]], "polars.Expr.arr.unique": [[290, "polars-expr-arr-unique"]], "polars.Expr.dt.epoch": [[321, "polars-expr-dt-epoch"]], "polars.Expr.dt.hours": [[323, "polars-expr-dt-hours"]], "polars.Expr.dt.cast_time_unit": [[316, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.millisecond": [[327, "polars-expr-dt-millisecond"]], "polars.Expr.dt.minute": [[329, "polars-expr-dt-minute"]], "polars.Expr.cummin": [[308, "polars-expr-cummin"]], "polars.Expr.cast": [[297, "polars-expr-cast"]], "polars.DataFrame.mean": [[167, "polars-dataframe-mean"]], "polars.DataFrame.fold": [[142, "polars-dataframe-fold"]], "polars.DataFrame.schema": [[188, "polars-dataframe-schema"]], "polars.DataFrame.to_dicts": [[202, "polars-dataframe-to-dicts"]], "polars.DataFrame.quantile": [[179, "polars-dataframe-quantile"]], "polars.DataFrame.select": [[189, "polars-dataframe-select"]], "polars.DataFrame.null_count": [[174, "polars-dataframe-null-count"]], "polars.DataFrame.sum": [[197, "polars-dataframe-sum"]], "polars.DataFrame.melt": [[169, "polars-dataframe-melt"]], "polars.DataFrame.join": [[162, "polars-dataframe-join"]], "polars.DataFrame.interpolate": [[155, "polars-dataframe-interpolate"]], "polars.DataFrame.sample": [[187, "polars-dataframe-sample"]], "polars.DataFrame.tail": [[198, "polars-dataframe-tail"]], "polars.DataFrame.iter_rows": [[160, "polars-dataframe-iter-rows"]], "polars.DataFrame.is_unique": [[158, "polars-dataframe-is-unique"]], "polars.DataFrame.to_arrow": [[200, "polars-dataframe-to-arrow"]], "polars.DataFrame.get_columns": [[145, "polars-dataframe-get-columns"]], "polars.DataFrame.lazy": [[164, "polars-dataframe-lazy"]], "polars.DataFrame.product": [[178, "polars-dataframe-product"]], "polars.DataFrame.rechunk": [[180, "polars-dataframe-rechunk"]], "polars.DataFrame.join_asof": [[163, "polars-dataframe-join-asof"]], "polars.DataFrame.take_every": [[199, "polars-dataframe-take-every"]], "polars.DataFrame.max": [[166, "polars-dataframe-max"]], "polars.DataFrame.groupby_dynamic": [[148, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.merge_sorted": [[170, "polars-dataframe-merge-sorted"]], "polars.DataFrame.shape": [[190, "polars-dataframe-shape"]], "polars.DataFrame.median": [[168, "polars-dataframe-median"]], "polars.DataFrame.to_dummies": [[203, "polars-dataframe-to-dummies"]], "polars.DataFrame.shift_and_fill": [[192, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.min": [[171, "polars-dataframe-min"]], "polars.DataFrame.head": [[151, "polars-dataframe-head"]], "polars.DataFrame.get_column": [[144, "polars-dataframe-get-column"]], "polars.DataFrame.groupby_rolling": [[149, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.frame_equal": [[143, "polars-dataframe-frame-equal"]], "polars.DataFrame.hstack": [[153, "polars-dataframe-hstack"]], "polars.DataFrame.iter_slices": [[161, "polars-dataframe-iter-slices"]], "polars.DataFrame.rename": [[181, "polars-dataframe-rename"]], "polars.DataFrame.n_unique": [[173, "polars-dataframe-n-unique"]], "polars.DataFrame.pipe": [[176, "polars-dataframe-pipe"]], "polars.DataFrame.filter": [[140, "polars-dataframe-filter"]], "polars.DataFrame.sort": [[195, "polars-dataframe-sort"]], "polars.DataFrame.std": [[196, "polars-dataframe-std"]], "polars.DataFrame.item": [[159, "polars-dataframe-item"]], "polars.DataFrame.is_empty": [[157, "polars-dataframe-is-empty"]], "polars.DataFrame.to_dict": [[201, "polars-dataframe-to-dict"]], "polars.DataFrame.shift": [[191, "polars-dataframe-shift"]], "polars.DataFrame.extend": [[137, "polars-dataframe-extend"]], "polars.DataFrame.limit": [[165, "polars-dataframe-limit"]], "polars.DataFrame.partition_by": [[175, "polars-dataframe-partition-by"]], "polars.DataFrame.hash_rows": [[150, "polars-dataframe-hash-rows"]], "polars.DataFrame.find_idx_by_name": [[141, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.insert_at_idx": [[154, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.fill_null": [[139, "polars-dataframe-fill-null"]], "polars.DataFrame.glimpse": [[146, "polars-dataframe-glimpse"]], "polars.DataFrame.shrink_to_fit": [[193, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.groupby": [[147, "polars-dataframe-groupby"]], "polars.DataFrame.height": [[152, "polars-dataframe-height"]], "polars.DataFrame.row": [[185, "polars-dataframe-row"]], "polars.DataFrame.is_duplicated": [[156, "polars-dataframe-is-duplicated"]], "polars.DataFrame.reverse": [[184, "polars-dataframe-reverse"]], "polars.DataFrame.pivot": [[177, "polars-dataframe-pivot"]], "polars.DataFrame.replace_at_idx": [[183, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.rows": [[186, "polars-dataframe-rows"]], "polars.DataFrame.replace": [[182, "polars-dataframe-replace"]], "polars.DataFrame.explode": [[136, "polars-dataframe-explode"]], "polars.DataFrame.slice": [[194, "polars-dataframe-slice"]], "polars.DataFrame.n_chunks": [[172, "polars-dataframe-n-chunks"]], "polars.DataFrame.fill_nan": [[138, "polars-dataframe-fill-nan"]], "polars.Expr.alias": [[248, "polars-expr-alias"]], "polars.Expr.arccosh": [[254, "polars-expr-arccosh"]], "polars.DataFrame.update": [[212, "polars-dataframe-update"]], "polars.internals.dataframe.groupby.GroupBy.mean": [[228, "polars-internals-dataframe-groupby-groupby-mean"]], "polars.internals.dataframe.groupby.GroupBy.quantile": [[232, "polars-internals-dataframe-groupby-groupby-quantile"]], "polars.DataFrame.var": [[214, "polars-dataframe-var"]], "polars.internals.dataframe.groupby.GroupBy.tail": [[234, "polars-internals-dataframe-groupby-groupby-tail"]], "polars.internals.dataframe.groupby.GroupBy.head": [[225, "polars-internals-dataframe-groupby-groupby-head"]], "polars.Expr.arr.arg_max": [[265, "polars-expr-arr-arg-max"]], "polars.internals.dataframe.groupby.GroupBy.all": [[221, "polars-internals-dataframe-groupby-groupby-all"]], "polars.Expr.arr.contains": [[268, "polars-expr-arr-contains"]], "polars.internals.dataframe.groupby.GroupBy.__iter__": [[219, "polars-internals-dataframe-groupby-groupby-iter"]], "polars.Expr.arccos": [[253, "polars-expr-arccos"]], "polars.Expr.arg_unique": [[263, "polars-expr-arg-unique"]], "polars.DataFrame.unique": [[209, "polars-dataframe-unique"]], "polars.Expr.arg_max": [[259, "polars-expr-arg-max"]], "polars.DataFrame.vstack": [[215, "polars-dataframe-vstack"]], "polars.Expr.argsort": [[264, "polars-expr-argsort"]], "polars.Expr.arr.diff": [[270, "polars-expr-arr-diff"]], "polars.DataFrame.with_columns": [[217, "polars-dataframe-with-columns"]], "polars.DataFrame.with_row_count": [[218, "polars-dataframe-with-row-count"]], "polars.Expr.arctan": [[257, "polars-expr-arctan"]], "polars.internals.dataframe.groupby.GroupBy.min": [[230, "polars-internals-dataframe-groupby-groupby-min"]], "polars.DataFrame.to_pandas": [[205, "polars-dataframe-to-pandas"]], "polars.Expr.arr.count_match": [[269, "polars-expr-arr-count-match"]], "polars.Expr.arcsin": [[255, "polars-expr-arcsin"]], "polars.internals.dataframe.groupby.GroupBy.first": [[224, "polars-internals-dataframe-groupby-groupby-first"]], "polars.internals.dataframe.groupby.GroupBy.max": [[227, "polars-internals-dataframe-groupby-groupby-max"]], "polars.DataFrame.to_series": [[206, "polars-dataframe-to-series"]], "polars.Expr.append": [[251, "polars-expr-append"]], "Exceptions": [[244, "exceptions"]], "polars.DataFrame.width": [[216, "polars-dataframe-width"]], "polars.internals.dataframe.groupby.GroupBy.median": [[229, "polars-internals-dataframe-groupby-groupby-median"]], "polars.Expr.any": [[250, "polars-expr-any"]], "polars.Expr.arr.concat": [[267, "polars-expr-arr-concat"]], "polars.DataFrame.upsample": [[213, "polars-dataframe-upsample"]], "polars.Expr.abs": [[246, "polars-expr-abs"]], "polars.DataFrame.to_struct": [[207, "polars-dataframe-to-struct"]], "polars.DataFrame.unstack": [[211, "polars-dataframe-unstack"]], "polars.Expr.arctanh": [[258, "polars-expr-arctanh"]], "polars.Expr.arr.eval": [[271, "polars-expr-arr-eval"]], "polars.DataFrame.unnest": [[210, "polars-dataframe-unnest"]], "polars.internals.dataframe.groupby.GroupBy.sum": [[233, "polars-internals-dataframe-groupby-groupby-sum"]], "polars.DataFrame.transpose": [[208, "polars-dataframe-transpose"]], "polars.internals.dataframe.groupby.GroupBy.n_unique": [[231, "polars-internals-dataframe-groupby-groupby-n-unique"]], "polars.DataFrame.to_numpy": [[204, "polars-dataframe-to-numpy"]], "polars.internals.dataframe.groupby.GroupBy.last": [[226, "polars-internals-dataframe-groupby-groupby-last"]], "polars.Expr.all": [[249, "polars-expr-all"]], "DataFrame": [[240, "dataframe"]], "Data types": [[243, "data-types"]], "Numeric": [[243, "numeric"]], "Date / Time": [[243, "date-time"]], "Nested": [[243, "nested"]], "Other": [[243, "other"]], "polars.Expr.agg_groups": [[247, "polars-expr-agg-groups"]], "polars.Expr.arcsinh": [[256, "polars-expr-arcsinh"]], "polars.Expr.arg_sort": [[261, "polars-expr-arg-sort"]], "polars.internals.dataframe.groupby.GroupBy.apply": [[222, "polars-internals-dataframe-groupby-groupby-apply"]], "polars.Expr.apply": [[252, "polars-expr-apply"]], "polars.Expr.arg_min": [[260, "polars-expr-arg-min"]], "polars.Expr.arg_true": [[262, "polars-expr-arg-true"]], "polars.internals.dataframe.groupby.GroupBy.agg": [[220, "polars-internals-dataframe-groupby-groupby-agg"]], "polars.Expr.arr.arg_min": [[266, "polars-expr-arr-arg-min"]], "polars.internals.dataframe.groupby.GroupBy.count": [[223, "polars-internals-dataframe-groupby-groupby-count"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[5, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[6, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[7, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[8, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[9, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[10, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[11, "polars.Config.set_fmt_str_lengths"]], "set_tbl_cell_alignment() (polars.config class method)": [[12, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[13, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[14, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[15, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[16, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[17, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[21, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[22, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[23, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[24, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[25, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[26, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[27, "polars.DataFrame.write_database"]], "write_excel() (polars.dataframe method)": [[28, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[29, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[30, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[31, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[32, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[33, "polars.DataType"]], "__init__() (polars.datatype method)": [[33, "polars.DataType.__init__"]], "date (class in polars)": [[34, "polars.Date"]], "__init__() (polars.date method)": [[34, "polars.Date.__init__"]], "datetime (class in polars)": [[35, "polars.Datetime"]], "__init__() (polars.datetime method)": [[35, "polars.Datetime.__init__"]], "duration (class in polars)": [[36, "polars.Duration"]], "__init__() (polars.duration method)": [[36, "polars.Duration.__init__"]], "float32 (class in polars)": [[37, "polars.Float32"]], "__init__() (polars.float32 method)": [[37, "polars.Float32.__init__"]], "float64 (class in polars)": [[38, "polars.Float64"]], "__init__() (polars.float64 method)": [[38, "polars.Float64.__init__"]], "int16 (class in polars)": [[39, "polars.Int16"]], "__init__() (polars.int16 method)": [[39, "polars.Int16.__init__"]], "int32 (class in polars)": [[40, "polars.Int32"]], "__init__() (polars.int32 method)": [[40, "polars.Int32.__init__"]], "int64 (class in polars)": [[41, "polars.Int64"]], "__init__() (polars.int64 method)": [[41, "polars.Int64.__init__"]], "int8 (class in polars)": [[42, "polars.Int8"]], "__init__() (polars.int8 method)": [[42, "polars.Int8.__init__"]], "list (class in polars)": [[43, "polars.List"]], "__init__() (polars.list method)": [[43, "polars.List.__init__"]], "null (class in polars)": [[44, "polars.Null"]], "__init__() (polars.null method)": [[44, "polars.Null.__init__"]], "object (class in polars)": [[45, "polars.Object"]], "__init__() (polars.object method)": [[45, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[46, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[47, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[48, "polars.SQLContext.register"]], "stringcache (class in polars)": [[49, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[49, "polars.StringCache.__init__"]], "struct (class in polars)": [[50, "polars.Struct"]], "__init__() (polars.struct method)": [[50, "polars.Struct.__init__"]], "time (class in polars)": [[51, "polars.Time"]], "__init__() (polars.time method)": [[51, "polars.Time.__init__"]], "uint16 (class in polars)": [[52, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[52, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[53, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[53, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[54, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[54, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[55, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[55, "polars.UInt8.__init__"]], "unknown (class in polars)": [[56, "polars.Unknown"]], "__init__() (polars.unknown method)": [[56, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[57, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[57, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[58, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[59, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[60, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[61, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[62, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[63, "polars.arg_where"]], "build_info() (in module polars)": [[64, "polars.build_info"]], "collect_all() (in module polars)": [[65, "polars.collect_all"]], "concat() (in module polars)": [[66, "polars.concat"]], "cut() (in module polars)": [[67, "polars.cut"]], "date_range() (in module polars)": [[68, "polars.date_range"]], "arrowerror": [[69, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[70, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[71, "polars.exceptions.ComputeError"]], "duplicateerror": [[72, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[73, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[74, "polars.exceptions.NoDataError"]], "norowsreturned": [[75, "polars.exceptions.NoRowsReturned"]], "panicexception": [[76, "polars.exceptions.PanicException"]], "rowsexception": [[77, "polars.exceptions.RowsException"]], "schemaerror": [[78, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[79, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[80, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[81, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturned": [[82, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[83, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[84, "polars.from_dataframe"]], "from_dict() (in module polars)": [[85, "polars.from_dict"]], "from_dicts() (in module polars)": [[86, "polars.from_dicts"]], "from_numpy() (in module polars)": [[87, "polars.from_numpy"]], "from_pandas() (in module polars)": [[88, "polars.from_pandas"]], "from_records() (in module polars)": [[89, "polars.from_records"]], "get_dummies() (in module polars)": [[90, "polars.get_dummies"]], "get_idx_type() (in module polars)": [[91, "polars.get_idx_type"]], "next_batches() (polars.internals.batched.batchedcsvreader method)": [[92, "polars.internals.batched.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[93, "polars.ones"]], "read_avro() (in module polars)": [[94, "polars.read_avro"]], "read_csv() (in module polars)": [[95, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[96, "polars.read_csv_batched"]], "read_database() (in module polars)": [[97, "polars.read_database"]], "read_delta() (in module polars)": [[98, "polars.read_delta"]], "read_excel() (in module polars)": [[99, "polars.read_excel"]], "read_ipc() (in module polars)": [[100, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[101, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[102, "polars.read_json"]], "read_ndjson() (in module polars)": [[103, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[104, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[105, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[106, "polars.scan_csv"]], "scan_delta() (in module polars)": [[107, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[108, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[109, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[110, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[111, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[112, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[113, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[114, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[115, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[115, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[116, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[117, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[118, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[119, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[120, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[121, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[124, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[125, "polars.DataFrame.apply"]], "clear() (polars.dataframe method)": [[126, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[127, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[128, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[129, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[130, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[131, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[132, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[133, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[134, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[135, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[136, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[137, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[138, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[139, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[140, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[141, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[142, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[143, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[144, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[145, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[146, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[147, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[148, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[149, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[150, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[151, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[152, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[153, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[154, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[155, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[156, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[157, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[158, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[159, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[160, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[161, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[162, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[163, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[164, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[165, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[166, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[167, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[168, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[169, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[170, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[171, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[172, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[173, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[174, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[175, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[176, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[177, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[178, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[179, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[180, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[181, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[182, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[183, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[184, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[185, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[186, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[187, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[188, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[189, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[190, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[191, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[192, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[193, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[194, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[195, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[196, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[197, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[198, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[199, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[200, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[201, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[202, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[203, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[204, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[205, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[206, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[207, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[208, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[209, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[210, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[211, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[212, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[213, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[214, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[215, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[216, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[217, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[218, "polars.DataFrame.with_row_count"]], "__iter__() (polars.internals.dataframe.groupby.groupby method)": [[219, "polars.internals.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.internals.dataframe.groupby.groupby method)": [[220, "polars.internals.dataframe.groupby.GroupBy.agg"]], "all() (polars.internals.dataframe.groupby.groupby method)": [[221, "polars.internals.dataframe.groupby.GroupBy.all"]], "apply() (polars.internals.dataframe.groupby.groupby method)": [[222, "polars.internals.dataframe.groupby.GroupBy.apply"]], "count() (polars.internals.dataframe.groupby.groupby method)": [[223, "polars.internals.dataframe.groupby.GroupBy.count"]], "first() (polars.internals.dataframe.groupby.groupby method)": [[224, "polars.internals.dataframe.groupby.GroupBy.first"]], "head() (polars.internals.dataframe.groupby.groupby method)": [[225, "polars.internals.dataframe.groupby.GroupBy.head"]], "last() (polars.internals.dataframe.groupby.groupby method)": [[226, "polars.internals.dataframe.groupby.GroupBy.last"]], "max() (polars.internals.dataframe.groupby.groupby method)": [[227, "polars.internals.dataframe.groupby.GroupBy.max"]], "mean() (polars.internals.dataframe.groupby.groupby method)": [[228, "polars.internals.dataframe.groupby.GroupBy.mean"]], "median() (polars.internals.dataframe.groupby.groupby method)": [[229, "polars.internals.dataframe.groupby.GroupBy.median"]], "min() (polars.internals.dataframe.groupby.groupby method)": [[230, "polars.internals.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.internals.dataframe.groupby.groupby method)": [[231, "polars.internals.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.internals.dataframe.groupby.groupby method)": [[232, "polars.internals.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.internals.dataframe.groupby.groupby method)": [[233, "polars.internals.dataframe.groupby.GroupBy.sum"]], "tail() (polars.internals.dataframe.groupby.groupby method)": [[234, "polars.internals.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[246, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[247, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[248, "polars.Expr.alias"]], "all() (polars.expr method)": [[249, "polars.Expr.all"]], "any() (polars.expr method)": [[250, "polars.Expr.any"]], "append() (polars.expr method)": [[251, "polars.Expr.append"]], "apply() (polars.expr method)": [[252, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[253, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[254, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[255, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[256, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[257, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[258, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[259, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[260, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[261, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[262, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[263, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[264, "polars.Expr.argsort"]], "arg_max() (polars.expr.arr method)": [[265, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[266, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[267, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[268, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[269, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[270, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[271, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[272, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[273, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[274, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[275, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[276, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[277, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[278, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[279, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[280, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[281, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[282, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[283, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[284, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[285, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[286, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[287, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[288, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[289, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[290, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[291, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[292, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[293, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[294, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[295, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[296, "polars.Expr.bin.starts_with"]], "cast() (polars.expr method)": [[297, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[298, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[299, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[300, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[301, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[302, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[303, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[304, "polars.Expr.cosh"]], "count() (polars.expr method)": [[305, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[306, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[307, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[308, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[309, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[310, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[311, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[312, "polars.Expr.diff"]], "dot() (polars.expr method)": [[313, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[314, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[315, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[316, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[317, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[318, "polars.Expr.dt.convert_time_zone"]], "day() (polars.expr.dt method)": [[319, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[320, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[321, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[322, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[323, "polars.Expr.dt.hours"]], "iso_year() (polars.expr.dt method)": [[324, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[325, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[326, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[327, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[328, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[329, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[330, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[331, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[332, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[333, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[334, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[335, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[336, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[337, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[338, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[339, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[340, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[341, "polars.Expr.dt.strftime"]], "timestamp() (polars.expr.dt method)": [[342, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[343, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[344, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[345, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[346, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[347, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[348, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[349, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[350, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[351, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[352, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[353, "polars.Expr.exp"]], "explode() (polars.expr method)": [[354, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[355, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[356, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[357, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[358, "polars.Expr.filter"]], "first() (polars.expr method)": [[359, "polars.Expr.first"]], "flatten() (polars.expr method)": [[360, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[361, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[362, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[363, "polars.Expr.hash"]], "head() (polars.expr method)": [[364, "polars.Expr.head"]], "inspect() (polars.expr method)": [[365, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[366, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[367, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[368, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[369, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[370, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[371, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[372, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[373, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[374, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[375, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[376, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[377, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[378, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[379, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[380, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[381, "polars.Expr.last"]], "len() (polars.expr method)": [[382, "polars.Expr.len"]], "limit() (polars.expr method)": [[383, "polars.Expr.limit"]], "list() (polars.expr method)": [[384, "polars.Expr.list"]], "log() (polars.expr method)": [[385, "polars.Expr.log"]], "log10() (polars.expr method)": [[386, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[387, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[388, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[389, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[390, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[391, "polars.Expr.max"]], "mean() (polars.expr method)": [[392, "polars.Expr.mean"]], "median() (polars.expr method)": [[393, "polars.Expr.median"]], "has_multiple_outputs() (polars.expr.meta method)": [[394, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[395, "polars.Expr.meta.is_regex_projection"]], "output_name() (polars.expr.meta method)": [[396, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[397, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[398, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[399, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[400, "polars.Expr.min"]], "mode() (polars.expr method)": [[401, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[402, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[403, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[404, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[405, "polars.Expr.null_count"]], "over() (polars.expr method)": [[406, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[407, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[408, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[409, "polars.Expr.prefix"]], "product() (polars.expr method)": [[410, "polars.Expr.product"]], "quantile() (polars.expr method)": [[411, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[412, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[413, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[414, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[415, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[416, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[417, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[418, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[419, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[420, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[421, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[422, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[423, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[424, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[425, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[426, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[427, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[428, "polars.Expr.round"]], "sample() (polars.expr method)": [[429, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[430, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[431, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[432, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[433, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[434, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[435, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[436, "polars.Expr.sign"]], "sin() (polars.expr method)": [[437, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[438, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[439, "polars.Expr.skew"]], "slice() (polars.expr method)": [[440, "polars.Expr.slice"]], "sort() (polars.expr method)": [[441, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[442, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[443, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[444, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[445, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[446, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[447, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[448, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[449, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[450, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[451, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[452, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[453, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[454, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[455, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[456, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[457, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[458, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[459, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[460, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[461, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[462, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[463, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[464, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[465, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[466, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[467, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[468, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[469, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[470, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[471, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[472, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[473, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[474, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[475, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[476, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[477, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[478, "polars.Expr.sum"]], "tail() (polars.expr method)": [[479, "polars.Expr.tail"]], "take() (polars.expr method)": [[480, "polars.Expr.take"]], "take_every() (polars.expr method)": [[481, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[482, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[483, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[484, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[485, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[486, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[487, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[488, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[489, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[490, "polars.Expr.var"]], "where() (polars.expr method)": [[491, "polars.Expr.where"]], "all() (in module polars)": [[492, "polars.all"]], "any() (in module polars)": [[493, "polars.any"]], "apply() (in module polars)": [[494, "polars.apply"]], "arange() (in module polars)": [[495, "polars.arange"]], "arg_sort_by() (in module polars)": [[496, "polars.arg_sort_by"]], "avg() (in module polars)": [[497, "polars.avg"]], "coalesce() (in module polars)": [[498, "polars.coalesce"]], "col() (in module polars)": [[499, "polars.col"]], "concat_list() (in module polars)": [[500, "polars.concat_list"]], "concat_str() (in module polars)": [[501, "polars.concat_str"]], "corr() (in module polars)": [[502, "polars.corr"]], "count() (in module polars)": [[503, "polars.count"]], "cov() (in module polars)": [[504, "polars.cov"]], "cumfold() (in module polars)": [[505, "polars.cumfold"]], "cumreduce() (in module polars)": [[506, "polars.cumreduce"]], "cumsum() (in module polars)": [[507, "polars.cumsum"]], "date() (in module polars)": [[508, "polars.date"]], "datetime() (in module polars)": [[509, "polars.datetime"]], "duration() (in module polars)": [[510, "polars.duration"]], "element() (in module polars)": [[511, "polars.element"]], "exclude() (in module polars)": [[512, "polars.exclude"]], "first() (in module polars)": [[513, "polars.first"]], "fold() (in module polars)": [[514, "polars.fold"]], "format() (in module polars)": [[515, "polars.format"]], "from_epoch() (in module polars)": [[516, "polars.from_epoch"]], "groups() (in module polars)": [[517, "polars.groups"]], "head() (in module polars)": [[518, "polars.head"]], "list() (in module polars)": [[519, "polars.list"]], "lit() (in module polars)": [[520, "polars.lit"]], "map() (in module polars)": [[521, "polars.map"]], "max() (in module polars)": [[522, "polars.max"]], "mean() (in module polars)": [[523, "polars.mean"]], "median() (in module polars)": [[524, "polars.median"]], "min() (in module polars)": [[525, "polars.min"]], "n_unique() (in module polars)": [[526, "polars.n_unique"]], "pearson_corr() (in module polars)": [[527, "polars.pearson_corr"]], "quantile() (in module polars)": [[528, "polars.quantile"]], "reduce() (in module polars)": [[529, "polars.reduce"]], "repeat() (in module polars)": [[530, "polars.repeat"]], "select() (in module polars)": [[531, "polars.select"]], "spearman_rank_corr() (in module polars)": [[532, "polars.spearman_rank_corr"]], "std() (in module polars)": [[533, "polars.std"]], "struct() (in module polars)": [[534, "polars.struct"]], "sum() (in module polars)": [[535, "polars.sum"]], "tail() (in module polars)": [[536, "polars.tail"]], "var() (in module polars)": [[537, "polars.var"]], "when() (in module polars)": [[538, "polars.when"]], "cache() (polars.lazyframe method)": [[558, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[559, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[560, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[561, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[562, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[563, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[564, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[565, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[566, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[567, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[568, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[569, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[570, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[571, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[572, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[573, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[574, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[575, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[576, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[577, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[578, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[579, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[580, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[581, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[582, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[583, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[584, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[585, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[586, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[587, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[588, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[589, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[590, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[591, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[592, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[593, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[594, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[595, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[596, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[597, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[598, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[599, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[600, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[601, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[602, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[603, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[604, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[605, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[606, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[607, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[608, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[609, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[610, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[611, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[612, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[613, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[614, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[615, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[616, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[617, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[618, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[619, "polars.LazyFrame.write_json"]], "agg() (polars.internals.lazyframe.groupby.lazygroupby method)": [[620, "polars.internals.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.internals.lazyframe.groupby.lazygroupby method)": [[621, "polars.internals.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.internals.lazyframe.groupby.lazygroupby method)": [[622, "polars.internals.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.internals.lazyframe.groupby.lazygroupby method)": [[623, "polars.internals.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.internals.lazyframe.groupby.lazygroupby method)": [[624, "polars.internals.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.internals.lazyframe.groupby.lazygroupby method)": [[625, "polars.internals.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.internals.lazyframe.groupby.lazygroupby method)": [[626, "polars.internals.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.internals.lazyframe.groupby.lazygroupby method)": [[627, "polars.internals.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.internals.lazyframe.groupby.lazygroupby method)": [[628, "polars.internals.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.internals.lazyframe.groupby.lazygroupby method)": [[629, "polars.internals.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.internals.lazyframe.groupby.lazygroupby method)": [[630, "polars.internals.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.internals.lazyframe.groupby.lazygroupby method)": [[631, "polars.internals.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.internals.lazyframe.groupby.lazygroupby method)": [[632, "polars.internals.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.internals.lazyframe.groupby.lazygroupby method)": [[633, "polars.internals.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.internals.lazyframe.groupby.lazygroupby method)": [[634, "polars.internals.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[642, "polars.Series.abs"]], "alias() (polars.series method)": [[643, "polars.Series.alias"]], "all() (polars.series method)": [[644, "polars.Series.all"]], "any() (polars.series method)": [[645, "polars.Series.any"]], "append() (polars.series method)": [[646, "polars.Series.append"]], "apply() (polars.series method)": [[647, "polars.Series.apply"]], "arccos() (polars.series method)": [[648, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[649, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[650, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[651, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[652, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[653, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[654, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[655, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[656, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[657, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[658, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[659, "polars.Series.argsort"]], "arr (polars.series attribute)": [[660, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[661, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[662, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[663, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[664, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[665, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[666, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[667, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[668, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[669, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[670, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[671, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[672, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[673, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[674, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[675, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[676, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[677, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[678, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[679, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[680, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[681, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[682, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[683, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[684, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[685, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[686, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[687, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[688, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[689, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[690, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[691, "polars.Series.bin.starts_with"]], "cast() (polars.series method)": [[692, "polars.Series.cast"]], "cat (polars.series attribute)": [[693, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[694, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[695, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[696, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[697, "polars.Series.clear"]], "clip() (polars.series method)": [[698, "polars.Series.clip"]], "clip_max() (polars.series method)": [[699, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[700, "polars.Series.clip_min"]], "clone() (polars.series method)": [[701, "polars.Series.clone"]], "cos() (polars.series method)": [[702, "polars.Series.cos"]], "cosh() (polars.series method)": [[703, "polars.Series.cosh"]], "cummax() (polars.series method)": [[704, "polars.Series.cummax"]], "cummin() (polars.series method)": [[705, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[706, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[707, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[708, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[709, "polars.Series.cut"]], "describe() (polars.series method)": [[710, "polars.Series.describe"]], "diff() (polars.series method)": [[711, "polars.Series.diff"]], "dot() (polars.series method)": [[712, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[713, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[714, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[715, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[716, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[717, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[718, "polars.Series.dt.convert_time_zone"]], "day() (polars.series.dt method)": [[719, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[720, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[721, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[722, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[723, "polars.Series.dt.hours"]], "iso_year() (polars.series.dt method)": [[724, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[725, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[726, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[727, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[728, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[729, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[730, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[731, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[732, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[733, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[734, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[735, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[736, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[737, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[738, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[739, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[740, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[741, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[742, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[743, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[744, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[745, "polars.Series.dt.strftime"]], "timestamp() (polars.series.dt method)": [[746, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[747, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[748, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[749, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[750, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[751, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[752, "polars.Series.dtype"]], "entropy() (polars.series method)": [[753, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[754, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[755, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[756, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[757, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[758, "polars.Series.exp"]], "explode() (polars.series method)": [[759, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[760, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[761, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[762, "polars.Series.fill_null"]], "filter() (polars.series method)": [[763, "polars.Series.filter"]], "flags (polars.series attribute)": [[764, "polars.Series.flags"]], "floor() (polars.series method)": [[765, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[766, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[767, "polars.Series.has_validity"]], "hash() (polars.series method)": [[768, "polars.Series.hash"]], "head() (polars.series method)": [[769, "polars.Series.head"]], "inner_dtype (polars.series attribute)": [[770, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[771, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[772, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[773, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[774, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[775, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[776, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[777, "polars.Series.is_first"]], "is_float() (polars.series method)": [[778, "polars.Series.is_float"]], "is_in() (polars.series method)": [[779, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[780, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[781, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[782, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[783, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[784, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[785, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[786, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[787, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[788, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[789, "polars.Series.is_utf8"]], "item() (polars.series method)": [[790, "polars.Series.item"]], "kurtosis() (polars.series method)": [[791, "polars.Series.kurtosis"]], "len() (polars.series method)": [[792, "polars.Series.len"]], "limit() (polars.series method)": [[793, "polars.Series.limit"]], "log() (polars.series method)": [[794, "polars.Series.log"]], "log10() (polars.series method)": [[795, "polars.Series.log10"]], "lower_bound() (polars.series method)": [[796, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[797, "polars.Series.map_dict"]], "max() (polars.series method)": [[798, "polars.Series.max"]], "mean() (polars.series method)": [[799, "polars.Series.mean"]], "median() (polars.series method)": [[800, "polars.Series.median"]], "min() (polars.series method)": [[801, "polars.Series.min"]], "mode() (polars.series method)": [[802, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[803, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[804, "polars.Series.n_unique"]], "name (polars.series attribute)": [[805, "polars.Series.name"]], "nan_max() (polars.series method)": [[806, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[807, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[808, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[809, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[810, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[811, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[812, "polars.Series.peak_min"]], "product() (polars.series method)": [[813, "polars.Series.product"]], "quantile() (polars.series method)": [[814, "polars.Series.quantile"]], "rank() (polars.series method)": [[815, "polars.Series.rank"]], "rechunk() (polars.series method)": [[816, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[817, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[818, "polars.Series.rename"]], "reshape() (polars.series method)": [[819, "polars.Series.reshape"]], "reverse() (polars.series method)": [[820, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[821, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[822, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[823, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[824, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[825, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[826, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[827, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[828, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[829, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[830, "polars.Series.rolling_var"]], "round() (polars.series method)": [[831, "polars.Series.round"]], "sample() (polars.series method)": [[832, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[833, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[834, "polars.Series.series_equal"]], "set() (polars.series method)": [[835, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[836, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[837, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[838, "polars.Series.shape"]], "shift() (polars.series method)": [[839, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[840, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[841, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[842, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[843, "polars.Series.shuffle"]], "sign() (polars.series method)": [[844, "polars.Series.sign"]], "sin() (polars.series method)": [[845, "polars.Series.sin"]], "sinh() (polars.series method)": [[846, "polars.Series.sinh"]], "skew() (polars.series method)": [[847, "polars.Series.skew"]], "slice() (polars.series method)": [[848, "polars.Series.slice"]], "sort() (polars.series method)": [[849, "polars.Series.sort"]], "sqrt() (polars.series method)": [[850, "polars.Series.sqrt"]], "std() (polars.series method)": [[851, "polars.Series.std"]], "str (polars.series attribute)": [[852, "polars.Series.str"]], "concat() (polars.series.str method)": [[853, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[854, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[855, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[856, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[857, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[858, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[859, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[860, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[861, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[862, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[863, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[864, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[865, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[866, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[867, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[868, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[869, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[870, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[871, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[872, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[873, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[874, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[875, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[876, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[877, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[878, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[879, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[880, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[881, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[882, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[883, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[884, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[885, "polars.Series.struct.rename_fields"]], "unnest() (polars.series.struct method)": [[886, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[887, "polars.Series.sum"]], "tail() (polars.series method)": [[888, "polars.Series.tail"]], "take() (polars.series method)": [[889, "polars.Series.take"]], "take_every() (polars.series method)": [[890, "polars.Series.take_every"]], "tan() (polars.series method)": [[891, "polars.Series.tan"]], "tanh() (polars.series method)": [[892, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[893, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[894, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[895, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[896, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[897, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[898, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[899, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[900, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[901, "polars.Series.top_k"]], "unique() (polars.series method)": [[902, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[903, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[904, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[905, "polars.Series.value_counts"]], "var() (polars.series method)": [[906, "polars.Series.var"]], "view() (polars.series method)": [[907, "polars.Series.view"]], "zip_with() (polars.series method)": [[908, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[923, "polars.SQLContext"]]}})